{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Data analysis libraries\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "\n",
    "# Data visualization libraries\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "# Logistic regression analysis library\n",
    "import statsmodels.api as sm\n",
    "import statsmodels.formula.api as smf\n",
    "\n",
    "from statsmodels.iolib.summary2 import summary_col\n",
    "\n",
    "##\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "\n",
    "# Configure the visualization style\n",
    "sns.set(style=\"whitegrid\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_all = pd.read_csv(\"ess_preprocessed_copy.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "selected_columns = [\n",
    "    'gndr', 'basinc','agea', 'eduyrs', 'emplrel', 'uemp3m', 'hincsrca',\n",
    "    'hinctnta', 'lrscale', 'polintr', 'gincdif', 'smdfslv', 'sbeqsoc',\n",
    "    'sbprvpv', 'gvslvue', 'bennent', 'sbstrec', 'sblazy', 'dfincac'\n",
    "]\n",
    "\n",
    "# Filter the dataframe for Germany and select the desired columns\n",
    "df_de = df_all[df_all['cntry'] == 'DE'][selected_columns]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>gndr</th>\n",
       "      <th>basinc</th>\n",
       "      <th>agea</th>\n",
       "      <th>eduyrs</th>\n",
       "      <th>emplrel</th>\n",
       "      <th>uemp3m</th>\n",
       "      <th>hincsrca</th>\n",
       "      <th>hinctnta</th>\n",
       "      <th>lrscale</th>\n",
       "      <th>polintr</th>\n",
       "      <th>gincdif</th>\n",
       "      <th>smdfslv</th>\n",
       "      <th>sbeqsoc</th>\n",
       "      <th>sbprvpv</th>\n",
       "      <th>gvslvue</th>\n",
       "      <th>bennent</th>\n",
       "      <th>sbstrec</th>\n",
       "      <th>sblazy</th>\n",
       "      <th>dfincac</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>2852.000000</td>\n",
       "      <td>2852.000000</td>\n",
       "      <td>2852.000000</td>\n",
       "      <td>2852.000000</td>\n",
       "      <td>2852.000000</td>\n",
       "      <td>2852.000000</td>\n",
       "      <td>2852.000000</td>\n",
       "      <td>2852.000000</td>\n",
       "      <td>2852.000000</td>\n",
       "      <td>2852.000000</td>\n",
       "      <td>2852.000000</td>\n",
       "      <td>2852.000000</td>\n",
       "      <td>2852.000000</td>\n",
       "      <td>2852.000000</td>\n",
       "      <td>2852.000000</td>\n",
       "      <td>2852.000000</td>\n",
       "      <td>2852.000000</td>\n",
       "      <td>2852.000000</td>\n",
       "      <td>2852.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>0.528752</td>\n",
       "      <td>0.476157</td>\n",
       "      <td>48.559257</td>\n",
       "      <td>14.255961</td>\n",
       "      <td>1.388850</td>\n",
       "      <td>0.287167</td>\n",
       "      <td>2.142356</td>\n",
       "      <td>5.807504</td>\n",
       "      <td>2.064165</td>\n",
       "      <td>0.680575</td>\n",
       "      <td>0.801543</td>\n",
       "      <td>0.765428</td>\n",
       "      <td>0.663394</td>\n",
       "      <td>0.819425</td>\n",
       "      <td>0.677069</td>\n",
       "      <td>0.717391</td>\n",
       "      <td>0.488780</td>\n",
       "      <td>0.592567</td>\n",
       "      <td>0.627279</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>0.499260</td>\n",
       "      <td>0.499519</td>\n",
       "      <td>18.488016</td>\n",
       "      <td>3.312506</td>\n",
       "      <td>1.127098</td>\n",
       "      <td>0.452519</td>\n",
       "      <td>1.652587</td>\n",
       "      <td>2.799842</td>\n",
       "      <td>2.291862</td>\n",
       "      <td>0.466336</td>\n",
       "      <td>0.398908</td>\n",
       "      <td>0.423805</td>\n",
       "      <td>0.472632</td>\n",
       "      <td>0.384733</td>\n",
       "      <td>0.467679</td>\n",
       "      <td>0.450347</td>\n",
       "      <td>0.499962</td>\n",
       "      <td>0.491443</td>\n",
       "      <td>0.483614</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>15.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>33.000000</td>\n",
       "      <td>12.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>50.000000</td>\n",
       "      <td>14.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>63.000000</td>\n",
       "      <td>16.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>94.000000</td>\n",
       "      <td>28.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              gndr       basinc         agea       eduyrs      emplrel  \\\n",
       "count  2852.000000  2852.000000  2852.000000  2852.000000  2852.000000   \n",
       "mean      0.528752     0.476157    48.559257    14.255961     1.388850   \n",
       "std       0.499260     0.499519    18.488016     3.312506     1.127098   \n",
       "min       0.000000     0.000000    15.000000     2.000000     1.000000   \n",
       "25%       0.000000     0.000000    33.000000    12.000000     1.000000   \n",
       "50%       1.000000     0.000000    50.000000    14.000000     1.000000   \n",
       "75%       1.000000     1.000000    63.000000    16.000000     1.000000   \n",
       "max       1.000000     1.000000    94.000000    28.000000     6.000000   \n",
       "\n",
       "            uemp3m     hincsrca     hinctnta      lrscale      polintr  \\\n",
       "count  2852.000000  2852.000000  2852.000000  2852.000000  2852.000000   \n",
       "mean      0.287167     2.142356     5.807504     2.064165     0.680575   \n",
       "std       0.452519     1.652587     2.799842     2.291862     0.466336   \n",
       "min       0.000000     1.000000     1.000000     0.000000     0.000000   \n",
       "25%       0.000000     1.000000     4.000000     0.000000     0.000000   \n",
       "50%       0.000000     1.000000     6.000000     1.000000     1.000000   \n",
       "75%       1.000000     4.000000     8.000000     5.000000     1.000000   \n",
       "max       1.000000     8.000000    10.000000     5.000000     1.000000   \n",
       "\n",
       "           gincdif      smdfslv      sbeqsoc      sbprvpv      gvslvue  \\\n",
       "count  2852.000000  2852.000000  2852.000000  2852.000000  2852.000000   \n",
       "mean      0.801543     0.765428     0.663394     0.819425     0.677069   \n",
       "std       0.398908     0.423805     0.472632     0.384733     0.467679   \n",
       "min       0.000000     0.000000     0.000000     0.000000     0.000000   \n",
       "25%       1.000000     1.000000     0.000000     1.000000     0.000000   \n",
       "50%       1.000000     1.000000     1.000000     1.000000     1.000000   \n",
       "75%       1.000000     1.000000     1.000000     1.000000     1.000000   \n",
       "max       1.000000     1.000000     1.000000     1.000000     1.000000   \n",
       "\n",
       "           bennent      sbstrec       sblazy      dfincac  \n",
       "count  2852.000000  2852.000000  2852.000000  2852.000000  \n",
       "mean      0.717391     0.488780     0.592567     0.627279  \n",
       "std       0.450347     0.499962     0.491443     0.483614  \n",
       "min       0.000000     0.000000     0.000000     0.000000  \n",
       "25%       0.000000     0.000000     0.000000     0.000000  \n",
       "50%       1.000000     0.000000     1.000000     1.000000  \n",
       "75%       1.000000     1.000000     1.000000     1.000000  \n",
       "max       1.000000     1.000000     1.000000     1.000000  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_de.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Optimization terminated successfully.\n",
      "         Current function value: 0.690895\n",
      "         Iterations 4\n",
      "                           Logit Regression Results                           \n",
      "==============================================================================\n",
      "Dep. Variable:                 basinc   No. Observations:                 2852\n",
      "Model:                          Logit   Df Residuals:                     2848\n",
      "Method:                           MLE   Df Model:                            3\n",
      "Date:                Thu, 04 May 2023   Pseudo R-squ.:                0.001611\n",
      "Time:                        23:43:27   Log-Likelihood:                -1970.4\n",
      "converged:                       True   LL-Null:                       -1973.6\n",
      "Covariance Type:            nonrobust   LLR p-value:                   0.09539\n",
      "==============================================================================\n",
      "                 coef    std err          z      P>|z|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------\n",
      "Intercept      0.2271      0.202      1.123      0.261      -0.169       0.623\n",
      "agea          -0.0050      0.002     -2.474      0.013      -0.009      -0.001\n",
      "gndr           0.0231      0.075      0.306      0.759      -0.125       0.171\n",
      "eduyrs        -0.0063      0.011     -0.555      0.579      -0.029       0.016\n",
      "==============================================================================\n"
     ]
    }
   ],
   "source": [
    "# Create logistic regression model using demographic variables with continuous age and education years\n",
    "demographic_model_formula = \"basinc ~ agea + gndr + eduyrs\"\n",
    "demographic_model = smf.logit(demographic_model_formula, data=df_de).fit()\n",
    "\n",
    "# Assign a name to the model\n",
    "demographic_model.title = \"Demographic Model\"\n",
    "\n",
    "# View summary of the logistic regression model\n",
    "print(demographic_model.summary())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1    2363\n",
       "2     295\n",
       "6     142\n",
       "3      52\n",
       "Name: emplrel, dtype: int64"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_de[\"emplrel\"].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Define a function to replace 6 with an even distribution of 1, 2, and 3\n",
    "def replace_six(value):\n",
    "    if value == 6:\n",
    "        return np.random.choice([1, 2, 3], p=[1/3, 1/3, 1/3])\n",
    "    else:\n",
    "        return value\n",
    "\n",
    "# Replace the value 6 in the emplrel column with an even distribution of 1, 2, and 3\n",
    "df_de['emplrel'] = df_de['emplrel'].apply(replace_six)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Optimization terminated successfully.\n",
      "         Current function value: 0.679454\n",
      "         Iterations 5\n",
      "                           Logit Regression Results                           \n",
      "==============================================================================\n",
      "Dep. Variable:                 basinc   No. Observations:                 2852\n",
      "Model:                          Logit   Df Residuals:                     2841\n",
      "Method:                           MLE   Df Model:                           10\n",
      "Date:                Thu, 04 May 2023   Pseudo R-squ.:                 0.01814\n",
      "Time:                        23:44:00   Log-Likelihood:                -1937.8\n",
      "converged:                       True   LL-Null:                       -1973.6\n",
      "Covariance Type:            nonrobust   LLR p-value:                 2.157e-11\n",
      "==============================================================================\n",
      "                 coef    std err          z      P>|z|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------\n",
      "Intercept      0.3398      0.107      3.172      0.002       0.130       0.550\n",
      "emplrel_2      0.3819      0.137      2.784      0.005       0.113       0.651\n",
      "emplrel_3      0.4448      0.214      2.080      0.038       0.026       0.864\n",
      "hincsrca_2    -0.3868      0.178     -2.169      0.030      -0.736      -0.037\n",
      "hincsrca_3    -0.9396      0.707     -1.329      0.184      -2.325       0.446\n",
      "hincsrca_4    -0.1326      0.094     -1.408      0.159      -0.317       0.052\n",
      "hincsrca_5     0.5734      0.250      2.290      0.022       0.083       1.064\n",
      "hincsrca_6     0.7234      0.326      2.218      0.027       0.084       1.363\n",
      "hincsrca_7     0.2214      0.422      0.525      0.599      -0.605       1.048\n",
      "hincsrca_8    -0.1425      0.364     -0.392      0.695      -0.855       0.570\n",
      "hinctnta      -0.0796      0.015     -5.385      0.000      -0.109      -0.051\n",
      "==============================================================================\n"
     ]
    }
   ],
   "source": [
    "# Create dummy variables for emplrel and hincsrca\n",
    "emplrel_dummies = pd.get_dummies(df_de['emplrel'], prefix='emplrel')\n",
    "hincsrca_dummies = pd.get_dummies(df_de['hincsrca'], prefix='hincsrca')\n",
    "\n",
    "# Drop the first dummy variable for each categorical variable to avoid multicollinearity\n",
    "emplrel_dummies = emplrel_dummies.iloc[:, 1:]  # drop the first column\n",
    "hincsrca_dummies = hincsrca_dummies.iloc[:, 1:]  # drop the first column\n",
    "\n",
    "# Add the dummy variables to the DataFrame\n",
    "df_de = pd.concat([df_de, emplrel_dummies, hincsrca_dummies], axis=1)\n",
    "\n",
    "# Create logistic regression model using the specified independent variables\n",
    "independent_vars = ' + '.join(emplrel_dummies.columns) + ' + ' + ' + '.join(hincsrca_dummies.columns) + ' + hinctnta'\n",
    "model_formula = f\"basinc ~ {independent_vars}\"\n",
    "model = smf.logit(model_formula, data=df_de).fit()\n",
    "\n",
    "model.title = \"Economic Model\"\n",
    "\n",
    "\n",
    "# View summary of the logistic regression model\n",
    "print(model.summary())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Optimization terminated successfully.\n",
      "         Current function value: 0.682448\n",
      "         Iterations 4\n",
      "                           Logit Regression Results                           \n",
      "==============================================================================\n",
      "Dep. Variable:                 basinc   No. Observations:                 2852\n",
      "Model:                          Logit   Df Residuals:                     2848\n",
      "Method:                           MLE   Df Model:                            3\n",
      "Date:                Thu, 04 May 2023   Pseudo R-squ.:                 0.01382\n",
      "Time:                        23:45:26   Log-Likelihood:                -1946.3\n",
      "converged:                       True   LL-Null:                       -1973.6\n",
      "Covariance Type:            nonrobust   LLR p-value:                 8.594e-12\n",
      "==============================================================================\n",
      "                 coef    std err          z      P>|z|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------\n",
      "Intercept     -0.0167      0.080     -0.209      0.835      -0.174       0.140\n",
      "polintr       -0.2550      0.082     -3.128      0.002      -0.415      -0.095\n",
      "lrscale_0      0.3664      0.085      4.314      0.000       0.200       0.533\n",
      "lrscale_1     -0.3127      0.106     -2.953      0.003      -0.520      -0.105\n",
      "==============================================================================\n"
     ]
    }
   ],
   "source": [
    "# Create dummy variables for lrscale\n",
    "lrscale_dummies = pd.get_dummies(df_de['lrscale'], prefix='lrscale')\n",
    "\n",
    "# Drop the dummy variable for the center value (5) to use it as the reference category\n",
    "lrscale_dummies = lrscale_dummies.drop(columns=['lrscale_5'])\n",
    "\n",
    "# Add the dummy variables to the DataFrame\n",
    "df_de = pd.concat([df_de, lrscale_dummies], axis=1)\n",
    "\n",
    "# Create logistic regression model using polintr and the lrscale dummy variables\n",
    "independent_vars = 'polintr + ' + ' + '.join(lrscale_dummies.columns)\n",
    "pol_model_formula = f\"basinc ~ {independent_vars}\"\n",
    "pol_model = smf.logit(pol_model_formula, data=df_de).fit()\n",
    "\n",
    "pol_model.title = \"Political Model\"\n",
    "\n",
    "# View summary of the logistic regression model\n",
    "print(pol_model.summary())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Optimization terminated successfully.\n",
      "         Current function value: 0.655652\n",
      "         Iterations 5\n",
      "                           Logit Regression Results                           \n",
      "==============================================================================\n",
      "Dep. Variable:                 basinc   No. Observations:                 2852\n",
      "Model:                          Logit   Df Residuals:                     2842\n",
      "Method:                           MLE   Df Model:                            9\n",
      "Date:                Thu, 04 May 2023   Pseudo R-squ.:                 0.05254\n",
      "Time:                        23:45:30   Log-Likelihood:                -1869.9\n",
      "converged:                       True   LL-Null:                       -1973.6\n",
      "Covariance Type:            nonrobust   LLR p-value:                 9.365e-40\n",
      "==============================================================================\n",
      "                 coef    std err          z      P>|z|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------\n",
      "Intercept     -0.4582      0.178     -2.567      0.010      -0.808      -0.108\n",
      "gincdif        0.4893      0.107      4.592      0.000       0.280       0.698\n",
      "smdfslv        0.5584      0.098      5.690      0.000       0.366       0.751\n",
      "sbeqsoc        0.0482      0.084      0.572      0.567      -0.117       0.213\n",
      "sbprvpv       -0.3749      0.103     -3.633      0.000      -0.577      -0.173\n",
      "gvslvue        0.4921      0.086      5.721      0.000       0.323       0.661\n",
      "bennent       -0.2326      0.090     -2.596      0.009      -0.408      -0.057\n",
      "sbstrec       -0.1811      0.081     -2.226      0.026      -0.340      -0.022\n",
      "sblazy        -0.1216      0.084     -1.447      0.148      -0.286       0.043\n",
      "dfincac       -0.3204      0.083     -3.872      0.000      -0.483      -0.158\n",
      "==============================================================================\n"
     ]
    }
   ],
   "source": [
    "# List of binary variables to include in the model\n",
    "binary_vars = ['gincdif', 'smdfslv', 'sbeqsoc', 'sbprvpv', 'gvslvue', 'bennent', 'sbstrec', 'sblazy', 'dfincac']\n",
    "\n",
    "# Create logistic regression model using the specified binary variables\n",
    "independent_vars = ' + '.join(binary_vars)\n",
    "soc_model_formula = f\"basinc ~ {independent_vars}\"\n",
    "soc_model = smf.logit(soc_model_formula, data=df_de).fit()\n",
    "\n",
    "soc_model.title = 'Social Model'\n",
    "\n",
    "\n",
    "# View summary of the logistic regression model\n",
    "print(soc_model.summary())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Optimization terminated successfully.\n",
      "         Current function value: 0.640708\n",
      "         Iterations 5\n",
      "                           Logit Regression Results                           \n",
      "==============================================================================\n",
      "Dep. Variable:                 basinc   No. Observations:                 2852\n",
      "Model:                          Logit   Df Residuals:                     2825\n",
      "Method:                           MLE   Df Model:                           26\n",
      "Date:                Thu, 04 May 2023   Pseudo R-squ.:                 0.07413\n",
      "Time:                        23:45:36   Log-Likelihood:                -1827.3\n",
      "converged:                       True   LL-Null:                       -1973.6\n",
      "Covariance Type:            nonrobust   LLR p-value:                 6.271e-47\n",
      "==============================================================================\n",
      "                 coef    std err          z      P>|z|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------\n",
      "Intercept     -0.0564      0.301     -0.187      0.851      -0.647       0.534\n",
      "agea          -0.0043      0.003     -1.418      0.156      -0.010       0.002\n",
      "gndr           0.0652      0.081      0.804      0.421      -0.094       0.224\n",
      "eduyrs         0.0060      0.013      0.455      0.649      -0.020       0.032\n",
      "emplrel_2      0.4839      0.144      3.361      0.001       0.202       0.766\n",
      "emplrel_3      0.4906      0.226      2.166      0.030       0.047       0.935\n",
      "hincsrca_2    -0.2439      0.189     -1.290      0.197      -0.614       0.127\n",
      "hincsrca_3    -0.5449      0.743     -0.734      0.463      -2.001       0.911\n",
      "hincsrca_4     0.0627      0.132      0.476      0.634      -0.196       0.321\n",
      "hincsrca_5     0.4373      0.261      1.678      0.093      -0.073       0.948\n",
      "hincsrca_6     0.5723      0.336      1.701      0.089      -0.087       1.232\n",
      "hincsrca_7     0.2848      0.447      0.637      0.524      -0.591       1.161\n",
      "hincsrca_8    -0.1531      0.379     -0.404      0.686      -0.896       0.590\n",
      "hinctnta      -0.0566      0.016     -3.454      0.001      -0.089      -0.024\n",
      "uemp3m         0.2412      0.091      2.636      0.008       0.062       0.420\n",
      "polintr       -0.2374      0.091     -2.622      0.009      -0.415      -0.060\n",
      "lrscale_0      0.2081      0.091      2.294      0.022       0.030       0.386\n",
      "lrscale_1     -0.1973      0.112     -1.762      0.078      -0.417       0.022\n",
      "gincdif        0.4283      0.109      3.914      0.000       0.214       0.643\n",
      "smdfslv        0.5213      0.100      5.193      0.000       0.325       0.718\n",
      "sbeqsoc        0.0705      0.086      0.821      0.412      -0.098       0.239\n",
      "sbprvpv       -0.3326      0.105     -3.164      0.002      -0.539      -0.127\n",
      "gvslvue        0.4413      0.088      5.032      0.000       0.269       0.613\n",
      "bennent       -0.2165      0.092     -2.355      0.019      -0.397      -0.036\n",
      "sbstrec       -0.1695      0.084     -2.023      0.043      -0.334      -0.005\n",
      "sblazy        -0.1517      0.087     -1.740      0.082      -0.323       0.019\n",
      "dfincac       -0.2800      0.085     -3.298      0.001      -0.446      -0.114\n",
      "==============================================================================\n"
     ]
    }
   ],
   "source": [
    "# Variables for demographics\n",
    "demographic_vars = \"agea + gndr + eduyrs\"\n",
    "\n",
    "# Variables for economic predictors\n",
    "emplrel_vars = ' + '.join(df_de.columns[df_de.columns.str.startswith('emplrel_')])\n",
    "hincsrca_vars = ' + '.join(df_de.columns[df_de.columns.str.startswith('hincsrca_')])\n",
    "economic_vars = f\"{emplrel_vars} + {hincsrca_vars} + hinctnta + uemp3m\"\n",
    "\n",
    "# Variables for political predictors\n",
    "political_vars = \"polintr + lrscale_0 + lrscale_1\"\n",
    "\n",
    "# Variables for values and opinions\n",
    "values_opinions_vars = \"gincdif + smdfslv + sbeqsoc + sbprvpv + gvslvue + bennent + sbstrec + sblazy + dfincac\"\n",
    "\n",
    "# Create logistic regression model using all the variables\n",
    "independent_vars = f\"{demographic_vars} + {economic_vars} + {political_vars} + {values_opinions_vars}\"\n",
    "all_model_formula = f\"basinc ~ {independent_vars}\"\n",
    "all_model = smf.logit(all_model_formula, data=df_de).fit()\n",
    "\n",
    "all_model.title = 'All Model'\n",
    "\n",
    "# View summary of the logistic regression model\n",
    "print(all_model.summary())\n"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "# Create a table with the results from all models\n",
    "results_table = summary_col(\n",
    "    list(models.values()),\n",
    "    stars=True,\n",
    "    model_names=list(models.keys()),\n",
    "    float_format=\"%.3f\",\n",
    "    info_dict={\n",
    "        'N': lambda x: \"{0:d}\".format(int(x.nobs)),\n",
    "        'Pseudo R-squared': lambda x: \"{:.3f}\".format(x.prsquared),\n",
    "        'Model': lambda x: x.title,\n",
    "    }\n",
    ")\n",
    "\n",
    "# Print the table\n",
    "print(results_table)\n",
    "\n",
    "# Print the notes\n",
    "notes = \"\"\"\n",
    "Note: See Appendix X for result tables for each model. See Appendix X for the variable names in the dataset for each independent variable.\n",
    "\n",
    "Data Source: ESS (2016) Round 8 Dataset.\n",
    "\"\"\"\n",
    "print(notes)\n",
    "\n"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "# Create the summary table\n",
    "results_table = summary_col(\n",
    "    list(models.values()),\n",
    "    stars=True,\n",
    "    model_names=list(models.keys()),\n",
    "    float_format=\"%.3f\",\n",
    "    info_dict={\n",
    "        'N': lambda x: \"{0:d}\".format(int(x.nobs)),\n",
    "        'Pseudo R2': lambda x: \"{:.3f}\".format(x.pseudo_rsquared),\n",
    "    }\n",
    ")\n",
    "\n",
    "# Save the table to a text file\n",
    "with open(\"summary_table.txt\", \"w\") as f:\n",
    "    f.write(results_table.as_text())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Analysis of the rich individuals with interaction terms"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_de['is_rich'] = (df_de['hinctnta'] > 6).astype(int)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>gndr</th>\n",
       "      <th>basinc</th>\n",
       "      <th>agea</th>\n",
       "      <th>eduyrs</th>\n",
       "      <th>emplrel</th>\n",
       "      <th>uemp3m</th>\n",
       "      <th>hincsrca</th>\n",
       "      <th>hinctnta</th>\n",
       "      <th>lrscale</th>\n",
       "      <th>polintr</th>\n",
       "      <th>...</th>\n",
       "      <th>sbprvpv</th>\n",
       "      <th>gvslvue</th>\n",
       "      <th>bennent</th>\n",
       "      <th>sbstrec</th>\n",
       "      <th>sblazy</th>\n",
       "      <th>dfincac</th>\n",
       "      <th>is_rich</th>\n",
       "      <th>agea_rich</th>\n",
       "      <th>gndr_rich</th>\n",
       "      <th>eduyrs_rich</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>7570</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>22</td>\n",
       "      <td>12</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>6.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7571</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>58</td>\n",
       "      <td>10</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2.0</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7572</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>64</td>\n",
       "      <td>12</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>4.0</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7573</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>52</td>\n",
       "      <td>10</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>9.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>52</td>\n",
       "      <td>1</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7574</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>67</td>\n",
       "      <td>19</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>10.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>67</td>\n",
       "      <td>1</td>\n",
       "      <td>19</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 23 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      gndr  basinc  agea  eduyrs  emplrel  uemp3m  hincsrca  hinctnta  \\\n",
       "7570     1       1    22      12        1       0         1       6.0   \n",
       "7571     1       1    58      10        1       0         1       2.0   \n",
       "7572     1       0    64      12        1       0         1       4.0   \n",
       "7573     1       0    52      10        1       0         1       9.0   \n",
       "7574     1       0    67      19        1       0         1      10.0   \n",
       "\n",
       "      lrscale  polintr  ...  sbprvpv  gvslvue  bennent  sbstrec  sblazy  \\\n",
       "7570        0        0  ...        0        0        1        0       0   \n",
       "7571        5        1  ...        1        1        0        1       1   \n",
       "7572        5        1  ...        1        1        1        1       1   \n",
       "7573        1        0  ...        1        1        1        1       0   \n",
       "7574        1        1  ...        1        1        1        0       1   \n",
       "\n",
       "      dfincac  is_rich  agea_rich  gndr_rich  eduyrs_rich  \n",
       "7570        0        0          0          0            0  \n",
       "7571        1        0          0          0            0  \n",
       "7572        1        0          0          0            0  \n",
       "7573        1        1         52          1           10  \n",
       "7574        1        1         67          1           19  \n",
       "\n",
       "[5 rows x 23 columns]"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# List of demographic variables\n",
    "demographic_vars_list = ['agea', 'gndr', 'eduyrs']\n",
    "\n",
    "# Create interaction terms for demographic variables with 'is_rich'\n",
    "for var in demographic_vars_list:\n",
    "    interaction_term_name = f\"{var}_rich\"\n",
    "    df_de[interaction_term_name] = df_de[var] * df_de['is_rich']\n",
    "\n",
    "# Check the first few rows of the dataset to see if the interaction terms were created\n",
    "df_de.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Optimization terminated successfully.\n",
      "         Current function value: 0.685918\n",
      "         Iterations 4\n",
      "                           Logit Regression Results                           \n",
      "==============================================================================\n",
      "Dep. Variable:                 basinc   No. Observations:                 2852\n",
      "Model:                          Logit   Df Residuals:                     2845\n",
      "Method:                           MLE   Df Model:                            6\n",
      "Date:                Thu, 04 May 2023   Pseudo R-squ.:                0.008802\n",
      "Time:                        23:54:43   Log-Likelihood:                -1956.2\n",
      "converged:                       True   LL-Null:                       -1973.6\n",
      "Covariance Type:            nonrobust   LLR p-value:                 4.829e-06\n",
      "===============================================================================\n",
      "                  coef    std err          z      P>|z|      [0.025      0.975]\n",
      "-------------------------------------------------------------------------------\n",
      "Intercept       0.0497      0.206      0.241      0.809      -0.354       0.453\n",
      "agea           -0.0044      0.002     -1.851      0.064      -0.009       0.000\n",
      "gndr            0.1242      0.101      1.234      0.217      -0.073       0.322\n",
      "eduyrs          0.0132      0.013      0.985      0.325      -0.013       0.039\n",
      "agea_rich      -0.0043      0.004     -1.163      0.245      -0.012       0.003\n",
      "gndr_rich      -0.1642      0.151     -1.091      0.275      -0.459       0.131\n",
      "eduyrs_rich    -0.0076      0.013     -0.574      0.566      -0.034       0.018\n",
      "===============================================================================\n"
     ]
    }
   ],
   "source": [
    "# Create a string with demographic interaction terms\n",
    "interaction_demographic_vars = \" + \".join([f\"{var}_rich\" for var in demographic_vars_list])\n",
    "\n",
    "# Create a logistic regression model using the demographic variables and their interaction terms with 'is_rich'\n",
    "demographic_interaction_formula = f\"basinc ~ {demographic_vars} + {interaction_demographic_vars}\"\n",
    "model_demographic_interaction = smf.logit(demographic_interaction_formula, data=df_de).fit()\n",
    "\n",
    "model_demographic_interaction.title = \"Rich Demographic\"\n",
    "\n",
    "# View summary of the logistic regression model\n",
    "print(model_demographic_interaction.summary())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['gndr', 'basinc', 'agea', 'eduyrs', 'emplrel', 'uemp3m', 'hincsrca',\n",
       "       'hinctnta', 'lrscale', 'polintr', 'gincdif', 'smdfslv', 'sbeqsoc',\n",
       "       'sbprvpv', 'gvslvue', 'bennent', 'sbstrec', 'sblazy', 'dfincac',\n",
       "       'is_rich', 'agea_rich', 'gndr_rich', 'eduyrs_rich', 'emplrel_2',\n",
       "       'emplrel_3', 'hincsrca_2', 'hincsrca_3', 'hincsrca_4', 'hincsrca_5',\n",
       "       'hincsrca_6', 'hincsrca_7', 'hincsrca_8', 'lrscale_0', 'lrscale_1'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_de.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create interaction terms for economic variables\n",
    "economic_vars_list = df_de.columns[df_de.columns.str.startswith('emplrel_')].tolist() + df_de.columns[df_de.columns.str.startswith('hincsrca_')].tolist() + ['uemp3m']\n",
    "for var in economic_vars_list:\n",
    "    df_de[f\"{var}_rich\"] = df_de[var] * df_de[\"is_rich\"]\n",
    "\n",
    "# Economic variables without hinctnta\n",
    "economic_vars_no_hinctnta = ' + '.join(df_de.columns[df_de.columns.str.startswith('emplrel_')].tolist() + df_de.columns[df_de.columns.str.startswith('hincsrca_')].tolist() + ['uemp3m'])\n",
    "\n",
    "# Interaction terms for economic variables without hinctnta\n",
    "economic_interaction_vars_no_hinctnta = ' + '.join(df_de.columns[df_de.columns.str.endswith('_rich') & ~df_de.columns.str.startswith('hinctnta')])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Optimization terminated successfully.\n",
      "         Current function value: 0.680931\n",
      "         Iterations 5\n",
      "                           Logit Regression Results                           \n",
      "==============================================================================\n",
      "Dep. Variable:                 basinc   No. Observations:                 2852\n",
      "Model:                          Logit   Df Residuals:                     2838\n",
      "Method:                           MLE   Df Model:                           13\n",
      "Date:                Thu, 04 May 2023   Pseudo R-squ.:                 0.01601\n",
      "Time:                        23:59:41   Log-Likelihood:                -1942.0\n",
      "converged:                       True   LL-Null:                       -1973.6\n",
      "Covariance Type:            nonrobust   LLR p-value:                 1.401e-08\n",
      "======================================================================================\n",
      "                         coef    std err          z      P>|z|      [0.025      0.975]\n",
      "--------------------------------------------------------------------------------------\n",
      "Intercept             -0.2650      0.055     -4.818      0.000      -0.373      -0.157\n",
      "emplrel_2              0.4142      0.137      3.022      0.003       0.146       0.683\n",
      "emplrel_3              0.3695      0.279      1.324      0.185      -0.177       0.916\n",
      "hincsrca_2            -0.4324      0.178     -2.432      0.015      -0.781      -0.084\n",
      "hincsrca_3            -0.8634      0.701     -1.233      0.218      -2.236       0.510\n",
      "hincsrca_4            -0.0082      0.091     -0.090      0.928      -0.187       0.171\n",
      "hincsrca_5             0.6401      0.250      2.557      0.011       0.149       1.131\n",
      "hincsrca_6             0.9385      0.323      2.910      0.004       0.306       1.571\n",
      "hincsrca_7             0.3375      0.421      0.802      0.423      -0.488       1.163\n",
      "hincsrca_8             0.1953      0.401      0.487      0.627      -0.592       0.982\n",
      "uemp3m                 0.4427      0.101      4.387      0.000       0.245       0.640\n",
      "emplrel_3:is_rich      0.3294      0.416      0.792      0.428      -0.486       1.144\n",
      "hincsrca_8:is_rich    -0.6771      0.955     -0.709      0.478      -2.549       1.195\n",
      "uemp3m:is_rich        -0.2847      0.154     -1.845      0.065      -0.587       0.018\n",
      "======================================================================================\n"
     ]
    }
   ],
   "source": [
    "# Create logistic regression model with interaction terms for economic variables (excluding hinctnta)\n",
    "economic_vars_interaction = f\"{emplrel_vars} + {hincsrca_vars} + uemp3m + {emplrel_vars}:is_rich + {hincsrca_vars}:is_rich + uemp3m:is_rich\"\n",
    "\n",
    "model_formula = f\"basinc ~ {economic_vars_interaction}\"\n",
    "economic_interaction_model = smf.logit(model_formula, data=df_de).fit()\n",
    "\n",
    "economic_interaction_model.title = \"Rich Economic\"\n",
    "\n",
    "# View summary of the logistic regression model\n",
    "print(economic_interaction_model.summary())\n"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "# Create logistic regression model with interaction terms for economic variables (excluding hinctnta)\n",
    "economic_vars_interaction = f\"{emplrel_vars} + {hincsrca_vars} + uemp3m + emplrel_2:is_rich + emplrel_3:is_rich + hincsrca_2:is_rich + hincsrca_3:is_rich + hincsrca_4:is_rich + hincsrca_5:is_rich + hincsrca_6:is_rich + hincsrca_7:is_rich + hincsrca_8:is_rich + uemp3m:is_rich\"\n",
    "\n",
    "model_formula = f\"basinc ~ {economic_vars_interaction}\"\n",
    "economic_interaction_model = smf.logit(model_formula, data=df_de).fit()\n",
    "\n",
    "economic_interaction_model.title = \"Rich Economic 2\"\n",
    "\n",
    "# View summary of the logistic regression model\n",
    "print(economic_interaction_model.summary())\n"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "# Create logistic regression model with interaction terms for economic variables (excluding hinctnta)\n",
    "economic_vars_interaction = f\"{emplrel_vars} + {hincsrca_vars} + uemp3m + emplrel_2:is_rich + emplrel_3:is_rich + hincsrca_2:is_rich + hincsrca_3:is_rich + hincsrca_4:is_rich + hincsrca_5:is_rich + hincsrca_6:is_rich + hincsrca_7:is_rich + hincsrca_8:is_rich + uemp3m:is_rich\"\n",
    "\n",
    "model_formula = f\"basinc ~ {economic_vars_interaction}\"\n",
    "economic_interaction_model = smf.logit(model_formula, data=df_de).fit(maxiter=10000)\n",
    "\n",
    "economic_interaction_model.title = \"Rich Economic 5\"\n",
    "\n",
    "# View summary of the logistic regression model\n",
    "print(economic_interaction_model.summary())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Optimization terminated successfully.\n",
      "         Current function value: 0.679688\n",
      "         Iterations 5\n",
      "                           Logit Regression Results                           \n",
      "==============================================================================\n",
      "Dep. Variable:                 basinc   No. Observations:                 2852\n",
      "Model:                          Logit   Df Residuals:                     2832\n",
      "Method:                           MLE   Df Model:                           19\n",
      "Date:                Fri, 05 May 2023   Pseudo R-squ.:                 0.01781\n",
      "Time:                        00:00:19   Log-Likelihood:                -1938.5\n",
      "converged:                       True   LL-Null:                       -1973.6\n",
      "Covariance Type:            nonrobust   LLR p-value:                 8.255e-08\n",
      "======================================================================================\n",
      "                         coef    std err          z      P>|z|      [0.025      0.975]\n",
      "--------------------------------------------------------------------------------------\n",
      "Intercept             -0.2642      0.055     -4.798      0.000      -0.372      -0.156\n",
      "emplrel_2              0.3406      0.182      1.872      0.061      -0.016       0.697\n",
      "emplrel_3              0.2970      0.281      1.057      0.291      -0.254       0.848\n",
      "hincsrca_2            -0.1487      0.267     -0.556      0.578      -0.672       0.375\n",
      "hincsrca_3            -1.4918      1.134     -1.316      0.188      -3.714       0.731\n",
      "hincsrca_4             0.0699      0.104      0.674      0.500      -0.133       0.273\n",
      "hincsrca_5             0.7027      0.265      2.651      0.008       0.183       1.222\n",
      "hincsrca_6             0.9676      0.323      2.998      0.003       0.335       1.600\n",
      "hincsrca_7             0.7305      0.506      1.444      0.149      -0.261       1.722\n",
      "hincsrca_8             0.2236      0.402      0.557      0.578      -0.563       1.011\n",
      "uemp3m                 0.4032      0.103      3.906      0.000       0.201       0.605\n",
      "emplrel_2:is_rich      0.1954      0.275      0.711      0.477      -0.343       0.734\n",
      "emplrel_3:is_rich      0.4835      0.426      1.135      0.256      -0.351       1.318\n",
      "hincsrca_2:is_rich    -0.5308      0.359     -1.478      0.140      -1.235       0.173\n",
      "hincsrca_3:is_rich     1.2030      1.459      0.824      0.410      -1.657       4.063\n",
      "hincsrca_4:is_rich    -0.2700      0.184     -1.469      0.142      -0.630       0.090\n",
      "hincsrca_5:is_rich    -0.3270      0.816     -0.401      0.689      -1.926       1.272\n",
      "hincsrca_7:is_rich    -1.5281      1.018     -1.501      0.133      -3.523       0.467\n",
      "hincsrca_8:is_rich    -0.7149      0.955     -0.748      0.454      -2.587       1.158\n",
      "uemp3m:is_rich        -0.2196      0.160     -1.376      0.169      -0.532       0.093\n",
      "======================================================================================\n"
     ]
    }
   ],
   "source": [
    "# Create logistic regression model with interaction terms for economic variables (excluding hinctnta)\n",
    "economic_vars_interaction = f\"{emplrel_vars} + {hincsrca_vars} + uemp3m + emplrel_2:is_rich + emplrel_3:is_rich + hincsrca_2:is_rich + hincsrca_3:is_rich + hincsrca_4:is_rich + hincsrca_5:is_rich  + hincsrca_7:is_rich + hincsrca_8:is_rich + uemp3m:is_rich\"\n",
    "\n",
    "model_formula = f\"basinc ~ {economic_vars_interaction}\"\n",
    "economic_interaction_model = smf.logit(model_formula, data=df_de).fit(maxiter=10000)\n",
    "\n",
    "economic_interaction_model.title = \"Rich Economic 6\"\n",
    "\n",
    "# View summary of the logistic regression model\n",
    "print(economic_interaction_model.summary())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "# List of political variables\n",
    "political_vars_list = ['polintr', 'lrscale_0', 'lrscale_1']\n",
    "\n",
    "# Creating interaction terms with 'is_rich'\n",
    "for var in political_vars_list:\n",
    "    df_de[f'{var}_rich'] = df_de[var] * df_de['is_rich']\n",
    "\n",
    "# Adding interaction terms to the political_vars string\n",
    "interaction_terms = ' + '.join([f'{var}_rich' for var in political_vars_list])\n",
    "political_vars_with_interaction = f\"{political_vars} + {interaction_terms}\"\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Optimization terminated successfully.\n",
      "         Current function value: 0.678477\n",
      "         Iterations 5\n",
      "                           Logit Regression Results                           \n",
      "==============================================================================\n",
      "Dep. Variable:                 basinc   No. Observations:                 2852\n",
      "Model:                          Logit   Df Residuals:                     2845\n",
      "Method:                           MLE   Df Model:                            6\n",
      "Date:                Fri, 05 May 2023   Pseudo R-squ.:                 0.01956\n",
      "Time:                        00:00:35   Log-Likelihood:                -1935.0\n",
      "converged:                       True   LL-Null:                       -1973.6\n",
      "Covariance Type:            nonrobust   LLR p-value:                 1.357e-14\n",
      "==================================================================================\n",
      "                     coef    std err          z      P>|z|      [0.025      0.975]\n",
      "----------------------------------------------------------------------------------\n",
      "Intercept         -0.0306      0.080     -0.381      0.703      -0.188       0.127\n",
      "polintr           -0.1117      0.098     -1.143      0.253      -0.303       0.080\n",
      "lrscale_0          0.3954      0.107      3.692      0.000       0.186       0.605\n",
      "lrscale_1         -0.0918      0.137     -0.672      0.502      -0.360       0.176\n",
      "polintr_rich      -0.2809      0.128     -2.203      0.028      -0.531      -0.031\n",
      "lrscale_0_rich    -0.0427      0.150     -0.285      0.776      -0.336       0.251\n",
      "lrscale_1_rich    -0.4432      0.195     -2.278      0.023      -0.825      -0.062\n",
      "==================================================================================\n"
     ]
    }
   ],
   "source": [
    "# Run logistic regression model with political variables and interaction terms\n",
    "model_formula = f\"basinc ~ {political_vars_with_interaction}\"\n",
    "political_model_interaction = smf.logit(model_formula, data=df_de).fit(maxiter=100)\n",
    "\n",
    "political_model_interaction.title = \"Rich Political\"\n",
    "\n",
    "# View the summary of the logistic regression model\n",
    "print(political_model_interaction.summary())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Optimization terminated successfully.\n",
      "         Current function value: 0.650570\n",
      "         Iterations 5\n",
      "                           Logit Regression Results                           \n",
      "==============================================================================\n",
      "Dep. Variable:                 basinc   No. Observations:                 2852\n",
      "Model:                          Logit   Df Residuals:                     2833\n",
      "Method:                           MLE   Df Model:                           18\n",
      "Date:                Fri, 05 May 2023   Pseudo R-squ.:                 0.05988\n",
      "Time:                        00:00:49   Log-Likelihood:                -1855.4\n",
      "converged:                       True   LL-Null:                       -1973.6\n",
      "Covariance Type:            nonrobust   LLR p-value:                 4.760e-40\n",
      "===================================================================================\n",
      "                      coef    std err          z      P>|z|      [0.025      0.975]\n",
      "-----------------------------------------------------------------------------------\n",
      "Intercept          -0.4272      0.181     -2.355      0.019      -0.783      -0.072\n",
      "gincdif             0.4825      0.146      3.304      0.001       0.196       0.769\n",
      "smdfslv             0.8263      0.137      6.024      0.000       0.557       1.095\n",
      "sbeqsoc             0.0790      0.112      0.702      0.483      -0.141       0.299\n",
      "sbprvpv            -0.4190      0.133     -3.148      0.002      -0.680      -0.158\n",
      "gvslvue             0.4226      0.114      3.712      0.000       0.199       0.646\n",
      "bennent            -0.4216      0.122     -3.463      0.001      -0.660      -0.183\n",
      "sbstrec            -0.2244      0.109     -2.056      0.040      -0.438      -0.010\n",
      "sblazy             -0.1057      0.114     -0.930      0.353      -0.328       0.117\n",
      "dfincac            -0.1674      0.109     -1.542      0.123      -0.380       0.045\n",
      "gincdif:is_rich    -0.0311      0.197     -0.158      0.875      -0.418       0.356\n",
      "smdfslv:is_rich    -0.5844      0.188     -3.103      0.002      -0.954      -0.215\n",
      "sbeqsoc:is_rich    -0.0384      0.168     -0.228      0.820      -0.368       0.291\n",
      "sbprvpv:is_rich     0.1348      0.193      0.697      0.486      -0.244       0.514\n",
      "gvslvue:is_rich     0.1306      0.164      0.794      0.427      -0.192       0.453\n",
      "bennent:is_rich     0.3749      0.175      2.139      0.032       0.031       0.718\n",
      "sbstrec:is_rich     0.0538      0.164      0.328      0.743      -0.268       0.375\n",
      "sblazy:is_rich     -0.0920      0.167     -0.551      0.581      -0.419       0.235\n",
      "dfincac:is_rich    -0.3399      0.159     -2.141      0.032      -0.651      -0.029\n",
      "===================================================================================\n"
     ]
    }
   ],
   "source": [
    "# Create interaction terms for values and opinions variables\n",
    "values_opinions_vars_list = [\n",
    "    'gincdif', 'smdfslv', 'sbeqsoc', 'sbprvpv',\n",
    "    'gvslvue', 'bennent', 'sbstrec', 'sblazy', 'dfincac'\n",
    "]\n",
    "\n",
    "interaction_terms = [f\"{var}:is_rich\" for var in values_opinions_vars_list]\n",
    "interaction_formula = ' + '.join(interaction_terms)\n",
    "\n",
    "# Create logistic regression model using values and opinions variables and their interactions with is_rich\n",
    "independent_vars = f\"{values_opinions_vars} + {interaction_formula}\"\n",
    "model_formula = f\"basinc ~ {independent_vars}\"\n",
    "values_opinions_model = smf.logit(model_formula, data=df_de).fit(maxiter=1000)\n",
    "\n",
    "values_opinions_model.title = \"Rich Opinions\"\n",
    "\n",
    "# View summary of the logistic regression model\n",
    "print(values_opinions_model.summary())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['gndr', 'basinc', 'agea', 'eduyrs', 'emplrel', 'uemp3m', 'hincsrca',\n",
       "       'hinctnta', 'lrscale', 'polintr', 'gincdif', 'smdfslv', 'sbeqsoc',\n",
       "       'sbprvpv', 'gvslvue', 'bennent', 'sbstrec', 'sblazy', 'dfincac',\n",
       "       'is_rich', 'agea_rich', 'gndr_rich', 'eduyrs_rich', 'emplrel_2',\n",
       "       'emplrel_3', 'hincsrca_2', 'hincsrca_3', 'hincsrca_4', 'hincsrca_5',\n",
       "       'hincsrca_6', 'hincsrca_7', 'hincsrca_8', 'lrscale_0', 'lrscale_1',\n",
       "       'emplrel_2_rich', 'emplrel_3_rich', 'hincsrca_2_rich',\n",
       "       'hincsrca_3_rich', 'hincsrca_4_rich', 'hincsrca_5_rich',\n",
       "       'hincsrca_6_rich', 'hincsrca_7_rich', 'hincsrca_8_rich', 'uemp3m_rich',\n",
       "       'polintr_rich', 'lrscale_0_rich', 'lrscale_1_rich', 'gincdif_rich',\n",
       "       'smdfslv_rich', 'sbeqsoc_rich', 'sbprvpv_rich', 'gvslvue_rich',\n",
       "       'bennent_rich', 'sbstrec_rich', 'sblazy_rich', 'dfincac_rich'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_de.columns"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "values_opinions_list = values_opinions_vars.split(' + ')\n",
    "\n",
    "for var in values_opinions_list:\n",
    "    df_de[f\"{var}_rich\"] = df_de[var] * df_de[\"is_rich\"]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Optimization terminated successfully.\n",
      "         Current function value: 0.638249\n",
      "         Iterations 5\n",
      "                           Logit Regression Results                           \n",
      "==============================================================================\n",
      "Dep. Variable:                 basinc   No. Observations:                 2852\n",
      "Model:                          Logit   Df Residuals:                     2803\n",
      "Method:                           MLE   Df Model:                           48\n",
      "Date:                Fri, 05 May 2023   Pseudo R-squ.:                 0.07769\n",
      "Time:                        00:20:35   Log-Likelihood:                -1820.3\n",
      "converged:                       True   LL-Null:                       -1973.6\n",
      "Covariance Type:            nonrobust   LLR p-value:                 2.178e-39\n",
      "===================================================================================\n",
      "                      coef    std err          z      P>|z|      [0.025      0.975]\n",
      "-----------------------------------------------------------------------------------\n",
      "Intercept          -0.2812      0.298     -0.943      0.346      -0.866       0.303\n",
      "agea               -0.0022      0.004     -0.573      0.567      -0.010       0.005\n",
      "gndr                0.1040      0.108      0.965      0.335      -0.107       0.315\n",
      "eduyrs             -0.0041      0.016     -0.247      0.805      -0.036       0.028\n",
      "emplrel_2           0.3955      0.193      2.054      0.040       0.018       0.773\n",
      "emplrel_3           0.3232      0.294      1.100      0.271      -0.252       0.899\n",
      "hincsrca_2         -0.1741      0.288     -0.604      0.546      -0.739       0.391\n",
      "hincsrca_3         -1.5874      1.176     -1.350      0.177      -3.892       0.717\n",
      "hincsrca_4          0.0032      0.165      0.020      0.984      -0.321       0.327\n",
      "hincsrca_5          0.5027      0.278      1.811      0.070      -0.041       1.047\n",
      "hincsrca_7          0.4417      0.524      0.844      0.399      -0.584       1.468\n",
      "hincsrca_8          0.0381      0.424      0.090      0.928      -0.794       0.870\n",
      "uemp3m              0.2949      0.116      2.541      0.011       0.067       0.522\n",
      "polintr            -0.2382      0.118     -2.022      0.043      -0.469      -0.007\n",
      "lrscale_0           0.1654      0.122      1.361      0.174      -0.073       0.404\n",
      "lrscale_1          -0.0595      0.150     -0.396      0.692      -0.354       0.235\n",
      "gincdif             0.4544      0.153      2.970      0.003       0.154       0.754\n",
      "smdfslv             0.8099      0.142      5.703      0.000       0.532       1.088\n",
      "sbeqsoc             0.0789      0.114      0.690      0.490      -0.145       0.303\n",
      "sbprvpv            -0.4480      0.137     -3.265      0.001      -0.717      -0.179\n",
      "gvslvue             0.3695      0.117      3.145      0.002       0.139       0.600\n",
      "bennent            -0.4352      0.126     -3.458      0.001      -0.682      -0.189\n",
      "sbstrec            -0.2122      0.112     -1.900      0.057      -0.431       0.007\n",
      "sblazy             -0.1041      0.117     -0.894      0.372      -0.333       0.124\n",
      "dfincac            -0.1773      0.112     -1.589      0.112      -0.396       0.041\n",
      "agea_rich          -0.0064      0.006     -1.104      0.270      -0.018       0.005\n",
      "gndr_rich          -0.0556      0.164     -0.339      0.735      -0.377       0.266\n",
      "eduyrs_rich         0.0074      0.021      0.354      0.723      -0.033       0.048\n",
      "emplrel_2_rich      0.3023      0.294      1.029      0.303      -0.273       0.878\n",
      "emplrel_3_rich      0.4074      0.453      0.900      0.368      -0.480       1.294\n",
      "hincsrca_2_rich    -0.2403      0.386     -0.623      0.533      -0.996       0.516\n",
      "hincsrca_3_rich     2.0779      1.531      1.358      0.175      -0.922       5.078\n",
      "hincsrca_4_rich     0.1951      0.276      0.706      0.480      -0.346       0.737\n",
      "hincsrca_5_rich    -0.3087      0.839     -0.368      0.713      -1.953       1.336\n",
      "hincsrca_7_rich    -0.6848      1.077     -0.636      0.525      -2.796       1.426\n",
      "hincsrca_8_rich    -0.5166      0.995     -0.519      0.604      -2.466       1.433\n",
      "uemp3m_rich        -0.0482      0.189     -0.255      0.799      -0.418       0.322\n",
      "polintr_rich        0.0098      0.186      0.053      0.958      -0.355       0.374\n",
      "lrscale_0_rich      0.0786      0.182      0.432      0.666      -0.279       0.436\n",
      "lrscale_1_rich     -0.2842      0.227     -1.250      0.211      -0.730       0.162\n",
      "gincdif_rich       -0.0475      0.214     -0.222      0.825      -0.468       0.373\n",
      "smdfslv_rich       -0.5463      0.198     -2.759      0.006      -0.934      -0.158\n",
      "sbeqsoc_rich       -0.0194      0.173     -0.112      0.911      -0.358       0.319\n",
      "sbprvpv_rich        0.2486      0.210      1.181      0.238      -0.164       0.661\n",
      "gvslvue_rich        0.1635      0.175      0.934      0.350      -0.179       0.506\n",
      "bennent_rich        0.4695      0.184      2.547      0.011       0.108       0.831\n",
      "sbstrec_rich        0.0638      0.169      0.378      0.706      -0.267       0.395\n",
      "sblazy_rich        -0.0981      0.172     -0.570      0.568      -0.435       0.239\n",
      "dfincac_rich       -0.2921      0.169     -1.733      0.083      -0.622       0.038\n",
      "===================================================================================\n"
     ]
    }
   ],
   "source": [
    "# Variables for demographics\n",
    "demographic_vars = \"agea + gndr + eduyrs\"\n",
    "demographic_interaction_terms = \"agea_rich + gndr_rich + eduyrs_rich\"\n",
    "\n",
    "# Variables for economic predictors\n",
    "economic_vars = \"emplrel_2 + emplrel_3 + hincsrca_2 + hincsrca_3 + hincsrca_4 + hincsrca_5 + hincsrca_7 + hincsrca_8 + uemp3m\"\n",
    "economic_interaction_terms = \"emplrel_2_rich + emplrel_3_rich + hincsrca_2_rich + hincsrca_3_rich + hincsrca_4_rich + hincsrca_5_rich + hincsrca_7_rich + hincsrca_8_rich + uemp3m_rich\"\n",
    "\n",
    "# Variables for political predictors\n",
    "political_vars = \"polintr + lrscale_0 + lrscale_1\"\n",
    "political_interaction_terms = \"polintr_rich + lrscale_0_rich + lrscale_1_rich\"\n",
    "\n",
    "# Variables for values and opinions\n",
    "values_opinions_vars = \"gincdif + smdfslv + sbeqsoc + sbprvpv + gvslvue + bennent + sbstrec + sblazy + dfincac\"\n",
    "values_opinions_interaction_terms = \"gincdif_rich + smdfslv_rich + sbeqsoc_rich + sbprvpv_rich + gvslvue_rich + bennent_rich + sbstrec_rich + sblazy_rich + dfincac_rich\"\n",
    "\n",
    "# Create logistic regression model using all the variables\n",
    "all_vars = f\"{demographic_vars} + {economic_vars} + {political_vars} + {values_opinions_vars}\"\n",
    "all_interaction_terms = f\"{demographic_interaction_terms} + {economic_interaction_terms} + {political_interaction_terms} + {values_opinions_interaction_terms}\"\n",
    "model_formula = f\"basinc ~ {all_vars} + {all_interaction_terms}\"\n",
    "all_model = smf.logit(model_formula, data=df_de).fit()\n",
    "\n",
    "\n",
    "\n",
    "all_model.title = \"Rich All\"\n",
    "\n",
    "\n",
    "# View summary of the logistic regression model\n",
    "print(all_model.summary())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "==========================================================================================\n",
      "                       Model 1          Model 2        Model 3        Model 4     Model 5 \n",
      "------------------------------------------------------------------------------------------\n",
      "Intercept          0.050            -0.264***       -0.031         -0.427**      -0.281   \n",
      "                   (0.206)          (0.055)         (0.080)        (0.181)       (0.298)  \n",
      "agea               -0.004*                                                       -0.002   \n",
      "                   (0.002)                                                       (0.004)  \n",
      "agea_rich          -0.004                                                        -0.006   \n",
      "                   (0.004)                                                       (0.006)  \n",
      "bennent                                                            -0.422***     -0.435***\n",
      "                                                                   (0.122)       (0.126)  \n",
      "bennent:is_rich                                                    0.375**                \n",
      "                                                                   (0.175)                \n",
      "bennent_rich                                                                     0.469**  \n",
      "                                                                                 (0.184)  \n",
      "dfincac                                                            -0.167        -0.177   \n",
      "                                                                   (0.109)       (0.112)  \n",
      "dfincac:is_rich                                                    -0.340**               \n",
      "                                                                   (0.159)                \n",
      "dfincac_rich                                                                     -0.292*  \n",
      "                                                                                 (0.169)  \n",
      "eduyrs             0.013                                                         -0.004   \n",
      "                   (0.013)                                                       (0.016)  \n",
      "eduyrs_rich        -0.008                                                        0.007    \n",
      "                   (0.013)                                                       (0.021)  \n",
      "emplrel_2                           0.341*                                       0.396**  \n",
      "                                    (0.182)                                      (0.193)  \n",
      "emplrel_2:is_rich                   0.195                                                 \n",
      "                                    (0.275)                                               \n",
      "emplrel_2_rich                                                                   0.302    \n",
      "                                                                                 (0.294)  \n",
      "emplrel_3                           0.297                                        0.323    \n",
      "                                    (0.281)                                      (0.294)  \n",
      "emplrel_3:is_rich                   0.484                                                 \n",
      "                                    (0.426)                                               \n",
      "emplrel_3_rich                                                                   0.407    \n",
      "                                                                                 (0.453)  \n",
      "gincdif                                                            0.482***      0.454*** \n",
      "                                                                   (0.146)       (0.153)  \n",
      "gincdif:is_rich                                                    -0.031                 \n",
      "                                                                   (0.197)                \n",
      "gincdif_rich                                                                     -0.048   \n",
      "                                                                                 (0.214)  \n",
      "gndr               0.124                                                         0.104    \n",
      "                   (0.101)                                                       (0.108)  \n",
      "gndr_rich          -0.164                                                        -0.056   \n",
      "                   (0.151)                                                       (0.164)  \n",
      "gvslvue                                                            0.423***      0.369*** \n",
      "                                                                   (0.114)       (0.117)  \n",
      "gvslvue:is_rich                                                    0.131                  \n",
      "                                                                   (0.164)                \n",
      "gvslvue_rich                                                                     0.164    \n",
      "                                                                                 (0.175)  \n",
      "hincsrca_2                          -0.149                                       -0.174   \n",
      "                                    (0.267)                                      (0.288)  \n",
      "hincsrca_2:is_rich                  -0.531                                                \n",
      "                                    (0.359)                                               \n",
      "hincsrca_2_rich                                                                  -0.240   \n",
      "                                                                                 (0.386)  \n",
      "hincsrca_3                          -1.492                                       -1.587   \n",
      "                                    (1.134)                                      (1.176)  \n",
      "hincsrca_3:is_rich                  1.203                                                 \n",
      "                                    (1.459)                                               \n",
      "hincsrca_3_rich                                                                  2.078    \n",
      "                                                                                 (1.531)  \n",
      "hincsrca_4                          0.070                                        0.003    \n",
      "                                    (0.104)                                      (0.165)  \n",
      "hincsrca_4:is_rich                  -0.270                                                \n",
      "                                    (0.184)                                               \n",
      "hincsrca_4_rich                                                                  0.195    \n",
      "                                                                                 (0.276)  \n",
      "hincsrca_5                          0.703***                                     0.503*   \n",
      "                                    (0.265)                                      (0.278)  \n",
      "hincsrca_5:is_rich                  -0.327                                                \n",
      "                                    (0.816)                                               \n",
      "hincsrca_5_rich                                                                  -0.309   \n",
      "                                                                                 (0.839)  \n",
      "hincsrca_6                          0.968***                                              \n",
      "                                    (0.323)                                               \n",
      "hincsrca_7                          0.731                                        0.442    \n",
      "                                    (0.506)                                      (0.524)  \n",
      "hincsrca_7:is_rich                  -1.528                                                \n",
      "                                    (1.018)                                               \n",
      "hincsrca_7_rich                                                                  -0.685   \n",
      "                                                                                 (1.077)  \n",
      "hincsrca_8                          0.224                                        0.038    \n",
      "                                    (0.402)                                      (0.424)  \n",
      "hincsrca_8:is_rich                  -0.715                                                \n",
      "                                    (0.955)                                               \n",
      "hincsrca_8_rich                                                                  -0.517   \n",
      "                                                                                 (0.995)  \n",
      "lrscale_0                                           0.395***                     0.165    \n",
      "                                                    (0.107)                      (0.122)  \n",
      "lrscale_0_rich                                      -0.043                       0.079    \n",
      "                                                    (0.150)                      (0.182)  \n",
      "lrscale_1                                           -0.092                       -0.059   \n",
      "                                                    (0.137)                      (0.150)  \n",
      "lrscale_1_rich                                      -0.443**                     -0.284   \n",
      "                                                    (0.195)                      (0.227)  \n",
      "polintr                                             -0.112                       -0.238** \n",
      "                                                    (0.098)                      (0.118)  \n",
      "polintr_rich                                        -0.281**                     0.010    \n",
      "                                                    (0.128)                      (0.186)  \n",
      "sbeqsoc                                                            0.079         0.079    \n",
      "                                                                   (0.112)       (0.114)  \n",
      "sbeqsoc:is_rich                                                    -0.038                 \n",
      "                                                                   (0.168)                \n",
      "sbeqsoc_rich                                                                     -0.019   \n",
      "                                                                                 (0.173)  \n",
      "sblazy                                                             -0.106        -0.104   \n",
      "                                                                   (0.114)       (0.117)  \n",
      "sblazy:is_rich                                                     -0.092                 \n",
      "                                                                   (0.167)                \n",
      "sblazy_rich                                                                      -0.098   \n",
      "                                                                                 (0.172)  \n",
      "sbprvpv                                                            -0.419***     -0.448***\n",
      "                                                                   (0.133)       (0.137)  \n",
      "sbprvpv:is_rich                                                    0.135                  \n",
      "                                                                   (0.193)                \n",
      "sbprvpv_rich                                                                     0.249    \n",
      "                                                                                 (0.210)  \n",
      "sbstrec                                                            -0.224**      -0.212*  \n",
      "                                                                   (0.109)       (0.112)  \n",
      "sbstrec:is_rich                                                    0.054                  \n",
      "                                                                   (0.164)                \n",
      "sbstrec_rich                                                                     0.064    \n",
      "                                                                                 (0.169)  \n",
      "smdfslv                                                            0.826***      0.810*** \n",
      "                                                                   (0.137)       (0.142)  \n",
      "smdfslv:is_rich                                                    -0.584***              \n",
      "                                                                   (0.188)                \n",
      "smdfslv_rich                                                                     -0.546***\n",
      "                                                                                 (0.198)  \n",
      "uemp3m                              0.403***                                     0.295**  \n",
      "                                    (0.103)                                      (0.116)  \n",
      "uemp3m:is_rich                      -0.220                                                \n",
      "                                    (0.160)                                               \n",
      "uemp3m_rich                                                                      -0.048   \n",
      "                                                                                 (0.189)  \n",
      "N                  2852             2852            2852           2852          2852     \n",
      "Model              Rich Demographic Rich Economic 6 Rich Political Rich Opinions Rich All \n",
      "==========================================================================================\n",
      "Standard errors in parentheses.\n",
      "* p<.1, ** p<.05, ***p<.01\n"
     ]
    }
   ],
   "source": [
    "models = {\n",
    "    'Model 1': model_demographic_interaction,\n",
    "    'Model 2': economic_interaction_model,\n",
    "    'Model 3': political_model_interaction,\n",
    "    'Model 4': values_opinions_model,\n",
    "    'Model 5': all_model,\n",
    "}\n",
    "\n",
    "\n",
    "# Create a table with the results from all models\n",
    "results_table = summary_col(\n",
    "    list(models.values()),\n",
    "    stars=True,\n",
    "    model_names=list(models.keys()),\n",
    "    float_format=\"%.3f\",\n",
    "    info_dict={\n",
    "        'N': lambda x: \"{0:d}\".format(int(x.nobs)),\n",
    "        'Model': lambda x: x.title,\n",
    "    }\n",
    ")\n",
    "\n",
    "# Print the table\n",
    "print(results_table)\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [],
   "source": [
    "with open(\"summary_table_rich.txt\", \"w\") as file:\n",
    "    file.write(results_table.as_text())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "##CREATED A MULTICOLLINEARITY PROBLEM\n",
    "\n",
    "\n",
    "# Create age groups\n",
    "def age_group(age):\n",
    "    if age < 25:\n",
    "        return \"Under25\"\n",
    "    elif age <= 45:\n",
    "        return \"Age26to45\"\n",
    "    elif age <= 65:\n",
    "        return \"Age46to65\"\n",
    "    else:\n",
    "        return \"Over65\"\n",
    "\n",
    "df_de['age_group'] = df_de['agea'].apply(age_group)\n",
    "\n",
    "# Create education year groups\n",
    "def education_group(years):\n",
    "    if years <= 5:\n",
    "        return \"EduYrs0to5\"\n",
    "    elif years <= 10:\n",
    "        return \"EduYrs5to10\"\n",
    "    elif years <= 15:\n",
    "        return \"EduYrs10to15\"\n",
    "    elif years <= 20:\n",
    "        return \"EduYrs15to20\"\n",
    "    elif years <= 25:\n",
    "        return \"EduYrs20to25\"\n",
    "    else:\n",
    "        return \"EduYrsOver25\"\n",
    "\n",
    "df_de['edu_group'] = df_de['eduyrs'].apply(education_group)\n",
    "\n",
    "# Create dummy variables for age groups and education year groups\n",
    "age_group_categories = ['Under25', 'Age2645', 'Age4665', 'Over65']\n",
    "edu_group_categories = ['EduYrs0to5', 'EduYrs5to10', 'EduYrs10to15', 'EduYrs15to20', 'EduYrs20to25', 'EduYrsOver25']\n",
    "age_dummies = pd.get_dummies(df_de['age_group']).reindex(columns=age_group_categories, fill_value=0)\n",
    "edu_dummies = pd.get_dummies(df_de['edu_group']).reindex(columns=edu_group_categories, fill_value=0)\n",
    "\n",
    "age_dummies = age_dummies.drop(columns=['Under25'])  # Drop the reference group for age\n",
    "edu_dummies = edu_dummies.drop(columns=['EduYrs0to5'])  # Drop the reference group for education\n",
    "\n",
    "df_de = pd.concat([df_de, age_dummies, edu_dummies], axis=1)\n",
    "\n",
    "# Create logistic regression model using demographic variables with grouped education years\n",
    "demographic_model_formula = \"basinc ~ Age2645 + Age4665 + Over65 + gndr + EduYrs5to10 + EduYrs10to15 + EduYrs15to20 + EduYrs20to25 + EduYrsOver25\"\n",
    "demographic_model = smf.logit(demographic_model_formula, data=df_de).fit()\n",
    "\n",
    "# View summary of the logistic regression model\n",
    "print(demographic_model.summary())\n"
   ]
  },
