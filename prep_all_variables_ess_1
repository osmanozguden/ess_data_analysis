{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/anaconda3/lib/python3.8/site-packages/IPython/core/interactiveshell.py:3146: DtypeWarning: Columns (168) have mixed types.Specify dtype option on import or set low_memory=False.\n",
      "  has_raised = await self.run_ast_nodes(code_ast.body, cell_name,\n"
     ]
    }
   ],
   "source": [
    "ess_de_org = pd.read_csv(\"ESS-Data-Wizard-subset-2023-03-28.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "ess_de = ess_de_org.copy()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "PRE-PROCESSING"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "1 - basinc"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3    15951\n",
      "2    12708\n",
      "1     4567\n",
      "4     3129\n",
      "8     2867\n",
      "7      171\n",
      "9        7\n",
      "Name: basinc, dtype: int64\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "print(ess_de['basinc'].value_counts())\n",
    "sns.countplot(x='basinc', data=ess_de, palette='Set2')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "ess_de.loc[ess_de['basinc'] == 1, 'basinc'] = 0\n",
    "ess_de.loc[ess_de['basinc'] == 2, 'basinc'] = 0\n",
    "ess_de.loc[ess_de['basinc'] == 3, 'basinc'] = 1\n",
    "ess_de.loc[ess_de['basinc'] == 4, 'basinc'] = 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "ess_de.loc[ess_de['basinc'] == 7, 'basinc'] = 3\n",
    "ess_de.loc[ess_de['basinc'] == 8, 'basinc'] = 3\n",
    "ess_de.loc[ess_de['basinc'] == 9, 'basinc'] = 3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1    19080\n",
      "0    17275\n",
      "3     3045\n",
      "Name: basinc, dtype: int64\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "print(ess_de['basinc'].value_counts())\n",
    "sns.countplot(x='basinc', data=ess_de, palette='Set2')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "# replace half of the '3' values with '0' and the other half with '1'\n",
    "threes = ess_de['basinc'] == 3\n",
    "num_threes = sum(threes)\n",
    "num_zeros = num_threes // 2\n",
    "indices = ess_de.loc[threes].index\n",
    "random_indices = np.random.choice(indices, size=num_zeros, replace=False)\n",
    "ess_de.loc[random_indices, 'basinc'] = 0\n",
    "ess_de.loc[indices.difference(random_indices), 'basinc'] = 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1    20603\n",
      "0    18797\n",
      "Name: basinc, dtype: int64\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "print(ess_de['basinc'].value_counts())\n",
    "sns.countplot(x='basinc', data=ess_de, palette='Set2')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "2 - nwspol"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Dropping the missing values from the column.\n",
    "\n",
    "#ess_de.drop(ess_de[(ess_de['nwspol'] == 7777) | (ess_de['nwspol'] == 8888) | (ess_de['nwspol'] == 9999)].index, inplace=True)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "ess_de.loc[ess_de['nwspol'] == 7777, 'nwspol'] = ess_de['nwspol'].median()\n",
    "ess_de.loc[ess_de['nwspol'] == 8888, 'nwspol'] = ess_de['nwspol'].median()\n",
    "ess_de.loc[ess_de['nwspol'] == 9999, 'nwspol'] = ess_de['nwspol'].median()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "39400"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ess_de[\"nwspol\"].count()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Creating a new dataframe with all variables. \n",
    "\n",
    "x_data = ess_de[['basinc', 'nwspol']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>basinc</th>\n",
       "      <th>nwspol</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>39400.000000</td>\n",
       "      <td>39400.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>0.522919</td>\n",
       "      <td>86.037157</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>0.499481</td>\n",
       "      <td>140.964876</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>30.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>60.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>90.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>1428.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             basinc        nwspol\n",
       "count  39400.000000  39400.000000\n",
       "mean       0.522919     86.037157\n",
       "std        0.499481    140.964876\n",
       "min        0.000000      0.000000\n",
       "25%        0.000000     30.000000\n",
       "50%        1.000000     60.000000\n",
       "75%        1.000000     90.000000\n",
       "max        1.000000   1428.000000"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x_data.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "3 - polintr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3    13851\n",
      "2    13717\n",
      "4     7020\n",
      "1     4733\n",
      "8       43\n",
      "7       32\n",
      "9        4\n",
      "Name: polintr, dtype: int64\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "print(ess_de['polintr'].value_counts())\n",
    "sns.countplot(x='polintr', data=ess_de, palette='Set2')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "ess_de.loc[ess_de['polintr'] == 1, 'polintr'] = 1\n",
    "ess_de.loc[ess_de['polintr'] == 2, 'polintr'] = 1\n",
    "ess_de.loc[ess_de['polintr'] == 3, 'polintr'] = 0\n",
    "ess_de.loc[ess_de['polintr'] == 4, 'polintr'] = 0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "ess_de.loc[ess_de['polintr'] == 7, 'polintr'] = 1\n",
    "ess_de.loc[ess_de['polintr'] == 8, 'polintr'] = 0\n",
    "ess_de.loc[ess_de['polintr'] == 9, 'polintr'] = 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0    20914\n",
      "1    18486\n",
      "Name: polintr, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "print(ess_de['polintr'].value_counts())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<ipython-input-19-1f3595b8b18b>:1: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  x_data['polintr'] = ess_de['polintr']\n"
     ]
    }
   ],
   "source": [
    "x_data['polintr'] = ess_de['polintr']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>basinc</th>\n",
       "      <th>nwspol</th>\n",
       "      <th>polintr</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>39400.000000</td>\n",
       "      <td>39400.000000</td>\n",
       "      <td>39400.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>0.522919</td>\n",
       "      <td>86.037157</td>\n",
       "      <td>0.469188</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>0.499481</td>\n",
       "      <td>140.964876</td>\n",
       "      <td>0.499056</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>30.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>60.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>90.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>1428.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             basinc        nwspol       polintr\n",
       "count  39400.000000  39400.000000  39400.000000\n",
       "mean       0.522919     86.037157      0.469188\n",
       "std        0.499481    140.964876      0.499056\n",
       "min        0.000000      0.000000      0.000000\n",
       "25%        0.000000     30.000000      0.000000\n",
       "50%        1.000000     60.000000      0.000000\n",
       "75%        1.000000     90.000000      1.000000\n",
       "max        1.000000   1428.000000      1.000000"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x_data.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "4 - vote"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1    27446\n",
      "2     8038\n",
      "3     3486\n",
      "7      227\n",
      "8      194\n",
      "9        9\n",
      "Name: vote, dtype: int64\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "print(ess_de['vote'].value_counts())\n",
    "sns.countplot(x='vote', data=ess_de, palette='Set2')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Weighted distribution of missing values and turning the variable in\n",
    "\n",
    "ess_de.loc[ess_de['vote'] == 7, 'vote'] = 3\n",
    "ess_de.loc[ess_de['vote'] == 8, 'vote'] = 3\n",
    "ess_de.loc[ess_de['vote'] == 9, 'vote'] = 3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1    27446\n",
       "2     8038\n",
       "3     3916\n",
       "Name: vote, dtype: int64"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ess_de[\"vote\"].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "ess_de.loc[ess_de['vote'] == 2, 'vote'] = 0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1    27446\n",
       "0     8038\n",
       "3     3916\n",
       "Name: vote, dtype: int64"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ess_de[\"vote\"].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "# calculate the number of 3 values to replace with 0\n",
    "num_replacements = int(len(ess_de[ess_de['vote'] == 3]) * 0.20)\n",
    "\n",
    "# get the indices of the 3 values to replace with 0\n",
    "replace_indices = np.random.choice(ess_de[ess_de['vote'] == 3].index, num_replacements, replace=False)\n",
    "\n",
    "# replace the 3 values with 0 and 1\n",
    "ess_de.loc[replace_indices, 'vote'] = 0\n",
    "ess_de.loc[ess_de['vote'] == 3, 'vote'] = 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1    30579\n",
       "0     8821\n",
       "Name: vote, dtype: int64"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ess_de[\"vote\"].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>basinc</th>\n",
       "      <th>nwspol</th>\n",
       "      <th>polintr</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>39400.000000</td>\n",
       "      <td>39400.000000</td>\n",
       "      <td>39400.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>0.522919</td>\n",
       "      <td>86.037157</td>\n",
       "      <td>0.469188</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>0.499481</td>\n",
       "      <td>140.964876</td>\n",
       "      <td>0.499056</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>30.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>60.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>90.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>1428.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             basinc        nwspol       polintr\n",
       "count  39400.000000  39400.000000  39400.000000\n",
       "mean       0.522919     86.037157      0.469188\n",
       "std        0.499481    140.964876      0.499056\n",
       "min        0.000000      0.000000      0.000000\n",
       "25%        0.000000     30.000000      0.000000\n",
       "50%        1.000000     60.000000      0.000000\n",
       "75%        1.000000     90.000000      1.000000\n",
       "max        1.000000   1428.000000      1.000000"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x_data.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<ipython-input-30-1168e6a7e2e4>:1: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  x_data['vote'] = ess_de['vote']\n"
     ]
    }
   ],
   "source": [
    "x_data['vote'] = ess_de['vote']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1    30579\n",
      "0     8821\n",
      "Name: vote, dtype: int64\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "print(x_data['vote'].value_counts())\n",
    "sns.countplot(x='vote', data=x_data, palette='Set2')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "5 - sgnptit"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2    29110\n",
      "1    10117\n",
      "8      121\n",
      "7       46\n",
      "9        6\n",
      "Name: sgnptit, dtype: int64\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "print(ess_de['sgnptit'].value_counts())\n",
    "sns.countplot(x='sgnptit', data=ess_de, palette='Set2')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "ess_de.loc[ess_de['sgnptit'] == 2, 'sgnptit'] = 0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [],
   "source": [
    "ess_de.loc[ess_de['sgnptit'] == 7, 'sgnptit'] = 0\n",
    "ess_de.loc[ess_de['sgnptit'] == 8, 'sgnptit'] = 0\n",
    "ess_de.loc[ess_de['sgnptit'] == 9, 'sgnptit'] = 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<ipython-input-35-2159b3805f47>:1: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  x_data[\"sgnptit\"] = ess_de[\"sgnptit\"]\n"
     ]
    }
   ],
   "source": [
    "x_data[\"sgnptit\"] = ess_de[\"sgnptit\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0    29277\n",
      "1    10123\n",
      "Name: sgnptit, dtype: int64\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "print(x_data['sgnptit'].value_counts())\n",
    "sns.countplot(x='sgnptit', data=x_data, palette='Set2')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "6 - pstplonl"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2    32455\n",
      "1     6796\n",
      "8       91\n",
      "7       52\n",
      "9        6\n",
      "Name: pstplonl, dtype: int64\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "print(ess_de['pstplonl'].value_counts())\n",
    "sns.countplot(x='pstplonl', data=ess_de, palette='Set2')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [],
   "source": [
    "ess_de.loc[ess_de['pstplonl'] == 2, 'pstplonl'] = 0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [],
   "source": [
    "ess_de.loc[ess_de['pstplonl'] == 7, 'pstplonl'] = 0\n",
    "ess_de.loc[ess_de['pstplonl'] == 8, 'pstplonl'] = 0\n",
    "ess_de.loc[ess_de['pstplonl'] == 9, 'pstplonl'] = 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<ipython-input-40-846c48f92326>:1: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  x_data[\"pstplonl\"] = ess_de[\"pstplonl\"]\n"
     ]
    }
   ],
   "source": [
    "x_data[\"pstplonl\"] = ess_de[\"pstplonl\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0    32598\n",
      "1     6802\n",
      "Name: pstplonl, dtype: int64\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "print(x_data['pstplonl'].value_counts())\n",
    "sns.countplot(x='pstplonl', data=x_data, palette='Set2')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>basinc</th>\n",
       "      <th>nwspol</th>\n",
       "      <th>polintr</th>\n",
       "      <th>vote</th>\n",
       "      <th>sgnptit</th>\n",
       "      <th>pstplonl</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>39400.000000</td>\n",
       "      <td>39400.000000</td>\n",
       "      <td>39400.000000</td>\n",
       "      <td>39400.000000</td>\n",
       "      <td>39400.000000</td>\n",
       "      <td>39400.00000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>0.522919</td>\n",
       "      <td>86.037157</td>\n",
       "      <td>0.469188</td>\n",
       "      <td>0.776117</td>\n",
       "      <td>0.256929</td>\n",
       "      <td>0.17264</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>0.499481</td>\n",
       "      <td>140.964876</td>\n",
       "      <td>0.499056</td>\n",
       "      <td>0.416850</td>\n",
       "      <td>0.436945</td>\n",
       "      <td>0.37794</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.00000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>30.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.00000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>60.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.00000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>90.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.00000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>1428.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.00000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             basinc        nwspol       polintr          vote       sgnptit  \\\n",
       "count  39400.000000  39400.000000  39400.000000  39400.000000  39400.000000   \n",
       "mean       0.522919     86.037157      0.469188      0.776117      0.256929   \n",
       "std        0.499481    140.964876      0.499056      0.416850      0.436945   \n",
       "min        0.000000      0.000000      0.000000      0.000000      0.000000   \n",
       "25%        0.000000     30.000000      0.000000      1.000000      0.000000   \n",
       "50%        1.000000     60.000000      0.000000      1.000000      0.000000   \n",
       "75%        1.000000     90.000000      1.000000      1.000000      1.000000   \n",
       "max        1.000000   1428.000000      1.000000      1.000000      1.000000   \n",
       "\n",
       "          pstplonl  \n",
       "count  39400.00000  \n",
       "mean       0.17264  \n",
       "std        0.37794  \n",
       "min        0.00000  \n",
       "25%        0.00000  \n",
       "50%        0.00000  \n",
       "75%        0.00000  \n",
       "max        1.00000  "
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x_data.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "7 - trstplt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5     6712\n",
      "0     5687\n",
      "3     5039\n",
      "4     4800\n",
      "6     4414\n",
      "2     4412\n",
      "7     3146\n",
      "1     2832\n",
      "8     1352\n",
      "88     382\n",
      "9      343\n",
      "10     195\n",
      "77      77\n",
      "99       9\n",
      "Name: trstplt, dtype: int64\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "print(ess_de['trstplt'].value_counts())\n",
    "sns.countplot(x='trstplt', data=ess_de, palette='Set2')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [],
   "source": [
    "ess_de.loc[ess_de['trstplt'] == 1, 'trstplt'] = 0\n",
    "ess_de.loc[ess_de['trstplt'] == 2, 'trstplt'] = 0\n",
    "ess_de.loc[ess_de['trstplt'] == 3, 'trstplt'] = 0\n",
    "ess_de.loc[ess_de['trstplt'] == 4, 'trstplt'] = 0\n",
    "ess_de.loc[ess_de['trstplt'] == 6, 'trstplt'] = 1\n",
    "ess_de.loc[ess_de['trstplt'] == 7, 'trstplt'] = 1\n",
    "ess_de.loc[ess_de['trstplt'] == 8, 'trstplt'] = 1\n",
    "ess_de.loc[ess_de['trstplt'] == 9, 'trstplt'] = 1\n",
    "ess_de.loc[ess_de['trstplt'] == 10, 'trstplt'] = 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [],
   "source": [
    "ess_de.loc[ess_de['trstplt'] == 88, 'trstplt'] = 5\n",
    "ess_de.loc[ess_de['trstplt'] == 77, 'trstplt'] = 5\n",
    "ess_de.loc[ess_de['trstplt'] == 99, 'trstplt'] = 5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0    25151\n",
      "1    14249\n",
      "Name: trstplt, dtype: int64\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "print(ess_de['trstplt'].value_counts())\n",
    "sns.countplot(x='trstplt', data=ess_de, palette='Set2')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [],
   "source": [
    "num_fives = (ess_de['trstplt'] == 5).sum()\n",
    "\n",
    "# calculate the number of 5 values to replace with 0 and 1\n",
    "num_replace_zero = num_fives // 2\n",
    "num_replace_one = num_fives - num_replace_zero\n",
    "\n",
    "# get the indices of the 5 values to replace\n",
    "replace_indices_zero = np.random.choice(ess_de[ess_de['trstplt'] == 5].index, num_replace_zero, replace=False)\n",
    "replace_indices_one = np.random.choice(ess_de[ess_de['trstplt'] == 5].index, num_replace_one, replace=False)\n",
    "\n",
    "# replace the 5 values with 0 and 1\n",
    "ess_de.loc[replace_indices_zero, 'trstplt'] = 0\n",
    "ess_de.loc[replace_indices_one, 'trstplt'] = 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<ipython-input-58-b81d4fe2c0e6>:1: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  x_data[\"trstplt\"] = ess_de[\"trstplt\"]\n"
     ]
    }
   ],
   "source": [
    "x_data[\"trstplt\"] = ess_de[\"trstplt\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>basinc</th>\n",
       "      <th>nwspol</th>\n",
       "      <th>polintr</th>\n",
       "      <th>vote</th>\n",
       "      <th>sgnptit</th>\n",
       "      <th>pstplonl</th>\n",
       "      <th>trstplt</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>39400.000000</td>\n",
       "      <td>39400.000000</td>\n",
       "      <td>39400.000000</td>\n",
       "      <td>39400.000000</td>\n",
       "      <td>39400.000000</td>\n",
       "      <td>39400.00000</td>\n",
       "      <td>39400.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>0.522919</td>\n",
       "      <td>86.037157</td>\n",
       "      <td>0.469188</td>\n",
       "      <td>0.776117</td>\n",
       "      <td>0.256929</td>\n",
       "      <td>0.17264</td>\n",
       "      <td>0.361650</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>0.499481</td>\n",
       "      <td>140.964876</td>\n",
       "      <td>0.499056</td>\n",
       "      <td>0.416850</td>\n",
       "      <td>0.436945</td>\n",
       "      <td>0.37794</td>\n",
       "      <td>0.480484</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>30.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>60.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>90.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>1428.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.00000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             basinc        nwspol       polintr          vote       sgnptit  \\\n",
       "count  39400.000000  39400.000000  39400.000000  39400.000000  39400.000000   \n",
       "mean       0.522919     86.037157      0.469188      0.776117      0.256929   \n",
       "std        0.499481    140.964876      0.499056      0.416850      0.436945   \n",
       "min        0.000000      0.000000      0.000000      0.000000      0.000000   \n",
       "25%        0.000000     30.000000      0.000000      1.000000      0.000000   \n",
       "50%        1.000000     60.000000      0.000000      1.000000      0.000000   \n",
       "75%        1.000000     90.000000      1.000000      1.000000      1.000000   \n",
       "max        1.000000   1428.000000      1.000000      1.000000      1.000000   \n",
       "\n",
       "          pstplonl       trstplt  \n",
       "count  39400.00000  39400.000000  \n",
       "mean       0.17264      0.361650  \n",
       "std        0.37794      0.480484  \n",
       "min        0.00000      0.000000  \n",
       "25%        0.00000      0.000000  \n",
       "50%        0.00000      0.000000  \n",
       "75%        0.00000      1.000000  \n",
       "max        1.00000      1.000000  "
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x_data.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "8 - trstprt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5     6850\n",
      "0     5399\n",
      "3     5202\n",
      "4     4902\n",
      "2     4388\n",
      "6     4259\n",
      "1     3047\n",
      "7     2981\n",
      "8     1233\n",
      "88     547\n",
      "9      338\n",
      "10     162\n",
      "77      81\n",
      "99      11\n",
      "Name: trstprt, dtype: int64\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "print(ess_de['trstprt'].value_counts())\n",
    "sns.countplot(x='trstprt', data=ess_de, palette='Set2')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [],
   "source": [
    "ess_de.loc[ess_de['trstprt'] == 1, 'trstprt'] = 0\n",
    "ess_de.loc[ess_de['trstprt'] == 2, 'trstprt'] = 0\n",
    "ess_de.loc[ess_de['trstprt'] == 3, 'trstprt'] = 0\n",
    "ess_de.loc[ess_de['trstprt'] == 4, 'trstprt'] = 0\n",
    "ess_de.loc[ess_de['trstprt'] == 6, 'trstprt'] = 1\n",
    "ess_de.loc[ess_de['trstprt'] == 7, 'trstprt'] = 1\n",
    "ess_de.loc[ess_de['trstprt'] == 8, 'trstprt'] = 1\n",
    "ess_de.loc[ess_de['trstprt'] == 9, 'trstprt'] = 1\n",
    "ess_de.loc[ess_de['trstprt'] == 10, 'trstprt'] = 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [],
   "source": [
    "ess_de.loc[ess_de['trstprt'] == 99, 'trstprt'] = 5\n",
    "ess_de.loc[ess_de['trstprt'] == 88, 'trstprt'] = 5\n",
    "ess_de.loc[ess_de['trstprt'] == 77, 'trstprt'] = 5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0    22938\n",
      "1     8973\n",
      "5     7489\n",
      "Name: trstprt, dtype: int64\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "print(ess_de['trstprt'].value_counts())\n",
    "sns.countplot(x='trstprt', data=ess_de, palette='Set2')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [],
   "source": [
    "# calculate the number of 5 values to replace with 0 and 1\n",
    "num_half = int(len(ess_de[ess_de['trstprt'] == 5]) / 2)\n",
    "replace_indices_0 = np.random.choice(ess_de[ess_de['trstprt'] == 5].index, num_half, replace=False)\n",
    "replace_indices_1 = np.random.choice(ess_de[ess_de['trstprt'] == 5].index, num_half, replace=False)\n",
    "\n",
    "# replace half of the 5 values with 0 and the other half with 1\n",
    "ess_de.loc[replace_indices_0, 'trstprt'] = 0\n",
    "ess_de.loc[replace_indices_1, 'trstprt'] = 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [],
   "source": [
    "ess_de.loc[ess_de['trstprt'] == 5, 'trstprt'] = 0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0    25422\n",
      "1    13978\n",
      "Name: trstprt, dtype: int64\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "print(ess_de['trstprt'].value_counts())\n",
    "sns.countplot(x='trstprt', data=ess_de, palette='Set2')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<ipython-input-78-154211be65e0>:1: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  x_data[\"trstprt\"] = ess_de[\"trstprt\"]\n"
     ]
    }
   ],
   "source": [
    "x_data[\"trstprt\"] = ess_de[\"trstprt\"]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "9 - lrscale"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5     11165\n",
      "7      3881\n",
      "6      3760\n",
      "4      3505\n",
      "3      3504\n",
      "88     3468\n",
      "8      2850\n",
      "2      1946\n",
      "77     1291\n",
      "0      1260\n",
      "10     1249\n",
      "9       804\n",
      "1       705\n",
      "99       12\n",
      "Name: lrscale, dtype: int64\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "print(ess_de['lrscale'].value_counts())\n",
    "sns.countplot(x='lrscale', data=ess_de, palette='Set2')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {},
   "outputs": [],
   "source": [
    "ess_de.loc[ess_de['lrscale'] == 1, 'lrscale'] = 0\n",
    "ess_de.loc[ess_de['lrscale'] == 2, 'lrscale'] = 0\n",
    "ess_de.loc[ess_de['lrscale'] == 3, 'lrscale'] = 0\n",
    "ess_de.loc[ess_de['lrscale'] == 4, 'lrscale'] = 0\n",
    "ess_de.loc[ess_de['lrscale'] == 6, 'lrscale'] = 1\n",
    "ess_de.loc[ess_de['lrscale'] == 7, 'lrscale'] = 1\n",
    "ess_de.loc[ess_de['lrscale'] == 8, 'lrscale'] = 1\n",
    "ess_de.loc[ess_de['lrscale'] == 9, 'lrscale'] = 1\n",
    "ess_de.loc[ess_de['lrscale'] == 10, 'lrscale'] = 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1     12544\n",
      "5     11165\n",
      "0     10920\n",
      "88     3468\n",
      "77     1291\n",
      "99       12\n",
      "Name: lrscale, dtype: int64\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "print(ess_de['lrscale'].value_counts())\n",
    "sns.countplot(x='lrscale', data=ess_de, palette='Set2')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {},
   "outputs": [],
   "source": [
    "ess_de.loc[ess_de['lrscale'] == 77, 'lrscale'] = 88\n",
    "ess_de.loc[ess_de['lrscale'] == 99, 'lrscale'] = 88"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {},
   "outputs": [],
   "source": [
    "# calculate the number of 88 values to replace with 0, 1, and 5\n",
    "num_88_values = len(ess_de[ess_de['lrscale'] == 88])\n",
    "num_replacements_0 = int(num_88_values * 0.33)\n",
    "num_replacements_1 = int(num_88_values * 0.33)\n",
    "num_replacements_5 = num_88_values - num_replacements_0 - num_replacements_1\n",
    "\n",
    "# get the indices of the 88 values to replace with 0, 1, and 5\n",
    "replace_indices_0 = np.random.choice(ess_de[ess_de['lrscale'] == 88].index, num_replacements_0, replace=False)\n",
    "remaining_indices = [index for index in ess_de[ess_de['lrscale'] == 88].index if index not in replace_indices_0]\n",
    "replace_indices_1 = np.random.choice(remaining_indices, num_replacements_1, replace=False)\n",
    "remaining_indices = [index for index in remaining_indices if index not in replace_indices_1]\n",
    "replace_indices_5 = np.random.choice(remaining_indices, num_replacements_5, replace=False)\n",
    "\n",
    "# replace the 88 values with 0, 1, and 5\n",
    "ess_de.loc[replace_indices_0, 'lrscale'] = 0\n",
    "ess_de.loc[replace_indices_1, 'lrscale'] = 1\n",
    "ess_de.loc[replace_indices_5, 'lrscale'] = 5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1    14118\n",
      "5    12788\n",
      "0    12494\n",
      "Name: lrscale, dtype: int64\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "print(ess_de['lrscale'].value_counts())\n",
    "sns.countplot(x='lrscale', data=ess_de, palette='Set2')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<ipython-input-85-b1add56d9ff2>:1: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  x_data[\"lrscale\"] = ess_de[\"lrscale\"]\n"
     ]
    }
   ],
   "source": [
    "x_data[\"lrscale\"] = ess_de[\"lrscale\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>basinc</th>\n",
       "      <th>nwspol</th>\n",
       "      <th>polintr</th>\n",
       "      <th>vote</th>\n",
       "      <th>sgnptit</th>\n",
       "      <th>pstplonl</th>\n",
       "      <th>trstplt</th>\n",
       "      <th>trstprt</th>\n",
       "      <th>lrscale</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>39400.000000</td>\n",
       "      <td>39400.000000</td>\n",
       "      <td>39400.000000</td>\n",
       "      <td>39400.000000</td>\n",
       "      <td>39400.000000</td>\n",
       "      <td>39400.00000</td>\n",
       "      <td>39400.000000</td>\n",
       "      <td>39400.000000</td>\n",
       "      <td>39400.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>0.522919</td>\n",
       "      <td>86.037157</td>\n",
       "      <td>0.469188</td>\n",
       "      <td>0.776117</td>\n",
       "      <td>0.256929</td>\n",
       "      <td>0.17264</td>\n",
       "      <td>0.361650</td>\n",
       "      <td>0.354772</td>\n",
       "      <td>1.981168</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>0.499481</td>\n",
       "      <td>140.964876</td>\n",
       "      <td>0.499056</td>\n",
       "      <td>0.416850</td>\n",
       "      <td>0.436945</td>\n",
       "      <td>0.37794</td>\n",
       "      <td>0.480484</td>\n",
       "      <td>0.478450</td>\n",
       "      <td>2.132517</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>30.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>60.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>90.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>5.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>1428.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.00000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>5.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             basinc        nwspol       polintr          vote       sgnptit  \\\n",
       "count  39400.000000  39400.000000  39400.000000  39400.000000  39400.000000   \n",
       "mean       0.522919     86.037157      0.469188      0.776117      0.256929   \n",
       "std        0.499481    140.964876      0.499056      0.416850      0.436945   \n",
       "min        0.000000      0.000000      0.000000      0.000000      0.000000   \n",
       "25%        0.000000     30.000000      0.000000      1.000000      0.000000   \n",
       "50%        1.000000     60.000000      0.000000      1.000000      0.000000   \n",
       "75%        1.000000     90.000000      1.000000      1.000000      1.000000   \n",
       "max        1.000000   1428.000000      1.000000      1.000000      1.000000   \n",
       "\n",
       "          pstplonl       trstplt       trstprt       lrscale  \n",
       "count  39400.00000  39400.000000  39400.000000  39400.000000  \n",
       "mean       0.17264      0.361650      0.354772      1.981168  \n",
       "std        0.37794      0.480484      0.478450      2.132517  \n",
       "min        0.00000      0.000000      0.000000      0.000000  \n",
       "25%        0.00000      0.000000      0.000000      0.000000  \n",
       "50%        0.00000      0.000000      0.000000      1.000000  \n",
       "75%        0.00000      1.000000      1.000000      5.000000  \n",
       "max        1.00000      1.000000      1.000000      5.000000  "
      ]
     },
     "execution_count": 86,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x_data.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "10 - stfgov"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5     6842\n",
      "6     5420\n",
      "4     4796\n",
      "3     4695\n",
      "7     4626\n",
      "2     3467\n",
      "0     3188\n",
      "8     2480\n",
      "1     1840\n",
      "88     844\n",
      "9      660\n",
      "10     407\n",
      "77     131\n",
      "99       4\n",
      "Name: stfgov, dtype: int64\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "print(ess_de['stfgov'].value_counts())\n",
    "sns.countplot(x='stfgov', data=ess_de, palette='Set2')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "metadata": {},
   "outputs": [],
   "source": [
    "ess_de.loc[ess_de['stfgov'] == 1, 'stfgov'] = 0\n",
    "ess_de.loc[ess_de['stfgov'] == 2, 'stfgov'] = 0\n",
    "ess_de.loc[ess_de['stfgov'] == 3, 'stfgov'] = 0\n",
    "ess_de.loc[ess_de['stfgov'] == 4, 'stfgov'] = 0\n",
    "ess_de.loc[ess_de['stfgov'] == 6, 'stfgov'] = 1\n",
    "ess_de.loc[ess_de['stfgov'] == 7, 'stfgov'] = 1\n",
    "ess_de.loc[ess_de['stfgov'] == 8, 'stfgov'] = 1\n",
    "ess_de.loc[ess_de['stfgov'] == 9, 'stfgov'] = 1\n",
    "ess_de.loc[ess_de['stfgov'] == 10, 'stfgov'] = 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0    21896\n",
      "1    17504\n",
      "Name: stfgov, dtype: int64\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "print(ess_de['stfgov'].value_counts())\n",
    "sns.countplot(x='stfgov', data=ess_de, palette='Set2')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "metadata": {},
   "outputs": [],
   "source": [
    "ess_de.loc[ess_de['stfgov'] == 77, 'stfgov'] = 5\n",
    "ess_de.loc[ess_de['stfgov'] == 88, 'stfgov'] = 5\n",
    "ess_de.loc[ess_de['stfgov'] == 99, 'stfgov'] = 5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "metadata": {},
   "outputs": [],
   "source": [
    "# count the number of 5 values in the column\n",
    "num_fives = (ess_de['stfgov'] == 5).sum()\n",
    "\n",
    "# calculate the number of 5 values to replace with 0\n",
    "num_zeros = int(num_fives * 0.5)\n",
    "\n",
    "# calculate the number of 5 values to replace with 1\n",
    "num_ones = num_fives - num_zeros\n",
    "\n",
    "# get the indices of the 5 values to replace with 0\n",
    "zero_indices = np.random.choice(ess_de[ess_de['stfgov'] == 5].index, num_zeros, replace=False)\n",
    "\n",
    "# get the indices of the remaining 5 values to replace with 1\n",
    "ones_indices = np.setdiff1d(ess_de[ess_de['stfgov'] == 5].index, zero_indices)\n",
    "\n",
    "# replace the 5 values with 0 and 1\n",
    "ess_de.loc[zero_indices, 'stfgov'] = 0\n",
    "ess_de.loc[ones_indices, 'stfgov'] = 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<ipython-input-94-be4fb2189b7a>:1: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  x_data[\"stfgov\"] = ess_de[\"stfgov\"]\n"
     ]
    }
   ],
   "source": [
    "x_data[\"stfgov\"] = ess_de[\"stfgov\"]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "11 - stfdem"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5     6383\n",
      "7     6081\n",
      "8     5170\n",
      "6     5115\n",
      "4     3784\n",
      "3     3408\n",
      "2     2380\n",
      "0     1948\n",
      "9     1882\n",
      "1     1176\n",
      "88    1014\n",
      "10     954\n",
      "77      99\n",
      "99       6\n",
      "Name: stfdem, dtype: int64\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "print(ess_de['stfdem'].value_counts())\n",
    "sns.countplot(x='stfdem', data=ess_de, palette='Set2')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "metadata": {},
   "outputs": [],
   "source": [
    "ess_de.loc[ess_de['stfdem'] == 1, 'stfdem'] = 0\n",
    "ess_de.loc[ess_de['stfdem'] == 2, 'stfdem'] = 0\n",
    "ess_de.loc[ess_de['stfdem'] == 3, 'stfdem'] = 0\n",
    "ess_de.loc[ess_de['stfdem'] == 4, 'stfdem'] = 0\n",
    "ess_de.loc[ess_de['stfdem'] == 6, 'stfdem'] = 1\n",
    "ess_de.loc[ess_de['stfdem'] == 7, 'stfdem'] = 1\n",
    "ess_de.loc[ess_de['stfdem'] == 8, 'stfdem'] = 1\n",
    "ess_de.loc[ess_de['stfdem'] == 9, 'stfdem'] = 1\n",
    "ess_de.loc[ess_de['stfdem'] == 10, 'stfdem'] = 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "metadata": {},
   "outputs": [],
   "source": [
    "ess_de.loc[ess_de['stfdem'] == 77, 'stfdem'] = 5\n",
    "ess_de.loc[ess_de['stfdem'] == 88, 'stfdem'] = 5\n",
    "ess_de.loc[ess_de['stfdem'] == 99, 'stfdem'] = 5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1    22953\n",
      "0    16447\n",
      "Name: stfdem, dtype: int64\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "print(ess_de['stfdem'].value_counts())\n",
    "sns.countplot(x='stfdem', data=ess_de, palette='Set2')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "metadata": {},
   "outputs": [],
   "source": [
    "# count the number of 5 values in the column\n",
    "num_fives = (ess_de['stfdem'] == 5).sum()\n",
    "\n",
    "# calculate the number of 5 values to replace with 0\n",
    "num_zeros = int(num_fives * 0.5)\n",
    "\n",
    "# calculate the number of 5 values to replace with 1\n",
    "num_ones = num_fives - num_zeros\n",
    "\n",
    "# get the indices of the 5 values to replace with 0\n",
    "zero_indices = np.random.choice(ess_de[ess_de['stfdem'] == 5].index, num_zeros, replace=False)\n",
    "\n",
    "# get the indices of the remaining 5 values to replace with 1\n",
    "ones_indices = np.setdiff1d(ess_de[ess_de['stfdem'] == 5].index, zero_indices)\n",
    "\n",
    "# replace the 5 values with 0 and 1\n",
    "ess_de.loc[zero_indices, 'stfdem'] = 0\n",
    "ess_de.loc[ones_indices, 'stfdem'] = 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<ipython-input-101-efa4d731ceb6>:1: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  x_data[\"stfdem\"] = ess_de[\"stfdem\"]\n"
     ]
    }
   ],
   "source": [
    "x_data[\"stfdem\"] = ess_de[\"stfdem\"]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "12 - gincdif"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2    17723\n",
      "1    10537\n",
      "3     5907\n",
      "4     3798\n",
      "5      870\n",
      "8      511\n",
      "7       51\n",
      "9        3\n",
      "Name: gincdif, dtype: int64\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "print(ess_de['gincdif'].value_counts())\n",
    "sns.countplot(x='gincdif', data=ess_de, palette='Set2')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "metadata": {},
   "outputs": [],
   "source": [
    "ess_de.loc[ess_de['gincdif'] == 2, 'gincdif'] = 1\n",
    "ess_de.loc[ess_de['gincdif'] == 4, 'gincdif'] = 0\n",
    "ess_de.loc[ess_de['gincdif'] == 5, 'gincdif'] = 0\n",
    "ess_de.loc[ess_de['gincdif'] == 7, 'gincdif'] = 3\n",
    "ess_de.loc[ess_de['gincdif'] == 8, 'gincdif'] = 3\n",
    "ess_de.loc[ess_de['gincdif'] == 9, 'gincdif'] = 3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1.0    31496\n",
      "0.0     7904\n",
      "Name: gincdif, dtype: int64\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "print(ess_de['gincdif'].value_counts())\n",
    "sns.countplot(x='gincdif', data=ess_de, palette='Set2')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "metadata": {},
   "outputs": [],
   "source": [
    "# count number of 3's in the column\n",
    "num_threes = (ess_de['gincdif'] == 3).sum()\n",
    "\n",
    "# create array of new values for the column\n",
    "new_vals = np.concatenate((np.zeros(num_threes // 2), np.ones(num_threes // 2), np.full(num_threes - (num_threes // 2) * 2, 3)))\n",
    "\n",
    "# shuffle the array of new values\n",
    "np.random.shuffle(new_vals)\n",
    "\n",
    "# replace 3's with the new values\n",
    "ess_de.loc[ess_de['gincdif'] == 3, 'gincdif'] = new_vals"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<ipython-input-107-9bf5d9fc2066>:1: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  x_data[\"gincdif\"] = ess_de[\"gincdif\"]\n"
     ]
    }
   ],
   "source": [
    "x_data[\"gincdif\"] = ess_de[\"gincdif\"]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "13 - gvslvue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "7     6895\n",
      "5     6377\n",
      "8     6226\n",
      "10    5642\n",
      "6     5599\n",
      "9     2737\n",
      "4     2442\n",
      "3     1649\n",
      "2      774\n",
      "0      391\n",
      "88     389\n",
      "1      227\n",
      "77      47\n",
      "99       5\n",
      "Name: gvslvue, dtype: int64\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "print(ess_de['gvslvue'].value_counts())\n",
    "sns.countplot(x='gvslvue', data=ess_de, palette='Set2')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "metadata": {},
   "outputs": [],
   "source": [
    "ess_de.loc[ess_de['gvslvue'] == 1, 'gvslvue'] = 0\n",
    "ess_de.loc[ess_de['gvslvue'] == 2, 'gvslvue'] = 0\n",
    "ess_de.loc[ess_de['gvslvue'] == 3, 'gvslvue'] = 0\n",
    "ess_de.loc[ess_de['gvslvue'] == 4, 'gvslvue'] = 0\n",
    "ess_de.loc[ess_de['gvslvue'] == 6, 'gvslvue'] = 1\n",
    "ess_de.loc[ess_de['gvslvue'] == 7, 'gvslvue'] = 1\n",
    "ess_de.loc[ess_de['gvslvue'] == 8, 'gvslvue'] = 1\n",
    "ess_de.loc[ess_de['gvslvue'] == 9, 'gvslvue'] = 1\n",
    "ess_de.loc[ess_de['gvslvue'] == 10, 'gvslvue'] = 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "metadata": {},
   "outputs": [],
   "source": [
    "ess_de.loc[ess_de['gvslvue'] == 77, 'gvslvue'] = 5\n",
    "ess_de.loc[ess_de['gvslvue'] == 88, 'gvslvue'] = 5\n",
    "ess_de.loc[ess_de['gvslvue'] == 99, 'gvslvue'] = 5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1    30508\n",
      "0     8892\n",
      "Name: gvslvue, dtype: int64\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "print(ess_de['gvslvue'].value_counts())\n",
    "sns.countplot(x='gvslvue', data=ess_de, palette='Set2')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "metadata": {},
   "outputs": [],
   "source": [
    "import random\n",
    "\n",
    "# Count the number of 5s in the column\n",
    "num_fives = ess_de['gvslvue'].value_counts()[5]\n",
    "\n",
    "# Calculate the number of 5s to be replaced with 0 and 1\n",
    "num_zeros = num_fives // 2\n",
    "num_ones = num_fives - num_zeros\n",
    "\n",
    "# Get the indices of the 5s in the column\n",
    "five_indices = ess_de.index[ess_de['gvslvue'] == 5].tolist()\n",
    "\n",
    "# Shuffle the indices randomly\n",
    "random.shuffle(five_indices)\n",
    "\n",
    "# Replace half of the 5s with 0 and the other half with 1\n",
    "for i in range(num_zeros):\n",
    "    ess_de.at[five_indices[i], 'gvslvue'] = 0\n",
    "for i in range(num_zeros, num_zeros+num_ones):\n",
    "    ess_de.at[five_indices[i], 'gvslvue'] = 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<ipython-input-114-67d4304dfc57>:1: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  x_data [\"gvslvue\"] = ess_de[\"gvslvue\"]\n"
     ]
    }
   ],
   "source": [
    "x_data [\"gvslvue\"] = ess_de[\"gvslvue\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    AT\n",
       "1    AT\n",
       "2    AT\n",
       "3    AT\n",
       "4    AT\n",
       "Name: cntry, dtype: object"
      ]
     },
     "execution_count": 115,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ess_de[\"cntry\"].head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>basinc</th>\n",
       "      <th>nwspol</th>\n",
       "      <th>polintr</th>\n",
       "      <th>vote</th>\n",
       "      <th>sgnptit</th>\n",
       "      <th>pstplonl</th>\n",
       "      <th>trstplt</th>\n",
       "      <th>trstprt</th>\n",
       "      <th>lrscale</th>\n",
       "      <th>stfgov</th>\n",
       "      <th>stfdem</th>\n",
       "      <th>gincdif</th>\n",
       "      <th>gvslvue</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>120</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>120</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>30</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>30</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>30</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   basinc  nwspol  polintr  vote  sgnptit  pstplonl  trstplt  trstprt  \\\n",
       "0       1     120        1     1        1         1        0        1   \n",
       "1       1     120        1     1        0         1        0        0   \n",
       "2       0      30        0     1        0         0        0        0   \n",
       "3       1      30        1     0        0         0        0        0   \n",
       "4       1      30        0     0        0         0        1        1   \n",
       "\n",
       "   lrscale  stfgov  stfdem  gincdif  gvslvue  \n",
       "0        0       0       1      1.0        1  \n",
       "1        0       0       0      1.0        0  \n",
       "2        5       0       1      0.0        1  \n",
       "3        0       1       1      1.0        1  \n",
       "4        5       0       1      1.0        1  "
      ]
     },
     "execution_count": 117,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x_data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 118,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<ipython-input-118-acd8e3f4a734>:1: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  x_data[\"cntry\"] = ess_de[\"cntry\"]\n"
     ]
    }
   ],
   "source": [
    "x_data[\"cntry\"] = ess_de[\"cntry\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 124,
   "metadata": {},
   "outputs": [],
   "source": [
    "#x_data.to_csv('pol_var_ALL.csv', index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_pol = x_data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 120,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>basinc</th>\n",
       "      <th>nwspol</th>\n",
       "      <th>polintr</th>\n",
       "      <th>vote</th>\n",
       "      <th>sgnptit</th>\n",
       "      <th>pstplonl</th>\n",
       "      <th>trstplt</th>\n",
       "      <th>trstprt</th>\n",
       "      <th>lrscale</th>\n",
       "      <th>stfgov</th>\n",
       "      <th>stfdem</th>\n",
       "      <th>gincdif</th>\n",
       "      <th>gvslvue</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>39400.000000</td>\n",
       "      <td>39400.000000</td>\n",
       "      <td>39400.000000</td>\n",
       "      <td>39400.000000</td>\n",
       "      <td>39400.000000</td>\n",
       "      <td>39400.00000</td>\n",
       "      <td>39400.000000</td>\n",
       "      <td>39400.000000</td>\n",
       "      <td>39400.000000</td>\n",
       "      <td>39400.000000</td>\n",
       "      <td>39400.000000</td>\n",
       "      <td>39400.000000</td>\n",
       "      <td>39400.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>0.522919</td>\n",
       "      <td>86.037157</td>\n",
       "      <td>0.469188</td>\n",
       "      <td>0.776117</td>\n",
       "      <td>0.256929</td>\n",
       "      <td>0.17264</td>\n",
       "      <td>0.361650</td>\n",
       "      <td>0.354772</td>\n",
       "      <td>1.981168</td>\n",
       "      <td>0.444264</td>\n",
       "      <td>0.582563</td>\n",
       "      <td>0.799391</td>\n",
       "      <td>0.774315</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>0.499481</td>\n",
       "      <td>140.964876</td>\n",
       "      <td>0.499056</td>\n",
       "      <td>0.416850</td>\n",
       "      <td>0.436945</td>\n",
       "      <td>0.37794</td>\n",
       "      <td>0.480484</td>\n",
       "      <td>0.478450</td>\n",
       "      <td>2.132517</td>\n",
       "      <td>0.496890</td>\n",
       "      <td>0.493142</td>\n",
       "      <td>0.400461</td>\n",
       "      <td>0.418038</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>30.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>60.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>90.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>1428.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.00000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             basinc        nwspol       polintr          vote       sgnptit  \\\n",
       "count  39400.000000  39400.000000  39400.000000  39400.000000  39400.000000   \n",
       "mean       0.522919     86.037157      0.469188      0.776117      0.256929   \n",
       "std        0.499481    140.964876      0.499056      0.416850      0.436945   \n",
       "min        0.000000      0.000000      0.000000      0.000000      0.000000   \n",
       "25%        0.000000     30.000000      0.000000      1.000000      0.000000   \n",
       "50%        1.000000     60.000000      0.000000      1.000000      0.000000   \n",
       "75%        1.000000     90.000000      1.000000      1.000000      1.000000   \n",
       "max        1.000000   1428.000000      1.000000      1.000000      1.000000   \n",
       "\n",
       "          pstplonl       trstplt       trstprt       lrscale        stfgov  \\\n",
       "count  39400.00000  39400.000000  39400.000000  39400.000000  39400.000000   \n",
       "mean       0.17264      0.361650      0.354772      1.981168      0.444264   \n",
       "std        0.37794      0.480484      0.478450      2.132517      0.496890   \n",
       "min        0.00000      0.000000      0.000000      0.000000      0.000000   \n",
       "25%        0.00000      0.000000      0.000000      0.000000      0.000000   \n",
       "50%        0.00000      0.000000      0.000000      1.000000      0.000000   \n",
       "75%        0.00000      1.000000      1.000000      5.000000      1.000000   \n",
       "max        1.00000      1.000000      1.000000      5.000000      1.000000   \n",
       "\n",
       "             stfdem       gincdif       gvslvue  \n",
       "count  39400.000000  39400.000000  39400.000000  \n",
       "mean       0.582563      0.799391      0.774315  \n",
       "std        0.493142      0.400461      0.418038  \n",
       "min        0.000000      0.000000      0.000000  \n",
       "25%        0.000000      1.000000      1.000000  \n",
       "50%        1.000000      1.000000      1.000000  \n",
       "75%        1.000000      1.000000      1.000000  \n",
       "max        1.000000      1.000000      1.000000  "
      ]
     },
     "execution_count": 120,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_pol.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 122,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count     39400\n",
       "unique       21\n",
       "top          DE\n",
       "freq       2852\n",
       "Name: cntry, dtype: object"
      ]
     },
     "execution_count": 122,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_pol[\"cntry\"].describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 121,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>basinc</th>\n",
       "      <th>nwspol</th>\n",
       "      <th>polintr</th>\n",
       "      <th>vote</th>\n",
       "      <th>sgnptit</th>\n",
       "      <th>pstplonl</th>\n",
       "      <th>trstplt</th>\n",
       "      <th>trstprt</th>\n",
       "      <th>lrscale</th>\n",
       "      <th>stfgov</th>\n",
       "      <th>stfdem</th>\n",
       "      <th>gincdif</th>\n",
       "      <th>gvslvue</th>\n",
       "      <th>cntry</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>120</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>AT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>120</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>AT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>30</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>AT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>30</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>AT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>30</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>AT</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   basinc  nwspol  polintr  vote  sgnptit  pstplonl  trstplt  trstprt  \\\n",
       "0       1     120        1     1        1         1        0        1   \n",
       "1       1     120        1     1        0         1        0        0   \n",
       "2       0      30        0     1        0         0        0        0   \n",
       "3       1      30        1     0        0         0        0        0   \n",
       "4       1      30        0     0        0         0        1        1   \n",
       "\n",
       "   lrscale  stfgov  stfdem  gincdif  gvslvue cntry  \n",
       "0        0       0       1      1.0        1    AT  \n",
       "1        0       0       0      1.0        0    AT  \n",
       "2        5       0       1      0.0        1    AT  \n",
       "3        0       1       1      1.0        1    AT  \n",
       "4        5       0       1      1.0        1    AT  "
      ]
     },
     "execution_count": 121,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_pol.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "PRE-PROCESSING ctd."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "1 - ppltrst"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 123,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5     7591\n",
      "7     7051\n",
      "8     5119\n",
      "6     5113\n",
      "4     3660\n",
      "3     3591\n",
      "2     2216\n",
      "0     1843\n",
      "9     1255\n",
      "1     1124\n",
      "10     764\n",
      "88      58\n",
      "77       8\n",
      "99       7\n",
      "Name: ppltrst, dtype: int64\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "print(ess_de['ppltrst'].value_counts())\n",
    "sns.countplot(x='ppltrst', data=ess_de, palette='Set2')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 124,
   "metadata": {},
   "outputs": [],
   "source": [
    "ess_de['ppltrst'] = ess_de['ppltrst'].replace([99,88, 77], 5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 125,
   "metadata": {},
   "outputs": [],
   "source": [
    "ess_de['ppltrst'] = ess_de['ppltrst'].replace([1, 2, 3, 4], 0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 126,
   "metadata": {},
   "outputs": [],
   "source": [
    "ess_de['ppltrst'] = ess_de['ppltrst'].replace([6, 7, 8, 9, 10], 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 139,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1    24396\n",
      "0    15004\n",
      "Name: ppltrst, dtype: int64\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "print(ess_de['ppltrst'].value_counts())\n",
    "sns.countplot(x='ppltrst', data=ess_de, palette='Set2')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 138,
   "metadata": {},
   "outputs": [],
   "source": [
    "num_fives = (ess_de['ppltrst'] == 5).sum()\n",
    "\n",
    "# calculate the number of 5 values to replace with 0 and 1\n",
    "num_replace_zero = num_fives // 2\n",
    "num_replace_one = num_fives - num_replace_zero\n",
    "\n",
    "# get the indices of the 5 values to replace\n",
    "replace_indices_zero = np.random.choice(ess_de[ess_de['ppltrst'] == 5].index, num_replace_zero, replace=False)\n",
    "replace_indices_one = np.random.choice(ess_de[ess_de['ppltrst'] == 5].index, num_replace_one, replace=False)\n",
    "\n",
    "# replace the 5 values with 0 and 1\n",
    "ess_de.loc[replace_indices_zero, 'ppltrst'] = 0\n",
    "ess_de.loc[replace_indices_one, 'ppltrst'] = 1\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "2 - pplhlp"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 140,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5     7901\n",
      "7     6496\n",
      "6     5713\n",
      "8     4230\n",
      "4     4204\n",
      "3     4096\n",
      "2     2499\n",
      "0     1288\n",
      "9     1121\n",
      "1     1061\n",
      "10     656\n",
      "88     101\n",
      "99      25\n",
      "77       9\n",
      "Name: pplhlp, dtype: int64\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "print(ess_de['pplhlp'].value_counts())\n",
    "sns.countplot(x='pplhlp', data=ess_de, palette='Set2')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 141,
   "metadata": {},
   "outputs": [],
   "source": [
    "ess_de['pplhlp'] = ess_de['pplhlp'].replace([1, 2, 3, 4], 0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 142,
   "metadata": {},
   "outputs": [],
   "source": [
    "ess_de['pplhlp'] = ess_de['pplhlp'].replace([6, 7, 8, 9, 10], 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 143,
   "metadata": {},
   "outputs": [],
   "source": [
    "ess_de['pplhlp'] = ess_de['pplhlp'].replace([77,88,99], 5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 156,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1    23580\n",
      "0    15820\n",
      "Name: pplhlp, dtype: int64\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "print(ess_de['pplhlp'].value_counts())\n",
    "sns.countplot(x='pplhlp', data=ess_de, palette='Set2')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 155,
   "metadata": {},
   "outputs": [],
   "source": [
    "num_fives = (ess_de['pplhlp'] == 5).sum()\n",
    "\n",
    "# calculate the number of 5 values to replace with 0 and 1\n",
    "num_replace_zero = num_fives // 2\n",
    "num_replace_one = num_fives - num_replace_zero\n",
    "\n",
    "# get the indices of the 5 values to replace\n",
    "replace_indices_zero = np.random.choice(ess_de[ess_de['pplhlp'] == 5].index, num_replace_zero, replace=False)\n",
    "replace_indices_one = np.random.choice(ess_de[ess_de['pplhlp'] == 5].index, num_replace_one, replace=False)\n",
    "\n",
    "# replace the 5 values with 0 and 1\n",
    "ess_de.loc[replace_indices_zero, 'pplhlp'] = 0\n",
    "ess_de.loc[replace_indices_one, 'pplhlp'] = 1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "3 - pplfair"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 157,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "7     7813\n",
      "5     7569\n",
      "8     6491\n",
      "6     5318\n",
      "4     3252\n",
      "3     2708\n",
      "9     2019\n",
      "2     1490\n",
      "10    1007\n",
      "0      893\n",
      "1      607\n",
      "88     211\n",
      "77      12\n",
      "99      10\n",
      "Name: pplfair, dtype: int64\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "print(ess_de['pplfair'].value_counts())\n",
    "sns.countplot(x='pplfair', data=ess_de, palette='Set2')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 158,
   "metadata": {},
   "outputs": [],
   "source": [
    "ess_de['pplfair'] = ess_de['pplfair'].replace([1, 2, 3, 4], 0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 159,
   "metadata": {},
   "outputs": [],
   "source": [
    "ess_de['pplfair'] = ess_de['pplfair'].replace([6, 7, 8, 9, 10], 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 160,
   "metadata": {},
   "outputs": [],
   "source": [
    "ess_de['pplfair'] = ess_de['pplfair'].replace([77,88,99], 5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 161,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1    22648\n",
      "0     8950\n",
      "5     7802\n",
      "Name: pplfair, dtype: int64\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "print(ess_de['pplfair'].value_counts())\n",
    "sns.countplot(x='pplfair', data=ess_de, palette='Set2')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 162,
   "metadata": {},
   "outputs": [],
   "source": [
    "num_fives = (ess_de['pplfair'] == 5).sum()\n",
    "\n",
    "# calculate the number of 5 values to replace with 0 and 1\n",
    "num_replace_zero = num_fives // 2\n",
    "num_replace_one = num_fives - num_replace_zero\n",
    "\n",
    "# get the indices of the 5 values to replace\n",
    "replace_indices_zero = np.random.choice(ess_de[ess_de['pplfair'] == 5].index, num_replace_zero, replace=False)\n",
    "replace_indices_one = np.random.choice(ess_de[ess_de['pplfair'] == 5].index, num_replace_one, replace=False)\n",
    "\n",
    "# replace the 5 values with 0 and 1\n",
    "ess_de.loc[replace_indices_zero, 'pplfair'] = 0\n",
    "ess_de.loc[replace_indices_one, 'pplfair'] = 1\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "4 - stflife"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 163,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "8     10447\n",
      "7      7265\n",
      "9      6174\n",
      "10     4154\n",
      "5      3702\n",
      "6      3643\n",
      "4      1463\n",
      "3      1180\n",
      "2       594\n",
      "0       370\n",
      "1       251\n",
      "88       87\n",
      "77       62\n",
      "99        8\n",
      "Name: stflife, dtype: int64\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "print(ess_de['stflife'].value_counts())\n",
    "sns.countplot(x='stflife', data=ess_de, palette='Set2')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 164,
   "metadata": {},
   "outputs": [],
   "source": [
    "ess_de['stflife'] = ess_de['stflife'].replace([1,2,3,4], 0)\n",
    "ess_de['stflife'] = ess_de['stflife'].replace([6,7,8,9,10], 1)\n",
    "ess_de['stflife'] = ess_de['stflife'].replace([77,88,99], 5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 177,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1    34270\n",
      "0     5130\n",
      "Name: stflife, dtype: int64\n"
     ]
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAZIAAAEGCAYAAABPdROvAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjMuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8vihELAAAACXBIWXMAAAsTAAALEwEAmpwYAAAVcElEQVR4nO3df6xf9X3f8ecLmxAnDZQfF+bYZEbB3WrYYsqV5y2rlMTRcCOtJh10F63F6yw5omRq1GgTVNWabLIW2iSstAXNGRSbdQGPNMPL4q0M6NJuxO6lc2MMobktLDj2sBModTbh1c57f3w/t/368vXl2sffe33x8yEdfc95n/M538+RLF58zud8z01VIUnSqTpnrjsgSZrfDBJJUicGiSSpE4NEktSJQSJJ6mThXHdgtl1yySW1bNmyue6GJM0rTz311LeramTQvrMuSJYtW8b4+Phcd0OS5pUk/+tE+7y1JUnqZGhBkuStSXYl+YMke5N8stU/keRbSXa35UN9bW5PMpHkuSTX9dWvTbKn7bsrSVr9vCQPtfrOJMuGdT2SpMGGOSI5Anygqt4DrATWJlnd9t1ZVSvb8mWAJCuAMeAqYC1wd5IF7fh7gI3A8rasbfUNwCtVdSVwJ3DHEK9HkjTA0IKker7bNs9ty3TvY1kHPFhVR6rqeWACWJVkMXB+VT1Zvfe5bAWu72uzpa0/DKyZHK1IkmbHUOdIkixIshs4CDxaVTvbro8m+VqS+5Jc2GpLgBf7mu9rtSVtfWr9uDZVdRR4Fbh4QD82JhlPMn7o0KHTc3GSJGDIQVJVx6pqJbCU3ujianq3qd5N73bXAeAz7fBBI4mapj5dm6n92FxVo1U1OjIy8Ok1SdIpmpWntqrqT4DfBtZW1UstYL4HfA5Y1Q7bB1ze12wpsL/Vlw6oH9cmyULgAuDl4VyFJGmQYT61NZLk+9v6IuCDwNfbnMekDwNPt/XtwFh7EusKepPqu6rqAHA4yeo2/3Ez8Ehfm/Vt/Qbg8fK9+JI0q4b5g8TFwJb25NU5wLaq+lKSB5KspHcL6gXgIwBVtTfJNuAZ4Chwa1Uda+e6BbgfWATsaAvAvcADSSbojUTGhng9kqQBcrb9D/zo6Gj5y3a9WR2855/OdRd0Brr0ll/sfI4kT1XV6KB9/rJdktSJQSJJ6sQgkSR1YpBIkjoxSCRJnRgkkqRODBJJUicGiSSpE4NEktSJQSJJ6sQgkSR1YpBIkjoxSCRJnRgkkqRODBJJUicGiSSpE4NEktSJQSJJ6sQgkSR1YpBIkjoxSCRJnQwtSJK8NcmuJH+QZG+ST7b6RUkeTfKN9nlhX5vbk0wkeS7JdX31a5PsafvuSpJWPy/JQ62+M8myYV2PJGmwYY5IjgAfqKr3ACuBtUlWA7cBj1XVcuCxtk2SFcAYcBWwFrg7yYJ2rnuAjcDytqxt9Q3AK1V1JXAncMcQr0eSNMDQgqR6vts2z21LAeuALa2+Bbi+ra8DHqyqI1X1PDABrEqyGDi/qp6sqgK2Tmkzea6HgTWToxVJ0uwY6hxJkgVJdgMHgUeraidwWVUdAGifl7bDlwAv9jXf12pL2vrU+nFtquoo8Cpw8VAuRpI00FCDpKqOVdVKYCm90cXV0xw+aCRR09Sna3P8iZONScaTjB86dOgNei1JOhmz8tRWVf0J8Nv05jZeareraJ8H22H7gMv7mi0F9rf60gH149okWQhcALw84Ps3V9VoVY2OjIycnouSJAHDfWprJMn3t/VFwAeBrwPbgfXtsPXAI219OzDWnsS6gt6k+q52++twktVt/uPmKW0mz3UD8HibR5EkzZKFQzz3YmBLe/LqHGBbVX0pyZPAtiQbgG8CNwJU1d4k24BngKPArVV1rJ3rFuB+YBGwoy0A9wIPJJmgNxIZG+L1SJIGGFqQVNXXgGsG1L8DrDlBm03ApgH1ceB18ytV9RotiCRJc8NftkuSOjFIJEmdGCSSpE4MEklSJwaJJKkTg0SS1IlBIknqxCCRJHVikEiSOjFIJEmdGCSSpE4MEklSJwaJJKkTg0SS1IlBIknqxCCRJHVikEiSOjFIJEmdGCSSpE4MEklSJwaJJKkTg0SS1MnQgiTJ5UmeSPJskr1JfqbVP5HkW0l2t+VDfW1uTzKR5Lkk1/XVr02yp+27K0la/bwkD7X6ziTLhnU9kqTBhjkiOQp8vKp+EFgN3JpkRdt3Z1WtbMuXAdq+MeAqYC1wd5IF7fh7gI3A8rasbfUNwCtVdSVwJ3DHEK9HkjTA0IKkqg5U1e+39cPAs8CSaZqsAx6sqiNV9TwwAaxKshg4v6qerKoCtgLX97XZ0tYfBtZMjlYkSbNjVuZI2i2na4CdrfTRJF9Lcl+SC1ttCfBiX7N9rbakrU+tH9emqo4CrwIXD/j+jUnGk4wfOnTo9FyUJAmYhSBJ8n3AF4CPVdWf0rtN9W5gJXAA+MzkoQOa1zT16docX6jaXFWjVTU6MjJychcgSZrWUIMkybn0QuQ3quo3Aarqpao6VlXfAz4HrGqH7wMu72u+FNjf6ksH1I9rk2QhcAHw8nCuRpI0yDCf2gpwL/BsVX22r76477APA0+39e3AWHsS6wp6k+q7quoAcDjJ6nbOm4FH+tqsb+s3AI+3eRRJ0ixZOMRzvxf4SWBPkt2t9nPATUlW0rsF9QLwEYCq2ptkG/AMvSe+bq2qY63dLcD9wCJgR1ugF1QPJJmgNxIZG+L1SJIGGFqQVNXvMngO48vTtNkEbBpQHweuHlB/DbixQzclSR35y3ZJUicGiSSpE4NEktSJQSJJ6sQgkSR1YpBIkjoxSCRJnRgkkqRODBJJUicGiSSpE4NEktSJQSJJ6sQgkSR1YpBIkjoxSCRJnRgkkqRODBJJUicGiSSpE4NEktSJQSJJ6sQgkSR1MrQgSXJ5kieSPJtkb5KfafWLkjya5Bvt88K+NrcnmUjyXJLr+urXJtnT9t2VJK1+XpKHWn1nkmXDuh5J0mDDHJEcBT5eVT8IrAZuTbICuA14rKqWA4+1bdq+MeAqYC1wd5IF7Vz3ABuB5W1Z2+obgFeq6krgTuCOIV6PJGmAoQVJVR2oqt9v64eBZ4ElwDpgSztsC3B9W18HPFhVR6rqeWACWJVkMXB+VT1ZVQVsndJm8lwPA2smRyuSpNkxK3Mk7ZbTNcBO4LKqOgC9sAEubYctAV7sa7av1Za09an149pU1VHgVeDiAd+/Mcl4kvFDhw6dpquSJMEMgyTJYzOpnaDt9wFfAD5WVX863aEDajVNfbo2xxeqNlfVaFWNjoyMvFGXJUknYeF0O5O8FXgbcEmbFJ/8D/f5wDvf6ORJzqUXIr9RVb/Zyi8lWVxVB9ptq4Otvg+4vK/5UmB/qy8dUO9vsy/JQuAC4OU36pck6fR5oxHJR4CngL/aPieXR4Bfm65hm6u4F3i2qj7bt2s7sL6tr2/nmqyPtSexrqA3qb6r3f46nGR1O+fNU9pMnusG4PE2jyJJmiXTjkiq6peBX07yj6vqV07y3O8FfhLYk2R3q/0c8ClgW5INwDeBG9t37U2yDXiG3hNft1bVsdbuFuB+YBGwoy3QC6oHkkzQG4mMnWQfJUkdTRskk6rqV5L8LWBZf5uq2jpNm99l8BwGwJoTtNkEbBpQHweuHlB/jRZEkqS5MaMgSfIA8G5gNzA5Sph8FFeSdBabUZAAo8AK5x8kSVPN9HckTwN/aZgdkSTNTzMdkVwCPJNkF3BkslhVPzqUXkmS5o2ZBsknhtkJSdL8NdOntv7bsDsiSZqfZvrU1mH+4tUjbwHOBf5PVZ0/rI5JkuaHmY5I3tG/neR6YNUwOiRJml9O6e2/VfUfgA+c3q5Ikuajmd7a+rG+zXPo/a7E35RIkmb81Nbf7Vs/CrxA749KSZLOcjOdI/mpYXdEkjQ/zfQPWy1N8sUkB5O8lOQLSZa+cUtJ0pvdTCfbf53e3/54J70/b/sfW02SdJabaZCMVNWvV9XRttwP+DdrJUkzDpJvJ/mJJAva8hPAd4bZMUnS/DDTIPlHwI8D/xs4QO/P2joBL0ma8eO//wJYX1WvACS5CPg0vYCRJJ3FZjoi+euTIQJQVS8D1wynS5Kk+WSmQXJOkgsnN9qIZKajGUnSm9hMw+AzwP9I8jC9V6P8OLBpaL2SJM0bMxqRVNVW4O8BLwGHgB+rqgema5PkvvYDxqf7ap9I8q0ku9vyob59tyeZSPJckuv66tcm2dP23ZUkrX5ekodafWeSZSd15ZKk02LGt6eq6hngmZM49/3ArwJbp9TvrKpP9xeSrADGgKvo/ejxvyb5gao6BtwDbAS+CnwZWAvsADYAr1TVlUnGgDuAv38S/ZMknQan9Br5maiqrwAvz/DwdcCDVXWkqp4HJoBVSRYD51fVk1VV9ELp+r42W9r6w8CaydGKJGn2DC1IpvHRJF9rt74mJ/CXAC/2HbOv1Za09an149pU1VHgVeDiQV+YZGOS8STjhw4dOn1XIkma9SC5B3g3sJLeDxs/0+qDRhI1TX26Nq8vVm2uqtGqGh0Z8c0uknQ6zWqQVNVLVXWsqr4HfI6/+HO9+4DL+w5dCuxv9aUD6se1SbIQuICZ30qTJJ0msxokbc5j0oeBySe6tgNj7UmsK4DlwK6qOgAcTrK6zX/cDDzS12Z9W78BeLzNo0iSZtHQflSY5PPA+4BLkuwDfgF4X5KV9G5BvQB8BKCq9ibZRu+psKPAre2JLYBb6D0Btoje01o7Wv1e4IEkE/RGImPDuhZJ0okNLUiq6qYB5XunOX4TA37kWFXjwNUD6q8BN3bpoySpu7l4akuS9CZikEiSOjFIJEmdGCSSpE4MEklSJwaJJKkTg0SS1IlBIknqxCCRJHVikEiSOjFIJEmdGCSSpE4MEklSJwaJJKkTg0SS1IlBIknqxCCRJHVikEiSOjFIJEmdGCSSpE4MEklSJ0MLkiT3JTmY5Om+2kVJHk3yjfZ5Yd++25NMJHkuyXV99WuT7Gn77kqSVj8vyUOtvjPJsmFdiyTpxIY5IrkfWDuldhvwWFUtBx5r2yRZAYwBV7U2dydZ0NrcA2wElrdl8pwbgFeq6krgTuCOoV2JJOmEhhYkVfUV4OUp5XXAlra+Bbi+r/5gVR2pqueBCWBVksXA+VX1ZFUVsHVKm8lzPQysmRytSJJmz2zPkVxWVQcA2uelrb4EeLHvuH2ttqStT60f16aqjgKvAhcP+tIkG5OMJxk/dOjQaboUSRKcOZPtg0YSNU19ujavL1ZtrqrRqhodGRk5xS5KkgaZ7SB5qd2uon0ebPV9wOV9xy0F9rf60gH149okWQhcwOtvpUmShmy2g2Q7sL6trwce6auPtSexrqA3qb6r3f46nGR1m/+4eUqbyXPdADze5lEkSbNo4bBOnOTzwPuAS5LsA34B+BSwLckG4JvAjQBVtTfJNuAZ4Chwa1Uda6e6hd4TYIuAHW0BuBd4IMkEvZHI2LCuRZJ0YkMLkqq66QS71pzg+E3ApgH1ceDqAfXXaEEkSZo7Z8pkuyRpnjJIJEmdGCSSpE4MEklSJwaJJKkTg0SS1IlBIknqxCCRJHVikEiSOjFIJEmdGCSSpE4MEklSJwaJJKkTg0SS1IlBIknqxCCRJHVikEiSOjFIJEmdGCSSpE4MEklSJwaJJKmTOQmSJC8k2ZNkd5LxVrsoyaNJvtE+L+w7/vYkE0meS3JdX/3adp6JJHclyVxcjySdzeZyRPL+qlpZVaNt+zbgsapaDjzWtkmyAhgDrgLWAncnWdDa3ANsBJa3Ze0s9l+SxJl1a2sdsKWtbwGu76s/WFVHqup5YAJYlWQxcH5VPVlVBWztayNJmiUL5+h7C/itJAX866raDFxWVQcAqupAkkvbsUuAr/a13ddqf9bWp9aH7uM7ts7G12ie+cyP3DzXXZDmxFwFyXuran8Li0eTfH2aYwfNe9Q09defINlI7xYY73rXu062r5KkaczJra2q2t8+DwJfBFYBL7XbVbTPg+3wfcDlfc2XAvtbfemA+qDv21xVo1U1OjIycjovRZLOerMeJEnenuQdk+vA3wGeBrYD69th64FH2vp2YCzJeUmuoDepvqvdBjucZHV7WuvmvjaSpFkyF7e2LgO+2J7UXQj8u6r6z0l+D9iWZAPwTeBGgKram2Qb8AxwFLi1qo61c90C3A8sAna0RZI0i2Y9SKrqj4H3DKh/B1hzgjabgE0D6uPA1ae7j5KkmTuTHv+VJM1DBokkqRODRJLUiUEiSerEIJEkdWKQSJI6MUgkSZ0YJJKkTgwSSVInBokkqRODRJLUiUEiSerEIJEkdWKQSJI6MUgkSZ0YJJKkTgwSSVInBokkqRODRJLUiUEiSerEIJEkdWKQSJI6mfdBkmRtkueSTCS5ba77I0lnm3kdJEkWAL8G/AiwArgpyYq57ZUknV3mdZAAq4CJqvrjqvp/wIPAujnukySdVRbOdQc6WgK82Le9D/gbUw9KshHY2Da/m+S5Wejb2eIS4Ntz3YkzwWdZP9dd0PH8tznpp3/pdJzlL59ox3wPkgyo1esKVZuBzcPvztknyXhVjc51P6Sp/Lc5e+b7ra19wOV920uB/XPUF0k6K833IPk9YHmSK5K8BRgDts9xnyTprDKvb21V1dEkHwX+C7AAuK+q9s5xt8423jLUmcp/m7MkVa+bUpAkacbm+60tSdIcM0gkSZ0YJDolvppGZ6ok9yU5mOTpue7L2cIg0Unz1TQ6w90PrJ3rTpxNDBKdCl9NozNWVX0FeHmu+3E2MUh0Kga9mmbJHPVF0hwzSHQqZvRqGklnB4NEp8JX00j6cwaJToWvppH05wwSnbSqOgpMvprmWWCbr6bRmSLJ54Engb+SZF+SDXPdpzc7X5EiSerEEYkkqRODRJLUiUEiSerEIJEkdWKQSJI6MUikWZLkY0ne1rd9Y5JnkzyR5H1JvtTqPzr5RuUkI0l2JvmfSX54rvouTccgkWbPx4C39W1vAH66qt7ff1BVba+qT7XNNcDXq+qaqvqd2emmdHLm9d9sl85USd4ObKP3+pgFwL8H3gk8keTbwBPA3wauSLId+E99bf8hMAr8G+AXgUVJdgN/E/hh4JPAecAfAT9VVd+dnauSBnNEIg3HWmB/Vb2nqq4G/hW995G9v6reX1X/HBgH/kFV/ZNBJ6iq3cA/Ax6qqpXA24GfBz5YVT/U2v/ssC9EeiOOSKTh2AN8OskdwJeq6neSQS9NPimr6f0hsf/ezvUWeq8CkeaUQSINQVX9YZJrgQ8B/zLJb52G0wZ4tKpuOg3nkk4bb21JQ5DkncD/rap/C3wa+CHgMPCODqf9KvDeJFe273hbkh/o3FmpI0ck0nD8NeCXknwP+DPgFnqT5TuSHJj6pNZMVNWhNhH/+STntfLPA394mvosnRLf/itJ6sRbW5KkTgwSSVInBokkqRODRJLUiUEiSerEIJEkdWKQSJI6+f/JYzfQR+3/TAAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "print(ess_de['stflife'].value_counts())\n",
    "sns.countplot(x='stflife', data=ess_de, palette='Set2')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 175,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>basinc</th>\n",
       "      <th>nwspol</th>\n",
       "      <th>polintr</th>\n",
       "      <th>vote</th>\n",
       "      <th>sgnptit</th>\n",
       "      <th>pstplonl</th>\n",
       "      <th>trstplt</th>\n",
       "      <th>trstprt</th>\n",
       "      <th>lrscale</th>\n",
       "      <th>stfgov</th>\n",
       "      <th>stfdem</th>\n",
       "      <th>gincdif</th>\n",
       "      <th>gvslvue</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>39400.000000</td>\n",
       "      <td>39400.000000</td>\n",
       "      <td>39400.000000</td>\n",
       "      <td>39400.000000</td>\n",
       "      <td>39400.000000</td>\n",
       "      <td>39400.00000</td>\n",
       "      <td>39400.000000</td>\n",
       "      <td>39400.000000</td>\n",
       "      <td>39400.000000</td>\n",
       "      <td>39400.000000</td>\n",
       "      <td>39400.000000</td>\n",
       "      <td>39400.000000</td>\n",
       "      <td>39400.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>0.522919</td>\n",
       "      <td>86.037157</td>\n",
       "      <td>0.469188</td>\n",
       "      <td>0.776117</td>\n",
       "      <td>0.256929</td>\n",
       "      <td>0.17264</td>\n",
       "      <td>0.361650</td>\n",
       "      <td>0.354772</td>\n",
       "      <td>1.981168</td>\n",
       "      <td>0.444264</td>\n",
       "      <td>0.582563</td>\n",
       "      <td>0.799391</td>\n",
       "      <td>0.774315</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>0.499481</td>\n",
       "      <td>140.964876</td>\n",
       "      <td>0.499056</td>\n",
       "      <td>0.416850</td>\n",
       "      <td>0.436945</td>\n",
       "      <td>0.37794</td>\n",
       "      <td>0.480484</td>\n",
       "      <td>0.478450</td>\n",
       "      <td>2.132517</td>\n",
       "      <td>0.496890</td>\n",
       "      <td>0.493142</td>\n",
       "      <td>0.400461</td>\n",
       "      <td>0.418038</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>30.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>60.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>90.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>1428.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.00000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             basinc        nwspol       polintr          vote       sgnptit  \\\n",
       "count  39400.000000  39400.000000  39400.000000  39400.000000  39400.000000   \n",
       "mean       0.522919     86.037157      0.469188      0.776117      0.256929   \n",
       "std        0.499481    140.964876      0.499056      0.416850      0.436945   \n",
       "min        0.000000      0.000000      0.000000      0.000000      0.000000   \n",
       "25%        0.000000     30.000000      0.000000      1.000000      0.000000   \n",
       "50%        1.000000     60.000000      0.000000      1.000000      0.000000   \n",
       "75%        1.000000     90.000000      1.000000      1.000000      1.000000   \n",
       "max        1.000000   1428.000000      1.000000      1.000000      1.000000   \n",
       "\n",
       "          pstplonl       trstplt       trstprt       lrscale        stfgov  \\\n",
       "count  39400.00000  39400.000000  39400.000000  39400.000000  39400.000000   \n",
       "mean       0.17264      0.361650      0.354772      1.981168      0.444264   \n",
       "std        0.37794      0.480484      0.478450      2.132517      0.496890   \n",
       "min        0.00000      0.000000      0.000000      0.000000      0.000000   \n",
       "25%        0.00000      0.000000      0.000000      0.000000      0.000000   \n",
       "50%        0.00000      0.000000      0.000000      1.000000      0.000000   \n",
       "75%        0.00000      1.000000      1.000000      5.000000      1.000000   \n",
       "max        1.00000      1.000000      1.000000      5.000000      1.000000   \n",
       "\n",
       "             stfdem       gincdif       gvslvue  \n",
       "count  39400.000000  39400.000000  39400.000000  \n",
       "mean       0.582563      0.799391      0.774315  \n",
       "std        0.493142      0.400461      0.418038  \n",
       "min        0.000000      0.000000      0.000000  \n",
       "25%        0.000000      1.000000      1.000000  \n",
       "50%        1.000000      1.000000      1.000000  \n",
       "75%        1.000000      1.000000      1.000000  \n",
       "max        1.000000      1.000000      1.000000  "
      ]
     },
     "execution_count": 175,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_pol.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 178,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<ipython-input-178-efdf51d843fc>:1: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  df_pol['ppltrst'] = ess_de[\"ppltrst\"]\n",
      "<ipython-input-178-efdf51d843fc>:2: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  df_pol['pplfair'] = ess_de[\"pplfair\"]\n",
      "<ipython-input-178-efdf51d843fc>:3: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  df_pol['pplhlp'] = ess_de[\"pplhlp\"]\n",
      "<ipython-input-178-efdf51d843fc>:4: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  df_pol['stflife'] = ess_de[\"stflife\"]\n"
     ]
    }
   ],
   "source": [
    "df_pol['ppltrst'] = ess_de[\"ppltrst\"]\n",
    "df_pol['pplfair'] = ess_de[\"pplfair\"]\n",
    "df_pol['pplhlp'] = ess_de[\"pplhlp\"]\n",
    "df_pol['stflife'] = ess_de[\"stflife\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 179,
   "metadata": {},
   "outputs": [],
   "source": [
    "import warnings\n",
    "warnings.filterwarnings('ignore')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [],
   "source": [
    "#soc_data = ess_de[['ppltrst', 'pplfair', 'pplhlp', 'stflife']].copy()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "5 - happy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 180,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "8     11640\n",
      "7      7298\n",
      "9      7173\n",
      "10     4260\n",
      "6      3304\n",
      "5      3052\n",
      "4      1037\n",
      "3       778\n",
      "2       374\n",
      "0       178\n",
      "1       146\n",
      "88       90\n",
      "77       35\n",
      "99       35\n",
      "Name: happy, dtype: int64\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "print(ess_de['happy'].value_counts())\n",
    "sns.countplot(x='happy', data=ess_de, palette='Set2')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 181,
   "metadata": {},
   "outputs": [],
   "source": [
    "ess_de['happy'] = ess_de['happy'].replace([1,2,3,4], 0)\n",
    "ess_de['happy'] = ess_de['happy'].replace([6,7,8,9,10], 1)\n",
    "ess_de['happy'] = ess_de['happy'].replace([77,88,99], 5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 191,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1    35798\n",
      "0     3602\n",
      "Name: happy, dtype: int64\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "print(ess_de['happy'].value_counts())\n",
    "sns.countplot(x='happy', data=ess_de, palette='Set2')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 190,
   "metadata": {},
   "outputs": [],
   "source": [
    "num_fives = (ess_de[\"happy\"] == 5).sum()\n",
    "\n",
    "# calculate the number of 5 values to replace with 0 and 1\n",
    "num_replace_zero = num_fives // 2\n",
    "num_replace_one = num_fives - num_replace_zero\n",
    "\n",
    "# get the indices of the 5 values to replace\n",
    "replace_indices_zero = np.random.choice(ess_de[ess_de['happy'] == 5].index, num_replace_zero, replace=False)\n",
    "replace_indices_one = np.random.choice(ess_de[ess_de['happy'] == 5].index, num_replace_one, replace=False)\n",
    "\n",
    "# replace the 5 values with 0 and 1\n",
    "ess_de.loc[replace_indices_zero, 'happy'] = 0\n",
    "ess_de.loc[replace_indices_one, 'happy'] = 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 192,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_pol[\"happy\"] = ess_de[\"happy\"]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "6 - health"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 193,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2    17102\n",
      "3    10172\n",
      "1     9107\n",
      "4     2457\n",
      "5      516\n",
      "8       21\n",
      "7       21\n",
      "9        4\n",
      "Name: health, dtype: int64\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "print(ess_de['health'].value_counts())\n",
    "sns.countplot(x='health', data=ess_de, palette='Set2')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 194,
   "metadata": {},
   "outputs": [],
   "source": [
    "ess_de['health'] = ess_de['health'].replace([2], 1)\n",
    "ess_de['health'] = ess_de['health'].replace([4,5], 0)\n",
    "ess_de['health'] = ess_de['health'].replace([7,8,9], 3)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 203,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1    32984\n",
      "0     6416\n",
      "Name: health, dtype: int64\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "print(ess_de['health'].value_counts())\n",
    "sns.countplot(x='health', data=ess_de, palette='Set2')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 202,
   "metadata": {},
   "outputs": [],
   "source": [
    "num_threes = (ess_de['health'] == 3).sum()\n",
    "\n",
    "# calculate the number of 3 values to replace with 0 and 1\n",
    "num_replace_zero = num_threes // 2\n",
    "num_replace_one = num_threes - num_replace_zero\n",
    "\n",
    "# get the indices of the 3 values to replace\n",
    "replace_indices_zero = np.random.choice(ess_de[ess_de['health'] == 3].index, num_replace_zero, replace=False)\n",
    "replace_indices_one = np.random.choice(ess_de[ess_de['health'] == 3].index, num_replace_one, replace=False)\n",
    "\n",
    "# replace the 3 values with 0 and 1\n",
    "ess_de.loc[replace_indices_zero, 'health'] = 0\n",
    "ess_de.loc[replace_indices_one, 'health'] = 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 204,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_pol[\"health\"] = ess_de[\"health\"]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "7 - rlgblg"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 205,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1    22411\n",
      "2    16759\n",
      "7      136\n",
      "8       90\n",
      "9        4\n",
      "Name: rlgblg, dtype: int64\n"
     ]
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAZIAAAEGCAYAAABPdROvAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjMuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8vihELAAAACXBIWXMAAAsTAAALEwEAmpwYAAARu0lEQVR4nO3df/BldV3H8edL1hRUDGEx2oWWlHFamdLYNlLHLJpEm4IQaplBKGm2IWykbBptptFqmMkmddSCGRqQHxpI/gicxGSwNEcBF6L4FeMmAisboBBiKbn07o/7+baXL3e/XPnsvef79ft8zNy5577P+Zzv+9zZndecH/ecVBWSJD1VTxu6AUnSymaQSJK6GCSSpC4GiSSpi0EiSeqyZugG5u2ggw6qDRs2DN2GJK0oN9xww9eqau2keasuSDZs2MC2bduGbkOSVpQkd+1pnoe2JEldDBJJUheDRJLUxSCRJHUxSCRJXQwSSVIXg0SS1MUgkSR1MUgkSV1W3S/bl/Lmqy4euoW97p2vOXXoFiR9j3OPRJLUxSCRJHUxSCRJXQwSSVIXg0SS1MUgkSR1MUgkSV0MEklSF4NEktTFIJEkdTFIJEldDBJJUheDRJLUxSCRJHUxSCRJXQwSSVIXg0SS1MUgkSR1mVmQJDk0yT8kuT3JrUne1OrPS3J1ki+19wPGxrw1yfYkdyR59Vj9qCQ3t3nvTZJWf0aSD7X6dUk2zGp7JEmTzXKPZBfw5qr6EeBo4MwkG4G3ANdU1RHANe0zbd4W4MXAscA5SfZp6zoX2Aoc0V7HtvrpwENV9ULg3cA7Zrg9kqQJZhYkVbWzqm5s048AtwPrgOOAi9piFwHHt+njgMuq6tGquhPYDmxOcgiwf1V9oaoKuHjRmIV1fRg4ZmFvRZI0H3M5R9IOOb0UuA54flXthFHYAAe3xdYB94wN29Fq69r04vrjxlTVLuBh4MAJf39rkm1Jtj3wwAN7aaskSTCHIEnybOAjwFlV9Y2lFp1QqyXqS415fKHqvKraVFWb1q5d+2QtS5K+CzMNkiRPZxQiH6yqj7byfe1wFe39/lbfARw6Nnw9cG+rr59Qf9yYJGuA5wIP7v0tkSTtySyv2gpwPnB7Vb1rbNaVwGlt+jTgirH6lnYl1uGMTqpf3w5/PZLk6LbOUxeNWVjXicCn23kUSdKcrJnhul8OvB64OclNrfYHwJ8Clyc5HbgbOAmgqm5NcjlwG6Mrvs6sqsfauDOAC4F9gavaC0ZBdUmS7Yz2RLbMcHskSRPMLEiq6nNMPocBcMwexpwNnD2hvg04ckL927QgkiQNw1+2S5K6GCSSpC4GiSSpi0EiSepikEiSuhgkkqQuBokkqYtBIknqYpBIkroYJJKkLgaJJKmLQSJJ6mKQSJK6GCSSpC4GiSSpi0EiSepikEiSuhgkkqQuBokkqYtBIknqYpBIkroYJJKkLgaJJKmLQSJJ6rJm6Aa0PN1/7u8P3cJed/AZfzZ0C9L3JPdIJEldDBJJUheDRJLUxSCRJHUxSCRJXQwSSVIXg0SS1MUgkSR1MUgkSV0MEklSF4NEktTFIJEkdZlZkCS5IMn9SW4Zq709yVeT3NRerx2b99Yk25PckeTVY/Wjktzc5r03SVr9GUk+1OrXJdkwq22RJO3ZLPdILgSOnVB/d1W9pL0+AZBkI7AFeHEbc06Sfdry5wJbgSPaa2GdpwMPVdULgXcD75jVhkiS9mxmQVJVnwUenHLx44DLqurRqroT2A5sTnIIsH9VfaGqCrgYOH5szEVt+sPAMQt7K5Kk+RniHMkbk/xrO/R1QKutA+4ZW2ZHq61r04vrjxtTVbuAh4EDJ/3BJFuTbEuy7YEHHth7WyJJmnuQnAu8AHgJsBN4Z6tP2pOoJepLjXliseq8qtpUVZvWrl37XTUsSVraXIOkqu6rqseq6n+BvwI2t1k7gEPHFl0P3Nvq6yfUHzcmyRrguUx/KE2StJfMNUjaOY8FvwwsXNF1JbClXYl1OKOT6tdX1U7gkSRHt/MfpwJXjI05rU2fCHy6nUeRJM3RzJ7ZnuRS4FXAQUl2AG8DXpXkJYwOQX0F+E2Aqro1yeXAbcAu4Myqeqyt6gxGV4DtC1zVXgDnA5ck2c5oT2TLrLZFkrRnMwuSqjp5Qvn8JZY/Gzh7Qn0bcOSE+reBk3p6lCT185ftkqQuBokkqYtBIknqYpBIkroYJJKkLgaJJKmLQSJJ6mKQSJK6GCSSpC4GiSSpi0EiSepikEiSuhgkkqQuUwVJkmumqUmSVp8lbyOf5JnAfoyeKXIAux9vuz/wgzPuTZK0AjzZ80h+EziLUWjcwO4g+Qbwl7NrS5K0UiwZJFX1HuA9SX67qt43p54kSSvIVE9IrKr3JXkZsGF8TFVdPKO+JEkrxFRBkuQS4AXATcDCs9QLMEgkaZWb9pntm4CNVVWzbEaStPJM+zuSW4AfmGUjkqSVado9koOA25JcDzy6UKyqX5pJV5KkFWPaIHn7LJuQJK1c01619ZlZNyJJWpmmvWrrEUZXaQF8H/B04L+qav9ZNSZJWhmm3SN5zvjnJMcDm2fRkCRpZXlKd/+tqr8FfnbvtiJJWommPbR1wtjHpzH6XYm/KZEkTX3V1i+OTe8CvgIct9e7kSStONOeI/n1WTciSVqZpn2w1fokH0tyf5L7knwkyfpZNydJWv6mPdn+fuBKRs8lWQd8vNUkSavctEGytqreX1W72utCYO0M+5IkrRDTBsnXkpySZJ/2OgX4+iwbkyStDNMGyRuAXwH+A9gJnAh4Al6SNPXlv38CnFZVDwEkeR7w54wCRpK0ik27R/KjCyECUFUPAi+dTUuSpJVk2iB5WpIDFj60PZIl92aSXNAuF75lfFySq5N8qb2Pr/OtSbYnuSPJq8fqRyW5uc17b5K0+jOSfKjVr0uyYcptkSTtRdMGyTuBzyf5kyR/DHwe+LMnGXMhcOyi2luAa6rqCOCa9pkkG4EtwIvbmHOS7NPGnAtsBY5or4V1ng48VFUvBN4NvGPKbZEk7UVTBUlVXQy8DrgPeAA4oaoueZIxnwUeXFQ+DrioTV8EHD9Wv6yqHq2qO4HtwOYkhwD7V9UX2vPiL140ZmFdHwaOWdhbkSTNz7Qn26mq24DbOv/e86tqZ1vfziQHt/o64Nqx5Xa02nfa9OL6wph72rp2JXkYOBD42uI/mmQro70aDjvssM5NkCSNe0q3kZ+BSXsStUR9qTFPLFadV1WbqmrT2rX+jlKS9qZ5B8l97XAV7f3+Vt8BHDq23Hrg3lZfP6H+uDFJ1gDP5YmH0iRJMzbvILkSOK1NnwZcMVbf0q7EOpzRSfXr22GwR5Ic3c5/nLpozMK6TgQ+3c6jSJLmaOpzJN+tJJcCrwIOSrIDeBvwp8DlSU4H7gZOAqiqW5NczugczC7gzKp6rK3qDEZXgO0LXNVeAOcDlyTZzmhPZMustkWStGczC5KqOnkPs47Zw/JnA2dPqG8DjpxQ/zYtiCRJw1kuJ9slSSuUQSJJ6mKQSJK6GCSSpC4GiSSpi0EiSepikEiSuhgkkqQuBokkqYtBIknqYpBIkroYJJKkLgaJJKmLQSJJ6mKQSJK6GCSSpC4GiSSpi0EiSepikEiSuhgkkqQuBokkqYtBIknqYpBIkroYJJKkLgaJJKmLQSJJ6mKQSJK6GCSSpC4GiSSpi0EiSepikEiSuhgkkqQuBokkqYtBIknqYpBIkroYJJKkLgaJJKnLIEGS5CtJbk5yU5Jtrfa8JFcn+VJ7P2Bs+bcm2Z7kjiSvHqsf1dazPcl7k2SI7ZGk1WzIPZKfqaqXVNWm9vktwDVVdQRwTftMko3AFuDFwLHAOUn2aWPOBbYCR7TXsXPsX5LE8jq0dRxwUZu+CDh+rH5ZVT1aVXcC24HNSQ4B9q+qL1RVARePjZEkzclQQVLAp5LckGRrqz2/qnYCtPeDW30dcM/Y2B2ttq5NL65LkuZozUB/9+VVdW+Sg4Grk/zbEstOOu9RS9SfuIJRWG0FOOyww77bXiVJSxhkj6Sq7m3v9wMfAzYD97XDVbT3+9viO4BDx4avB+5t9fUT6pP+3nlVtamqNq1du3ZvbookrXpzD5Ikz0rynIVp4OeBW4ArgdPaYqcBV7TpK4EtSZ6R5HBGJ9Wvb4e/HklydLta69SxMZKkORni0NbzgY+1K3XXAH9dVZ9M8kXg8iSnA3cDJwFU1a1JLgduA3YBZ1bVY21dZwAXAvsCV7WXJGmO5h4kVfVl4Mcm1L8OHLOHMWcDZ0+obwOO3Ns9SpKmt5wu/5UkrUAGiSSpi0EiSepikEiSuhgkkqQuBokkqYtBIknqYpBIkroYJJKkLgaJJKmLQSJJ6mKQSJK6GCSSpC4GiSSpi0EiSepikEiSuhgkkqQuBokkqYtBIknqYpBIkroYJJKkLgaJJKmLQSJJ6mKQSJK6GCSSpC4GiSSpi0EiSepikEiSuhgkkqQuBokkqYtBIknqYpBIkroYJJKkLgaJJKmLQSJJ6mKQSJK6GCSSpC4GiSSpy4oPkiTHJrkjyfYkbxm6H0labVZ0kCTZB/hL4DXARuDkJBuH7UqSVpc1QzfQaTOwvaq+DJDkMuA44LZBu9L3lHM+8LmhW9jrfuuUVzylcdvP/cxe7mR4Lzzjp4duYcVLVQ3dw1OW5ETg2Kr6jfb59cBPVtUbFy23FdjaPr4IuGOujU52EPC1oZtYJvwuRvwedvO72G25fBc/VFVrJ81Y6XskmVB7QjJW1XnAebNvZ3pJtlXVpqH7WA78Lkb8Hnbzu9htJXwXK/ocCbADOHTs83rg3oF6kaRVaaUHyReBI5IcnuT7gC3AlQP3JEmryoo+tFVVu5K8Efh7YB/ggqq6deC2prWsDrUNzO9ixO9hN7+L3Zb9d7GiT7ZLkoa30g9tSZIGZpBIkroYJHOU5IIk9ye5Zehehpbk0CT/kOT2JLcmedPQPQ0lyYuS3DT2+kaSs4buayhJfqf9m7glyaVJnjl0T0NJ8qb2Pdy6nP9NeI5kjpK8EvgmcHFVHTl0P0NKcghwSFXdmOQ5wA3A8VW1qu9K0G7781VGP6y9a+h+5i3JOuBzwMaq+laSy4FPVNWFw3Y2f0mOBC5jdAeP/wE+CZxRVV8atLEJ3COZo6r6LPDg0H0sB1W1s6pubNOPALcD64btalk4Bvj31RgiY9YA+yZZA+zH6v1t2I8A11bVf1fVLuAzwC8P3NNEBokGl2QD8FLguoFbWQ62AJcO3cRQquqrwJ8DdwM7gYer6lPDdjWYW4BXJjkwyX7Aa3n8D7CXDYNEg0rybOAjwFlV9Y2h+xlS+1HtLwF/M3QvQ0lyAKMbrx4O/CDwrCSnDNvVMKrqduAdwNWMDmv9C7Br0Kb2wCDRYJI8nVGIfLCqPjp0P8vAa4Abq+q+oRsZ0M8Bd1bVA1X1HeCjwMsG7mkwVXV+Vf14Vb2S0WHxZXd+BAwSDSRJgPOB26vqXUP3s0yczCo+rNXcDRydZL/2b+QYRufPVqUkB7f3w4ATWKb/Prxqa46SXAq8itFtoe8D3lZV5w/a1ECSvAL4J+Bm4H9b+Q+q6hPDdTWcdgz8HuCHq+rhofsZUpI/An6V0WGcfwZ+o6oeHbarYST5J+BA4DvA71bVNQO3NJFBIknq4qEtSVIXg0SS1MUgkSR1MUgkSV0MEklSF4NEmoMkX0ly0JMs849JNk2o/1qSv5hdd1Ifg0SasfbDOv+v6XuW/7ilGUiyoT1r5RzgRsZutpfkD5P8W5Kr2/M2fm9s6ClJPt+eQbF5wnpfkOTaJF9M8sdJvjmHzZGWZJBIs/MiRs+eeSlwF0A7dPU6Rnc7PgFYfCjrWVX1MuC3gAsmrPM9wHuq6idYvbdX1zJjkEizc1dVXbuo9grgiqr6VnsOy8cXzb8U/v/ZNfsn+f5F83+K3XcH/uu93K/0lBgk0uz814RanmTM4nsWeQ8jLXsGiTRfnwN+Mckz27NYfmHR/F+F/7+p5cMTbuB4LaNDYzB6CJY0uDVDNyCtJlX1xSRXMnpI0V3ANmA8LB5K8nlgf+ANE1ZxFvCBJG8G/m7RWGkQ3v1XmrMkz66qb7Zbx38W2Lrw/Popxu4HfKuqKskW4OSqOm6W/UpPxj0Saf7OS7IReCZw0bQh0hwF/EX7bcp/MnmvRZor90gkSV082S5J6mKQSJK6GCSSpC4GiSSpi0EiSeryf8wuke7MBW0wAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "print(ess_de['rlgblg'].value_counts())\n",
    "sns.countplot(x='rlgblg', data=ess_de, palette='Set2')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 206,
   "metadata": {},
   "outputs": [],
   "source": [
    "ess_de['rlgblg'] = ess_de['rlgblg'].replace([2], 0)\n",
    "ess_de['rlgblg'] = ess_de['rlgblg'].replace([8], 0)\n",
    "ess_de['rlgblg'] = ess_de['rlgblg'].replace([9], 0)\n",
    "ess_de['rlgblg'] = ess_de['rlgblg'].replace([7], 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 207,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_pol[\"rlgblg\"] = ess_de[\"rlgblg\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 208,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>basinc</th>\n",
       "      <th>nwspol</th>\n",
       "      <th>polintr</th>\n",
       "      <th>vote</th>\n",
       "      <th>sgnptit</th>\n",
       "      <th>pstplonl</th>\n",
       "      <th>trstplt</th>\n",
       "      <th>trstprt</th>\n",
       "      <th>lrscale</th>\n",
       "      <th>stfgov</th>\n",
       "      <th>...</th>\n",
       "      <th>gincdif</th>\n",
       "      <th>gvslvue</th>\n",
       "      <th>cntry</th>\n",
       "      <th>ppltrst</th>\n",
       "      <th>pplfair</th>\n",
       "      <th>pplhlp</th>\n",
       "      <th>stflife</th>\n",
       "      <th>happy</th>\n",
       "      <th>health</th>\n",
       "      <th>rlgblg</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>120</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>AT</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>120</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>AT</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>30</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>AT</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>30</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>AT</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>30</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>AT</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 21 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   basinc  nwspol  polintr  vote  sgnptit  pstplonl  trstplt  trstprt  \\\n",
       "0       1     120        1     1        1         1        0        1   \n",
       "1       1     120        1     1        0         1        0        0   \n",
       "2       0      30        0     1        0         0        0        0   \n",
       "3       1      30        1     0        0         0        0        0   \n",
       "4       1      30        0     0        0         0        1        1   \n",
       "\n",
       "   lrscale  stfgov  ...  gincdif  gvslvue  cntry ppltrst  pplfair  pplhlp  \\\n",
       "0        0       0  ...      1.0        1     AT       1        1       0   \n",
       "1        0       0  ...      1.0        0     AT       1        1       1   \n",
       "2        5       0  ...      0.0        1     AT       1        1       0   \n",
       "3        0       1  ...      1.0        1     AT       1        1       1   \n",
       "4        5       0  ...      1.0        1     AT       1        0       1   \n",
       "\n",
       "   stflife  happy  health  rlgblg  \n",
       "0        1      1       1       0  \n",
       "1        1      0       1       0  \n",
       "2        1      1       0       1  \n",
       "3        1      1       1       1  \n",
       "4        1      1       1       1  \n",
       "\n",
       "[5 rows x 21 columns]"
      ]
     },
     "execution_count": 208,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_pol.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "8 - rlgdgr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 209,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0     7224\n",
      "5     5609\n",
      "7     4443\n",
      "8     3885\n",
      "6     3825\n",
      "3     2963\n",
      "2     2870\n",
      "4     2316\n",
      "1     2272\n",
      "10    2180\n",
      "9     1501\n",
      "88     149\n",
      "77     144\n",
      "99      19\n",
      "Name: rlgdgr, dtype: int64\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "print(ess_de['rlgdgr'].value_counts())\n",
    "sns.countplot(x='rlgdgr', data=ess_de, palette='Set2')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 210,
   "metadata": {},
   "outputs": [],
   "source": [
    "ess_de['rlgdgr'] = ess_de['rlgdgr'].replace([77,88,99], ess_de['rlgdgr'].median())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 212,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_pol[\"rlgdgr\"] = ess_de[\"rlgdgr\"]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "9 - smdfslv"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 213,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2    19317\n",
      "3     8243\n",
      "1     5382\n",
      "4     5085\n",
      "5      790\n",
      "8      522\n",
      "7       55\n",
      "9        6\n",
      "Name: smdfslv, dtype: int64\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "print(ess_de['smdfslv'].value_counts())\n",
    "sns.countplot(x='smdfslv', data=ess_de, palette='Set2')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 214,
   "metadata": {},
   "outputs": [],
   "source": [
    "ess_de[\"smdfslv\"] = ess_de[\"smdfslv\"].replace([2], 1)\n",
    "ess_de[\"smdfslv\"] = ess_de[\"smdfslv\"].replace([4,5], 0)\n",
    "ess_de[\"smdfslv\"] = ess_de[\"smdfslv\"].replace([7,8,9], 3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 224,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1    30591\n",
      "0     8809\n",
      "Name: smdfslv, dtype: int64\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "print(ess_de['smdfslv'].value_counts())\n",
    "sns.countplot(x='smdfslv', data=ess_de, palette='Set2')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 223,
   "metadata": {},
   "outputs": [],
   "source": [
    "num_threes = (ess_de['smdfslv'] == 3).sum()\n",
    "\n",
    "# calculate the number of 3 values to replace with 0 and 1\n",
    "num_replace_zero = num_threes // 2\n",
    "num_replace_one = num_threes - num_replace_zero\n",
    "\n",
    "# get the indices of the 3 values to replace\n",
    "replace_indices_zero = np.random.choice(ess_de[ess_de['smdfslv'] == 3].index, num_replace_zero, replace=False)\n",
    "replace_indices_one = np.random.choice(ess_de[ess_de['smdfslv'] == 3].index, num_replace_one, replace=False)\n",
    "\n",
    "# replace the 3 values with 0 and 1\n",
    "ess_de.loc[replace_indices_zero, 'smdfslv'] = 0\n",
    "ess_de.loc[replace_indices_one, 'smdfslv'] = 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 225,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_pol[\"smdfslv\"] = ess_de[\"smdfslv\"]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "10 - ipeqopt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 226,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2    15748\n",
      "1    11345\n",
      "3     7460\n",
      "4     2837\n",
      "5     1173\n",
      "8      264\n",
      "6      256\n",
      "9      193\n",
      "7      124\n",
      "Name: ipeqopt, dtype: int64\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "print(ess_de[\"ipeqopt\"].value_counts())\n",
    "sns.countplot(x=\"ipeqopt\", data=ess_de, palette='Set2')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 227,
   "metadata": {},
   "outputs": [],
   "source": [
    "ess_de[\"ipeqopt\"] = ess_de[\"ipeqopt\"].replace([7,8,9], ess_de[\"ipeqopt\"].median())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 228,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_pol[\"ipeqopt\"] = ess_de[\"ipeqopt\"]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "11 - dfincac"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 229,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2    13609\n",
      "4    10289\n",
      "3     8247\n",
      "5     3825\n",
      "1     2754\n",
      "8      616\n",
      "7       57\n",
      "9        3\n",
      "Name: dfincac, dtype: int64\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "print(ess_de[\"dfincac\"].value_counts())\n",
    "sns.countplot(x=\"dfincac\", data=ess_de, palette='Set2')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 230,
   "metadata": {},
   "outputs": [],
   "source": [
    "ess_de[\"dfincac\"] = ess_de[\"dfincac\"].replace([7,8,9], 3)\n",
    "ess_de[\"dfincac\"] = ess_de[\"dfincac\"].replace([2], 1)\n",
    "ess_de[\"dfincac\"] = ess_de[\"dfincac\"].replace([4,5], 0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 241,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1    22295\n",
      "0    17105\n",
      "Name: dfincac, dtype: int64\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "print(ess_de[\"dfincac\"].value_counts())\n",
    "sns.countplot(x=\"dfincac\", data=ess_de, palette='Set2')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 240,
   "metadata": {},
   "outputs": [],
   "source": [
    "num_threes = (ess_de[\"dfincac\"] == 3).sum()\n",
    "\n",
    "# calculate the number of 3 values to replace with 0 and 1\n",
    "num_replace_zero = num_threes // 2\n",
    "num_replace_one = num_threes - num_replace_zero\n",
    "\n",
    "# get the indices of the 3 values to replace\n",
    "replace_indices_zero = np.random.choice(ess_de[ess_de[\"dfincac\"] == 3].index, num_replace_zero, replace=False)\n",
    "replace_indices_one = np.random.choice(ess_de[ess_de[\"dfincac\"] == 3].index, num_replace_one, replace=False)\n",
    "\n",
    "# replace the 3 values with 0 and 1\n",
    "ess_de.loc[replace_indices_zero, \"dfincac\"] = 0\n",
    "ess_de.loc[replace_indices_one, \"dfincac\"] = 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 242,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_pol[\"dfincac\"] = ess_de[\"dfincac\"]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "12 - gndr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 243,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2    20628\n",
      "1    18763\n",
      "9        9\n",
      "Name: gndr, dtype: int64\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "print(ess_de[\"gndr\"].value_counts())\n",
    "sns.countplot(x=\"gndr\", data=ess_de, palette='Set2')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 244,
   "metadata": {},
   "outputs": [],
   "source": [
    "ess_de[\"gndr\"] = ess_de[\"gndr\"].replace([2,9], 0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 246,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_pol[\"gndr\"] = ess_de[\"gndr\"]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "13 - agea"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 247,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "128"
      ]
     },
     "execution_count": 247,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(ess_de[\"agea\"] == 999).sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 248,
   "metadata": {},
   "outputs": [],
   "source": [
    "ess_de[\"agea\"] = ess_de[\"agea\"].replace([999], ess_de[\"agea\"].median())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 249,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_pol[\"agea\"] = ess_de[\"agea\"]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "13 - eduyrs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 250,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "116"
      ]
     },
     "execution_count": 250,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(ess_de[\"eduyrs\"] == 77).sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 251,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "264"
      ]
     },
     "execution_count": 251,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(ess_de[\"eduyrs\"] == 88).sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 252,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "30"
      ]
     },
     "execution_count": 252,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(ess_de[\"eduyrs\"] == 99).sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 253,
   "metadata": {},
   "outputs": [],
   "source": [
    "ess_de[\"eduyrs\"] = ess_de[\"eduyrs\"].replace([77,88,99], ess_de[\"eduyrs\"].median())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 254,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_pol[\"eduyrs\"] = ess_de[\"eduyrs\"]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "14 - sbstrec"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 255,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2    11879\n",
      "4    10857\n",
      "3    10302\n",
      "5     2341\n",
      "1     2242\n",
      "8     1717\n",
      "7       52\n",
      "9       10\n",
      "Name: sbstrec, dtype: int64\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "print(ess_de[\"sbstrec\"].value_counts())\n",
    "sns.countplot(x=\"sbstrec\", data=ess_de, palette='Set2')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 256,
   "metadata": {},
   "outputs": [],
   "source": [
    "ess_de[\"sbstrec\"] = ess_de[\"sbstrec\"].replace([7,8,9], 3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 257,
   "metadata": {},
   "outputs": [],
   "source": [
    "ess_de[\"sbstrec\"] = ess_de[\"sbstrec\"].replace([2], 1)\n",
    "ess_de[\"sbstrec\"] = ess_de[\"sbstrec\"].replace([4,5], 0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 268,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1    22206\n",
      "0    17194\n",
      "Name: sbstrec, dtype: int64\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "print(ess_de[\"sbstrec\"].value_counts())\n",
    "sns.countplot(x=\"sbstrec\", data=ess_de, palette='Set2')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 267,
   "metadata": {},
   "outputs": [],
   "source": [
    "num_threes = (ess_de[\"sbstrec\"] == 3).sum()\n",
    "\n",
    "# calculate the number of 3 values to replace with 0 and 1\n",
    "num_replace_zero = num_threes // 2\n",
    "num_replace_one = num_threes - num_replace_zero\n",
    "\n",
    "# get the indices of the 3 values to replace\n",
    "replace_indices_zero = np.random.choice(ess_de[ess_de[\"sbstrec\"] == 3].index, num_replace_zero, replace=False)\n",
    "replace_indices_one = np.random.choice(ess_de[ess_de[\"sbstrec\"] == 3].index, num_replace_one, replace=False)\n",
    "\n",
    "# replace the 3 values with 0 and 1\n",
    "ess_de.loc[replace_indices_zero, \"sbstrec\"] = 0\n",
    "ess_de.loc[replace_indices_one, \"sbstrec\"] = 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 269,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_pol[\"sbstrec\"] = ess_de[\"sbstrec\"]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "15 - sbprvpv"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 270,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2    19453\n",
      "3     7934\n",
      "4     6362\n",
      "1     3327\n",
      "5     1238\n",
      "8     1035\n",
      "7       37\n",
      "9       14\n",
      "Name: sbprvpv, dtype: int64\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "print(ess_de[\"sbprvpv\"].value_counts())\n",
    "sns.countplot(x=\"sbprvpv\", data=ess_de, palette='Set2')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 271,
   "metadata": {},
   "outputs": [],
   "source": [
    "ess_de[\"sbprvpv\"] = ess_de[\"sbprvpv\"].replace([7,8,9], 3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 272,
   "metadata": {},
   "outputs": [],
   "source": [
    "ess_de[\"sbprvpv\"] = ess_de[\"sbprvpv\"].replace([2], 1)\n",
    "ess_de[\"sbprvpv\"] = ess_de[\"sbprvpv\"].replace([4,5], 0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 285,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1    28787\n",
      "0    10613\n",
      "Name: sbprvpv, dtype: int64\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "print(ess_de[\"sbprvpv\"].value_counts())\n",
    "sns.countplot(x=\"sbprvpv\", data=ess_de, palette='Set2')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 284,
   "metadata": {},
   "outputs": [],
   "source": [
    "num_threes = (ess_de[\"sbprvpv\"] == 3).sum()\n",
    "\n",
    "# calculate the number of 3 values to replace with 0 and 1\n",
    "num_replace_zero = num_threes // 2\n",
    "num_replace_one = num_threes - num_replace_zero\n",
    "\n",
    "# get the indices of the 3 values to replace\n",
    "replace_indices_zero = np.random.choice(ess_de[ess_de[\"sbprvpv\"] == 3].index, num_replace_zero, replace=False)\n",
    "replace_indices_one = np.random.choice(ess_de[ess_de[\"sbprvpv\"] == 3].index, num_replace_one, replace=False)\n",
    "\n",
    "# replace the 3 values with 0 and 1\n",
    "ess_de.loc[replace_indices_zero, \"sbprvpv\"] = 0\n",
    "ess_de.loc[replace_indices_one, \"sbprvpv\"] = 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 286,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_pol[\"sbprvpv\"] = ess_de[\"sbprvpv\"]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "16 - sbeqsoc"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 287,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2    17171\n",
      "3     9378\n",
      "4     7740\n",
      "1     2382\n",
      "5     1514\n",
      "8     1153\n",
      "7       54\n",
      "9        8\n",
      "Name: sbeqsoc, dtype: int64\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "print(ess_de[\"sbeqsoc\"].value_counts())\n",
    "sns.countplot(x=\"sbeqsoc\", data=ess_de, palette='Set2')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 288,
   "metadata": {},
   "outputs": [],
   "source": [
    "ess_de[\"sbeqsoc\"] = ess_de[\"sbeqsoc\"].replace([7,8,9], 3)\n",
    "ess_de[\"sbeqsoc\"] = ess_de[\"sbeqsoc\"].replace([2], 1)\n",
    "ess_de[\"sbeqsoc\"] = ess_de[\"sbeqsoc\"].replace([4,5], 0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 298,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1    26617\n",
      "0    12783\n",
      "Name: sbeqsoc, dtype: int64\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "print(ess_de[\"sbeqsoc\"].value_counts())\n",
    "sns.countplot(x=\"sbeqsoc\", data=ess_de, palette='Set2')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 297,
   "metadata": {},
   "outputs": [],
   "source": [
    "num_threes = (ess_de[\"sbeqsoc\"] == 3).sum()\n",
    "\n",
    "# calculate the number of 3 values to replace with 0 and 1\n",
    "num_replace_zero = num_threes // 2\n",
    "num_replace_one = num_threes - num_replace_zero\n",
    "\n",
    "# get the indices of the 3 values to replace\n",
    "replace_indices_zero = np.random.choice(ess_de[ess_de[\"sbeqsoc\"] == 3].index, num_replace_zero, replace=False)\n",
    "replace_indices_one = np.random.choice(ess_de[ess_de[\"sbeqsoc\"] == 3].index, num_replace_one, replace=False)\n",
    "\n",
    "# replace the 3 values with 0 and 1\n",
    "ess_de.loc[replace_indices_zero, \"sbeqsoc\"] = 0\n",
    "ess_de.loc[replace_indices_one, \"sbeqsoc\"] = 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 299,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_pol[\"sbeqsoc\"] = ess_de[\"sbeqsoc\"]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "17 - sblazy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 300,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2    13141\n",
      "4     9910\n",
      "3     9072\n",
      "1     3751\n",
      "5     2753\n",
      "8      721\n",
      "7       48\n",
      "9        4\n",
      "Name: sblazy, dtype: int64\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "print(ess_de[\"sblazy\"].value_counts())\n",
    "sns.countplot(x=\"sblazy\", data=ess_de, palette='Set2')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 301,
   "metadata": {},
   "outputs": [],
   "source": [
    "ess_de[\"sblazy\"] = ess_de[\"sblazy\"].replace([7,8,9], 3)\n",
    "ess_de[\"sblazy\"] = ess_de[\"sblazy\"].replace([2], 1)\n",
    "ess_de[\"sblazy\"] = ess_de[\"sblazy\"].replace([4,5], 0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 310,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1    23467\n",
      "0    15933\n",
      "Name: sblazy, dtype: int64\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "print(ess_de[\"sblazy\"].value_counts())\n",
    "sns.countplot(x=\"sblazy\", data=ess_de, palette='Set2')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 309,
   "metadata": {},
   "outputs": [],
   "source": [
    "num_threes = (ess_de[\"sblazy\"] == 3).sum()\n",
    "\n",
    "# calculate the number of 3 values to replace with 0 and 1\n",
    "num_replace_zero = num_threes // 2\n",
    "num_replace_one = num_threes - num_replace_zero\n",
    "\n",
    "# get the indices of the 3 values to replace\n",
    "replace_indices_zero = np.random.choice(ess_de[ess_de[\"sblazy\"] == 3].index, num_replace_zero, replace=False)\n",
    "replace_indices_one = np.random.choice(ess_de[ess_de[\"sblazy\"] == 3].index, num_replace_one, replace=False)\n",
    "\n",
    "# replace the 3 values with 0 and 1\n",
    "ess_de.loc[replace_indices_zero, \"sblazy\"] = 0\n",
    "ess_de.loc[replace_indices_one, \"sblazy\"] = 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 311,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_pol[\"sblazy\"] = ess_de[\"sblazy\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 312,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>basinc</th>\n",
       "      <th>nwspol</th>\n",
       "      <th>polintr</th>\n",
       "      <th>vote</th>\n",
       "      <th>sgnptit</th>\n",
       "      <th>pstplonl</th>\n",
       "      <th>trstplt</th>\n",
       "      <th>trstprt</th>\n",
       "      <th>lrscale</th>\n",
       "      <th>stfgov</th>\n",
       "      <th>...</th>\n",
       "      <th>smdfslv</th>\n",
       "      <th>ipeqopt</th>\n",
       "      <th>dfincac</th>\n",
       "      <th>gndr</th>\n",
       "      <th>agea</th>\n",
       "      <th>eduyrs</th>\n",
       "      <th>sbstrec</th>\n",
       "      <th>sbprvpv</th>\n",
       "      <th>sbeqsoc</th>\n",
       "      <th>sblazy</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>39400.000000</td>\n",
       "      <td>39400.000000</td>\n",
       "      <td>39400.000000</td>\n",
       "      <td>39400.000000</td>\n",
       "      <td>39400.000000</td>\n",
       "      <td>39400.00000</td>\n",
       "      <td>39400.000000</td>\n",
       "      <td>39400.000000</td>\n",
       "      <td>39400.000000</td>\n",
       "      <td>39400.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>39400.000000</td>\n",
       "      <td>39400.000000</td>\n",
       "      <td>39400.000000</td>\n",
       "      <td>39400.000000</td>\n",
       "      <td>39400.000000</td>\n",
       "      <td>39400.000000</td>\n",
       "      <td>39400.000000</td>\n",
       "      <td>39400.000000</td>\n",
       "      <td>39400.000000</td>\n",
       "      <td>39400.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>0.522919</td>\n",
       "      <td>86.037157</td>\n",
       "      <td>0.469188</td>\n",
       "      <td>0.776117</td>\n",
       "      <td>0.256929</td>\n",
       "      <td>0.17264</td>\n",
       "      <td>0.361650</td>\n",
       "      <td>0.354772</td>\n",
       "      <td>1.981168</td>\n",
       "      <td>0.444264</td>\n",
       "      <td>...</td>\n",
       "      <td>0.776421</td>\n",
       "      <td>2.160711</td>\n",
       "      <td>0.565863</td>\n",
       "      <td>0.476218</td>\n",
       "      <td>49.435990</td>\n",
       "      <td>13.011066</td>\n",
       "      <td>0.563604</td>\n",
       "      <td>0.730635</td>\n",
       "      <td>0.675558</td>\n",
       "      <td>0.595609</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>0.499481</td>\n",
       "      <td>140.964876</td>\n",
       "      <td>0.499056</td>\n",
       "      <td>0.416850</td>\n",
       "      <td>0.436945</td>\n",
       "      <td>0.37794</td>\n",
       "      <td>0.480484</td>\n",
       "      <td>0.478450</td>\n",
       "      <td>2.132517</td>\n",
       "      <td>0.496890</td>\n",
       "      <td>...</td>\n",
       "      <td>0.416648</td>\n",
       "      <td>1.054234</td>\n",
       "      <td>0.495649</td>\n",
       "      <td>0.499440</td>\n",
       "      <td>18.540618</td>\n",
       "      <td>3.894628</td>\n",
       "      <td>0.495944</td>\n",
       "      <td>0.443636</td>\n",
       "      <td>0.468172</td>\n",
       "      <td>0.490780</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>15.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>30.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>34.000000</td>\n",
       "      <td>11.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>60.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>50.000000</td>\n",
       "      <td>13.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>90.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>64.000000</td>\n",
       "      <td>16.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>1428.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.00000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>54.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>8 rows × 31 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "             basinc        nwspol       polintr          vote       sgnptit  \\\n",
       "count  39400.000000  39400.000000  39400.000000  39400.000000  39400.000000   \n",
       "mean       0.522919     86.037157      0.469188      0.776117      0.256929   \n",
       "std        0.499481    140.964876      0.499056      0.416850      0.436945   \n",
       "min        0.000000      0.000000      0.000000      0.000000      0.000000   \n",
       "25%        0.000000     30.000000      0.000000      1.000000      0.000000   \n",
       "50%        1.000000     60.000000      0.000000      1.000000      0.000000   \n",
       "75%        1.000000     90.000000      1.000000      1.000000      1.000000   \n",
       "max        1.000000   1428.000000      1.000000      1.000000      1.000000   \n",
       "\n",
       "          pstplonl       trstplt       trstprt       lrscale        stfgov  \\\n",
       "count  39400.00000  39400.000000  39400.000000  39400.000000  39400.000000   \n",
       "mean       0.17264      0.361650      0.354772      1.981168      0.444264   \n",
       "std        0.37794      0.480484      0.478450      2.132517      0.496890   \n",
       "min        0.00000      0.000000      0.000000      0.000000      0.000000   \n",
       "25%        0.00000      0.000000      0.000000      0.000000      0.000000   \n",
       "50%        0.00000      0.000000      0.000000      1.000000      0.000000   \n",
       "75%        0.00000      1.000000      1.000000      5.000000      1.000000   \n",
       "max        1.00000      1.000000      1.000000      5.000000      1.000000   \n",
       "\n",
       "       ...       smdfslv       ipeqopt       dfincac          gndr  \\\n",
       "count  ...  39400.000000  39400.000000  39400.000000  39400.000000   \n",
       "mean   ...      0.776421      2.160711      0.565863      0.476218   \n",
       "std    ...      0.416648      1.054234      0.495649      0.499440   \n",
       "min    ...      0.000000      1.000000      0.000000      0.000000   \n",
       "25%    ...      1.000000      1.000000      0.000000      0.000000   \n",
       "50%    ...      1.000000      2.000000      1.000000      0.000000   \n",
       "75%    ...      1.000000      3.000000      1.000000      1.000000   \n",
       "max    ...      1.000000      6.000000      1.000000      1.000000   \n",
       "\n",
       "               agea        eduyrs       sbstrec       sbprvpv       sbeqsoc  \\\n",
       "count  39400.000000  39400.000000  39400.000000  39400.000000  39400.000000   \n",
       "mean      49.435990     13.011066      0.563604      0.730635      0.675558   \n",
       "std       18.540618      3.894628      0.495944      0.443636      0.468172   \n",
       "min       15.000000      0.000000      0.000000      0.000000      0.000000   \n",
       "25%       34.000000     11.000000      0.000000      0.000000      0.000000   \n",
       "50%       50.000000     13.000000      1.000000      1.000000      1.000000   \n",
       "75%       64.000000     16.000000      1.000000      1.000000      1.000000   \n",
       "max      100.000000     54.000000      1.000000      1.000000      1.000000   \n",
       "\n",
       "             sblazy  \n",
       "count  39400.000000  \n",
       "mean       0.595609  \n",
       "std        0.490780  \n",
       "min        0.000000  \n",
       "25%        0.000000  \n",
       "50%        1.000000  \n",
       "75%        1.000000  \n",
       "max        1.000000  \n",
       "\n",
       "[8 rows x 31 columns]"
      ]
     },
     "execution_count": 312,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_pol.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 209,
   "metadata": {},
   "outputs": [],
   "source": [
    "#soc_data[\"cntry\"] = ess_de[\"cntry\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 211,
   "metadata": {},
   "outputs": [],
   "source": [
    "# save the DataFrame to a CSV file\n",
    "#soc_data.to_csv('ALL_soc_data.csv', index=False)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "PRE-PROCESSING ctd."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "1 - uempla"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "DOING LAST 7 DAYS: UNEMPLOYED, ACTIVELY LOOKING FOR JOB"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 313,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0    37803\n",
      "1     1597\n",
      "Name: uempla, dtype: int64\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "print(ess_de['uempla'].value_counts())\n",
    "sns.countplot(x='uempla', data=ess_de, palette='Set2')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "2 - uempli"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "DOING LAST 7 DAYS: UNEMPLOYED, NOT ACTIVELY LOOKING FOR JOB"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 314,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0    38669\n",
      "1      731\n",
      "Name: uempli, dtype: int64\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "print(ess_de['uempli'].value_counts())\n",
    "sns.countplot(x='uempli', data=ess_de, palette='Set2')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "3 - dsbld"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "DOING LAST 7 DAYS: PERMANENTLY SICK OR DISABLED"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 315,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0    38062\n",
      "1     1338\n",
      "Name: dsbld, dtype: int64\n"
     ]
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAZIAAAEGCAYAAABPdROvAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjMuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8vihELAAAACXBIWXMAAAsTAAALEwEAmpwYAAAVVElEQVR4nO3df6xf9X3f8ecrdka8JhB+XJhrOzMKXjWDEiMsz1q0iYVquJkqkwq6Gy3B26w5YmRrpEwtdH+UqrIUthFUumLJEQSbZjEWaYbXhnUUkmXVmN1L5gKGIK4KDTf2sBMIOOrwZOe9P76f23x9+fpy7ePvvb65z4d09D3f9zmfz/dzIqNXzvmce06qCkmSztS75noAkqT5zSCRJHVikEiSOjFIJEmdGCSSpE4Wz/UAZtsll1xSK1eunOthSNK88tRTT32/qkYGbVtwQbJy5UrGxsbmehiSNK8k+YtTbfPSliSpE4NEktSJQSJJ6sQgkSR1YpBIkjoxSCRJnRgkkqRODBJJUicGiSSpkwX3l+1nw+ce3TnXQ9A56K5fuHmuhyDNCc9IJEmdGCSSpE4MEklSJwaJJKkTg0SS1IlBIknqxCCRJHVikEiSOjFIJEmdGCSSpE4MEklSJwaJJKmToQVJkvck2Zfkz5IcSPKbrX5Hku8l2d+Wj/W1uT3JeJIXklzfV78myTNt2z1J0urnJXmo1fcmWTms45EkDTbMM5JjwEer6sPAGmBDkvVt291VtaYtXwdIshoYBa4ENgD3JlnU9t8GbAFWtWVDq28GXq+qK4C7gTuHeDySpAGGFiTV86P29d1tqWmabAR2VdWxqnoJGAfWJVkKnF9VT1ZVATuBG/ra7GjrDwPXTZ6tSJJmx1DnSJIsSrIfOAw8VlV726bPJHk6yf1JLmy1ZcArfc0nWm1ZW59aP6lNVR0H3gAuHjCOLUnGkowdOXLk7BycJAkYcpBU1YmqWgMsp3d2cRW9y1QfpHe56xBwV9t90JlETVOfrs3UcWyvqrVVtXZkZOS0jkGSNL1ZuWurqn4IfBPYUFWvtoD5MfBFYF3bbQJY0ddsOXCw1ZcPqJ/UJsli4ALgteEchSRpkGHetTWS5P1tfQnw88B32pzHpI8Dz7b1PcBouxPrcnqT6vuq6hBwNMn6Nv9xM/BIX5tNbf1G4Ik2jyJJmiXDfGf7UmBHu/PqXcDuqvqDJA8mWUPvEtTLwKcBqupAkt3Ac8Bx4NaqOtH6ugV4AFgCPNoWgPuAB5OM0zsTGR3i8UiSBhhakFTV08DVA+qfmqbNVmDrgPoYcNWA+lvATd1GKknqwr9slyR1YpBIkjoxSCRJnRgkkqRODBJJUicGiSSpE4NEktSJQSJJ6sQgkSR1YpBIkjoxSCRJnRgkkqRODBJJUicGiSSpE4NEktSJQSJJ6sQgkSR1YpBIkjoZWpAkeU+SfUn+LMmBJL/Z6hcleSzJi+3zwr42tycZT/JCkuv76tckeaZtuydJWv28JA+1+t4kK4d1PJKkwYZ5RnIM+GhVfRhYA2xIsh64DXi8qlYBj7fvJFkNjAJXAhuAe5Msan1tA7YAq9qyodU3A69X1RXA3cCdQzweSdIAQwuS6vlR+/ruthSwEdjR6juAG9r6RmBXVR2rqpeAcWBdkqXA+VX1ZFUVsHNKm8m+HgaumzxbkSTNjqHOkSRZlGQ/cBh4rKr2ApdV1SGA9nlp230Z8Epf84lWW9bWp9ZPalNVx4E3gIuHcjCSpIGGGiRVdaKq1gDL6Z1dXDXN7oPOJGqa+nRtTu442ZJkLMnYkSNH3mHUkqTTMSt3bVXVD4Fv0pvbeLVdrqJ9Hm67TQAr+potBw62+vIB9ZPaJFkMXAC8NuD3t1fV2qpaOzIycnYOSpIEDPeurZEk72/rS4CfB74D7AE2td02AY+09T3AaLsT63J6k+r72uWvo0nWt/mPm6e0mezrRuCJNo8iSZoli4fY91JgR7vz6l3A7qr6gyRPAruTbAa+C9wEUFUHkuwGngOOA7dW1YnW1y3AA8AS4NG2ANwHPJhknN6ZyOgQj0eSNMDQgqSqngauHlD/AXDdKdpsBbYOqI8Bb5tfqaq3aEEkSZob/mW7JKkTg0SS1IlBIknqxCCRJHVikEiSOjFIJEmdGCSSpE4MEklSJwaJJKkTg0SS1IlBIknqxCCRJHVikEiSOjFIJEmdGCSSpE4MEklSJwaJJKkTg0SS1IlBIknqZGhBkmRFkm8keT7JgSS/0up3JPlekv1t+Vhfm9uTjCd5Icn1ffVrkjzTtt2TJK1+XpKHWn1vkpXDOh5J0mDDPCM5Dnyuqv42sB64Ncnqtu3uqlrTlq8DtG2jwJXABuDeJIva/tuALcCqtmxo9c3A61V1BXA3cOcQj0eSNMDQgqSqDlXVt9v6UeB5YNk0TTYCu6rqWFW9BIwD65IsBc6vqierqoCdwA19bXa09YeB6ybPViRJs2NW5kjaJaergb2t9JkkTye5P8mFrbYMeKWv2USrLWvrU+sntamq48AbwMUDfn9LkrEkY0eOHDk7ByVJAmYhSJK8F/gq8NmqepPeZaoPAmuAQ8Bdk7sOaF7T1Kdrc3KhantVra2qtSMjI6d3AJKkaQ01SJK8m16IfLmqfh+gql6tqhNV9WPgi8C6tvsEsKKv+XLgYKsvH1A/qU2SxcAFwGvDORpJ0iDDvGsrwH3A81X1hb760r7dPg4829b3AKPtTqzL6U2q76uqQ8DRJOtbnzcDj/S12dTWbwSeaPMokqRZsniIfX8E+BTwTJL9rfbrwCeSrKF3Cepl4NMAVXUgyW7gOXp3fN1aVSdau1uAB4AlwKNtgV5QPZhknN6ZyOgQj0eSNMDQgqSq/oTBcxhfn6bNVmDrgPoYcNWA+lvATR2GKUnqyL9slyR1YpBIkjoxSCRJnRgkkqRODBJJUicGiSSpE4NEktSJQSJJ6sQgkSR1YpBIkjqZUZAkeXwmNUnSwjPts7aSvAf468Al7QVUk8/OOh/42SGPTZI0D7zTQxs/DXyWXmg8xU+C5E3gd4c3LEnSfDFtkFTVbwO/neRfVdXvzNKYJEnzyIweI19Vv5Pk7wIr+9tU1c4hjUuSNE/MKEiSPEjvPev7gcmXTRVgkEjSAjfTF1utBVb7GltJ0lQz/TuSZ4G/McyBSJLmp5kGySXAc0n+KMmeyWW6BklWJPlGkueTHEjyK61+UZLHkrzYPi/sa3N7kvEkLyS5vq9+TZJn2rZ7kqTVz0vyUKvvTbLytP8XkCR1MtNLW3ecQd/Hgc9V1beTvA94KsljwD8FHq+qzye5DbgN+LUkq4FR4Ep6txv/cZK/VVUngG3AFuB/0Xvn+wbgUWAz8HpVXZFkFLgT+MdnMFZJ0hma6V1b//10O66qQ8Chtn40yfPAMmAjcG3bbQfwTeDXWn1XVR0DXkoyDqxL8jJwflU9CZBkJ3ADvSDZyE9C7mHgPyaJczmSNHtm+oiUo0nebMtbSU4keXOmP9IuOV0N7AUuayEzGTaXtt2WAa/0NZtotWVtfWr9pDZVdRx4A7h4wO9vSTKWZOzIkSMzHbYkaQZmekbyvv7vSW4A1s2kbZL3Al8FPltVb7bpjYG7DvrpaerTtTm5ULUd2A6wdu1az1Yk6Sw6o6f/VtV/Bj76TvsleTe9EPlyVf1+K7+aZGnbvhQ43OoTwIq+5suBg62+fED9pDZJFgMXAK+d/hFJks7UTC9t/VLfcmOSzzPg//lPaRPgPuD5qvpC36Y9wKa2vgl4pK8+2u7EuhxYBexrl7+OJlnf+rx5SpvJvm4EnnB+RJJm10zv2vrFvvXjwMv0Jrqn8xHgU8AzSfa32q8Dnwd2J9kMfBe4CaCqDiTZDTzXfuPWdscWwC3AA8ASepPsj7b6fcCDbWL+NXp3fUmSZtFM50j+2el2XFV/wuA5DIDrTtFmK7B1QH0MuGpA/S1aEEmS5sZML20tT/K1JIeTvJrkq0mWv3NLSdJPu5lOtn+J3nzEz9K75fa/tJokaYGbaZCMVNWXqup4Wx4ARoY4LknSPDHTIPl+kk8mWdSWTwI/GObAJEnzw0yD5J8Dvwz8H3qPPbkROO0JeEnST5+Z3v77W8Cmqnodek/wBf4DvYCRJC1gMz0j+dBkiABU1Wv0np0lSVrgZhok75ry3pCLmPnZjCTpp9hMw+Au4H8meZjeo1F+mQF/OChJWnhm+pftO5OM0XtQY4BfqqrnhjoySdK8MOPLUy04DA9J0knO6DHykiRNMkgkSZ0YJJKkTgwSSVInBokkqRODRJLUiUEiSepkaEGS5P72RsVn+2p3JPlekv1t+VjfttuTjCd5Icn1ffVrkjzTtt2TJK1+XpKHWn1vkpXDOhZJ0qkN84zkAWDDgPrdVbWmLV8HSLIaGAWubG3uTbKo7b8N2AKsastkn5uB16vqCuBu4M5hHYgk6dSGFiRV9S3gtRnuvhHYVVXHquolYBxYl2QpcH5VPVlVBewEbuhrs6OtPwxcN3m2IkmaPXMxR/KZJE+3S1+TTxReBrzSt89Eqy1r61PrJ7WpquPAG8DFg34wyZYkY0nGjhw5cvaORJI060GyDfggsIbemxbvavVBZxI1TX26Nm8vVm2vqrVVtXZkxFfNS9LZNKtBUlWvVtWJqvox8EVgXds0Aazo23U5cLDVlw+on9QmyWLgAmZ+KU2SdJbMapC0OY9JHwcm7+jaA4y2O7Eupzepvq+qDgFHk6xv8x83A4/0tdnU1m8EnmjzKJKkWTS0txwm+QpwLXBJkgngN4Brk6yhdwnqZeDTAFV1IMlueo+pPw7cWlUnWle30LsDbAnwaFsA7gMeTDJO70xkdFjHIkk6taEFSVV9YkD5vmn238qAty5W1Rhw1YD6W8BNXcYoSerOv2yXJHVikEiSOjFIJEmdGCSSpE4MEklSJwaJJKkTg0SS1IlBIknqxCCRJHVikEiSOjFIJEmdGCSSpE4MEklSJwaJJKkTg0SS1IlBIknqxCCRJHVikEiSOhlakCS5P8nhJM/21S5K8liSF9vnhX3bbk8ynuSFJNf31a9J8kzbdk+StPp5SR5q9b1JVg7rWCRJpzbMM5IHgA1TarcBj1fVKuDx9p0kq4FR4MrW5t4ki1qbbcAWYFVbJvvcDLxeVVcAdwN3Du1IJEmnNLQgqapvAa9NKW8EdrT1HcANffVdVXWsql4CxoF1SZYC51fVk1VVwM4pbSb7ehi4bvJsRZI0e2Z7juSyqjoE0D4vbfVlwCt9+0202rK2PrV+UpuqOg68AVw86EeTbEkylmTsyJEjZ+lQJElw7ky2DzqTqGnq07V5e7Fqe1Wtraq1IyMjZzhESdIgsx0kr7bLVbTPw60+Aazo2285cLDVlw+on9QmyWLgAt5+KU2SNGSzHSR7gE1tfRPwSF99tN2JdTm9SfV97fLX0STr2/zHzVPaTPZ1I/BEm0eRJM2ixcPqOMlXgGuBS5JMAL8BfB7YnWQz8F3gJoCqOpBkN/AccBy4tapOtK5uoXcH2BLg0bYA3Ac8mGSc3pnI6LCORZJ0akMLkqr6xCk2XXeK/bcCWwfUx4CrBtTfogWRJGnunCuT7ZKkecogkSR1YpBIkjoxSCRJnRgkkqRODBJJUicGiSSpE4NEktSJQSJJ6sQgkSR1YpBIkjoxSCRJnRgkkqRODBJJUicGiSSpE4NEktSJQSJJ6sQgkSR1MidBkuTlJM8k2Z9krNUuSvJYkhfb54V9+9+eZDzJC0mu76tf0/oZT3JPkszF8UjSQjaXZyT/oKrWVNXa9v024PGqWgU83r6TZDUwClwJbADuTbKotdkGbAFWtWXDLI5fksS5dWlrI7Cjre8Abuir76qqY1X1EjAOrEuyFDi/qp6sqgJ29rWRJM2SuQqSAv5bkqeSbGm1y6rqEED7vLTVlwGv9LWdaLVlbX1qXZI0ixbP0e9+pKoOJrkUeCzJd6bZd9C8R01Tf3sHvbDaAvCBD3zgdMcqSZrGnJyRVNXB9nkY+BqwDni1Xa6ifR5uu08AK/qaLwcOtvryAfVBv7e9qtZW1dqRkZGzeSiStODNepAk+Zkk75tcB/4h8CywB9jUdtsEPNLW9wCjSc5Lcjm9SfV97fLX0STr291aN/e1kSTNkrm4tHUZ8LV2p+5i4D9V1X9N8qfA7iSbge8CNwFU1YEku4HngOPArVV1ovV1C/AAsAR4tC2SpFk060FSVX8OfHhA/QfAdadosxXYOqA+Blx1tscoSZq5c+n2X0nSPGSQSJI6MUgkSZ0YJJKkTgwSSVInBokkqRODRJLUiUEiSerEIJEkdWKQSJI6MUgkSZ0YJJKkTgwSSVInBokkqRODRJLUyVy9s13SEBze9qtzPQSdgy695d8NtX/PSCRJnRgkkqRODBJJUifzPkiSbEjyQpLxJLfN9XgkaaGZ10GSZBHwu8AvAKuBTyRZPbejkqSFZV4HCbAOGK+qP6+q/wfsAjbO8ZgkaUGZ77f/LgNe6fs+AfydqTsl2QJsaV9/lOSFWRjbQnEJ8P25HsS54Atsmush6GT+25z0L//92ejlb55qw3wPkgyo1dsKVduB7cMfzsKTZKyq1s71OKSp/Lc5e+b7pa0JYEXf9+XAwTkaiyQtSPM9SP4UWJXk8iR/DRgF9szxmCRpQZnXl7aq6niSzwB/BCwC7q+qA3M8rIXGS4Y6V/lvc5ak6m1TCpIkzdh8v7QlSZpjBokkqRODRGfER9PoXJXk/iSHkzw712NZKAwSnTYfTaNz3APAhrkexEJikOhM+GganbOq6lvAa3M9joXEINGZGPRommVzNBZJc8wg0ZmY0aNpJC0MBonOhI+mkfRXDBKdCR9NI+mvGCQ6bVV1HJh8NM3zwG4fTaNzRZKvAE8CP5dkIsnmuR7TTzsfkSJJ6sQzEklSJwaJJKkTg0SS1IlBIknqxCCRJHVikEizIMkdSf7N6WxLsvJUT7BN8s0ka8/2OKUzYZBIkjoxSKQhSfJv2ztb/hj4uVb710meS/J0kl19u384yRNJXkzyLwb0tSTJrtbuIWDJLB2G9I4Wz/UApJ9GSa6h9+iYq+n9d/Zt4CngNuDyqjqW5P19TT4ErAd+BvjfSf5wSpe3AH9ZVR9K8qHWn3RO8IxEGo6/B3ytqv6yqt7kJ88iexr4cpJPAsf79n+kqv5vVX0f+Aa9d770+/vA7wFU1dOtH+mcYJBIwzPo+UP/iN7bJa8Bnkqy+BT7Dmrr84x0TjJIpOH4FvDxNrfxPuAX6f33tqKqvgH8KvB+4L1t/41J3pPkYuBaek9YntrfPwFIchW9S2HSOcE5EmkIqurbbVJ8P/AXwP+gd0bxe0kuoPdysLur6odJAPYBfwh8APitqjqYZGVfl9uALyV5uvW5b5YORXpHPv1XktSJl7YkSZ0YJJKkTgwSSVInBokkqRODRJLUiUEiSerEIJEkdfL/AcsZHMsl3DH/AAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "print(ess_de[\"dsbld\"].value_counts())\n",
    "sns.countplot(x=\"dsbld\", data=ess_de, palette=\"Set2\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "4 - rtrd"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "DOING LAST 7 DAYS: RETIRED"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 316,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0    28984\n",
      "1    10416\n",
      "Name: rtrd, dtype: int64\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "print(ess_de[\"rtrd\"].value_counts())\n",
    "sns.countplot(x=\"rtrd\", data=ess_de, palette=\"Set2\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "5 - uemp3m"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "EVER UNEMPLOYED AND SEEKING WORK FOR A PERIOD MORE THAN THREE MONTHS"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 317,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2    28052\n",
      "1    11166\n",
      "7      109\n",
      "8       68\n",
      "9        5\n",
      "Name: uemp3m, dtype: int64\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "print(ess_de[\"uemp3m\"].value_counts())\n",
    "sns.countplot(x=\"uemp3m\", data=ess_de, palette=\"Set2\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 318,
   "metadata": {},
   "outputs": [],
   "source": [
    "ess_de['uemp3m'] = ess_de['uemp3m'].replace([2, 7], 0)\n",
    "ess_de['uemp3m'] = ess_de['uemp3m'].replace([8,9], 0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 319,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0    28234\n",
      "1    11166\n",
      "Name: uemp3m, dtype: int64\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "print(ess_de[\"uemp3m\"].value_counts())\n",
    "sns.countplot(x=\"uemp3m\", data=ess_de, palette=\"Set2\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 320,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_pol[\"uemp3m\"] = ess_de[\"uemp3m\"]\n",
    "df_pol[\"rtrd\"] = ess_de[\"rtrd\"]\n",
    "df_pol[\"dsbld\"] = ess_de[\"dsbld\"]\n",
    "df_pol[\"uempli\"] = ess_de[\"uempli\"]\n",
    "df_pol[\"uempla\"] = ess_de[\"uempla\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "#econ_var = ess_de[['uemp3m', 'rtrd', 'dsbld', 'uempli', 'uempla']].copy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 321,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>basinc</th>\n",
       "      <th>nwspol</th>\n",
       "      <th>polintr</th>\n",
       "      <th>vote</th>\n",
       "      <th>sgnptit</th>\n",
       "      <th>pstplonl</th>\n",
       "      <th>trstplt</th>\n",
       "      <th>trstprt</th>\n",
       "      <th>lrscale</th>\n",
       "      <th>stfgov</th>\n",
       "      <th>...</th>\n",
       "      <th>eduyrs</th>\n",
       "      <th>sbstrec</th>\n",
       "      <th>sbprvpv</th>\n",
       "      <th>sbeqsoc</th>\n",
       "      <th>sblazy</th>\n",
       "      <th>uemp3m</th>\n",
       "      <th>rtrd</th>\n",
       "      <th>dsbld</th>\n",
       "      <th>uempli</th>\n",
       "      <th>uempla</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>39400.000000</td>\n",
       "      <td>39400.000000</td>\n",
       "      <td>39400.000000</td>\n",
       "      <td>39400.000000</td>\n",
       "      <td>39400.000000</td>\n",
       "      <td>39400.00000</td>\n",
       "      <td>39400.000000</td>\n",
       "      <td>39400.000000</td>\n",
       "      <td>39400.000000</td>\n",
       "      <td>39400.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>39400.000000</td>\n",
       "      <td>39400.000000</td>\n",
       "      <td>39400.000000</td>\n",
       "      <td>39400.000000</td>\n",
       "      <td>39400.000000</td>\n",
       "      <td>39400.000000</td>\n",
       "      <td>39400.000000</td>\n",
       "      <td>39400.000000</td>\n",
       "      <td>39400.000000</td>\n",
       "      <td>39400.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>0.522919</td>\n",
       "      <td>86.037157</td>\n",
       "      <td>0.469188</td>\n",
       "      <td>0.776117</td>\n",
       "      <td>0.256929</td>\n",
       "      <td>0.17264</td>\n",
       "      <td>0.361650</td>\n",
       "      <td>0.354772</td>\n",
       "      <td>1.981168</td>\n",
       "      <td>0.444264</td>\n",
       "      <td>...</td>\n",
       "      <td>13.011066</td>\n",
       "      <td>0.563604</td>\n",
       "      <td>0.730635</td>\n",
       "      <td>0.675558</td>\n",
       "      <td>0.595609</td>\n",
       "      <td>0.283401</td>\n",
       "      <td>0.264365</td>\n",
       "      <td>0.033959</td>\n",
       "      <td>0.018553</td>\n",
       "      <td>0.040533</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>0.499481</td>\n",
       "      <td>140.964876</td>\n",
       "      <td>0.499056</td>\n",
       "      <td>0.416850</td>\n",
       "      <td>0.436945</td>\n",
       "      <td>0.37794</td>\n",
       "      <td>0.480484</td>\n",
       "      <td>0.478450</td>\n",
       "      <td>2.132517</td>\n",
       "      <td>0.496890</td>\n",
       "      <td>...</td>\n",
       "      <td>3.894628</td>\n",
       "      <td>0.495944</td>\n",
       "      <td>0.443636</td>\n",
       "      <td>0.468172</td>\n",
       "      <td>0.490780</td>\n",
       "      <td>0.450655</td>\n",
       "      <td>0.441000</td>\n",
       "      <td>0.181127</td>\n",
       "      <td>0.134943</td>\n",
       "      <td>0.197208</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>30.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>11.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>60.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>13.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>90.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>16.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>1428.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.00000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>54.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>8 rows × 36 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "             basinc        nwspol       polintr          vote       sgnptit  \\\n",
       "count  39400.000000  39400.000000  39400.000000  39400.000000  39400.000000   \n",
       "mean       0.522919     86.037157      0.469188      0.776117      0.256929   \n",
       "std        0.499481    140.964876      0.499056      0.416850      0.436945   \n",
       "min        0.000000      0.000000      0.000000      0.000000      0.000000   \n",
       "25%        0.000000     30.000000      0.000000      1.000000      0.000000   \n",
       "50%        1.000000     60.000000      0.000000      1.000000      0.000000   \n",
       "75%        1.000000     90.000000      1.000000      1.000000      1.000000   \n",
       "max        1.000000   1428.000000      1.000000      1.000000      1.000000   \n",
       "\n",
       "          pstplonl       trstplt       trstprt       lrscale        stfgov  \\\n",
       "count  39400.00000  39400.000000  39400.000000  39400.000000  39400.000000   \n",
       "mean       0.17264      0.361650      0.354772      1.981168      0.444264   \n",
       "std        0.37794      0.480484      0.478450      2.132517      0.496890   \n",
       "min        0.00000      0.000000      0.000000      0.000000      0.000000   \n",
       "25%        0.00000      0.000000      0.000000      0.000000      0.000000   \n",
       "50%        0.00000      0.000000      0.000000      1.000000      0.000000   \n",
       "75%        0.00000      1.000000      1.000000      5.000000      1.000000   \n",
       "max        1.00000      1.000000      1.000000      5.000000      1.000000   \n",
       "\n",
       "       ...        eduyrs       sbstrec       sbprvpv       sbeqsoc  \\\n",
       "count  ...  39400.000000  39400.000000  39400.000000  39400.000000   \n",
       "mean   ...     13.011066      0.563604      0.730635      0.675558   \n",
       "std    ...      3.894628      0.495944      0.443636      0.468172   \n",
       "min    ...      0.000000      0.000000      0.000000      0.000000   \n",
       "25%    ...     11.000000      0.000000      0.000000      0.000000   \n",
       "50%    ...     13.000000      1.000000      1.000000      1.000000   \n",
       "75%    ...     16.000000      1.000000      1.000000      1.000000   \n",
       "max    ...     54.000000      1.000000      1.000000      1.000000   \n",
       "\n",
       "             sblazy        uemp3m          rtrd         dsbld        uempli  \\\n",
       "count  39400.000000  39400.000000  39400.000000  39400.000000  39400.000000   \n",
       "mean       0.595609      0.283401      0.264365      0.033959      0.018553   \n",
       "std        0.490780      0.450655      0.441000      0.181127      0.134943   \n",
       "min        0.000000      0.000000      0.000000      0.000000      0.000000   \n",
       "25%        0.000000      0.000000      0.000000      0.000000      0.000000   \n",
       "50%        1.000000      0.000000      0.000000      0.000000      0.000000   \n",
       "75%        1.000000      1.000000      1.000000      0.000000      0.000000   \n",
       "max        1.000000      1.000000      1.000000      1.000000      1.000000   \n",
       "\n",
       "             uempla  \n",
       "count  39400.000000  \n",
       "mean       0.040533  \n",
       "std        0.197208  \n",
       "min        0.000000  \n",
       "25%        0.000000  \n",
       "50%        0.000000  \n",
       "75%        0.000000  \n",
       "max        1.000000  \n",
       "\n",
       "[8 rows x 36 columns]"
      ]
     },
     "execution_count": 321,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_pol.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "6 - lkuemp"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "HOW LIKELY UNEMPLOYED AND LOOKING FOR WORK NEXT 12 MONTHS"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 322,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1     14373\n",
      "2      9629\n",
      "55     8127\n",
      "3      3852\n",
      "4      2409\n",
      "88      906\n",
      "77       98\n",
      "99        6\n",
      "Name: lkuemp, dtype: int64\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "print(ess_de[\"lkuemp\"].value_counts())\n",
    "sns.countplot(x=\"lkuemp\", data=ess_de, palette=\"Set2\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 323,
   "metadata": {},
   "outputs": [],
   "source": [
    "ess_de['lkuemp'] = ess_de['lkuemp'].replace([1, 2], 0)\n",
    "ess_de['lkuemp'] = ess_de['lkuemp'].replace([3, 4], 1)\n",
    "ess_de['lkuemp'] = ess_de['lkuemp'].replace([77, 88, 99], 5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 324,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0     24002\n",
      "55     8127\n",
      "1      6261\n",
      "5      1010\n",
      "Name: lkuemp, dtype: int64\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "print(ess_de[\"lkuemp\"].value_counts())\n",
    "sns.countplot(x=\"lkuemp\", data=ess_de, palette=\"Set2\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 325,
   "metadata": {},
   "outputs": [],
   "source": [
    "ess_de['lkuemp'] = ess_de['lkuemp'].replace([5], 55)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 326,
   "metadata": {},
   "outputs": [],
   "source": [
    "num_fives = (ess_de['lkuemp'] == 55).sum()\n",
    "\n",
    "# calculate the number of 5 values to replace with 0 and 1\n",
    "num_replace_zero = num_fives // 2\n",
    "num_replace_one = num_fives - num_replace_zero\n",
    "\n",
    "# get the indices of the 5 values to replace\n",
    "replace_indices_zero = np.random.choice(ess_de[ess_de['lkuemp'] == 55].index, num_replace_zero, replace=False)\n",
    "replace_indices_one = np.random.choice(ess_de[ess_de['lkuemp'] == 55].index, num_replace_one, replace=False)\n",
    "\n",
    "# replace the 5 values with 0 and 1\n",
    "ess_de.loc[replace_indices_zero, 'lkuemp'] = 0\n",
    "ess_de.loc[replace_indices_one, 'lkuemp'] = 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 327,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_pol[\"lkuemp\"] = ess_de[\"lkuemp\"]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "7 - uentrjb"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 328,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "4    12352\n",
      "2    11579\n",
      "3     9006\n",
      "1     3185\n",
      "5     2478\n",
      "8      746\n",
      "7       49\n",
      "9        5\n",
      "Name: uentrjb, dtype: int64\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "print(ess_de[\"uentrjb\"].value_counts())\n",
    "sns.countplot(x=\"uentrjb\", data=ess_de, palette=\"Set2\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 329,
   "metadata": {},
   "outputs": [],
   "source": [
    "ess_de['uentrjb'] = ess_de['uentrjb'].replace([2], 1)\n",
    "ess_de['uentrjb'] = ess_de['uentrjb'].replace([4,5], 0)\n",
    "ess_de['uentrjb'] = ess_de['uentrjb'].replace([7,8,9], 3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 341,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1    21301\n",
      "0    18099\n",
      "Name: uentrjb, dtype: int64\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "print(ess_de[\"uentrjb\"].value_counts())\n",
    "sns.countplot(x=\"uentrjb\", data=ess_de, palette=\"Set2\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 340,
   "metadata": {},
   "outputs": [],
   "source": [
    "num_fives = (ess_de['uentrjb'] == 3).sum()\n",
    "\n",
    "# calculate the number of 5 values to replace with 0 and 1\n",
    "num_replace_zero = num_fives // 2\n",
    "num_replace_one = num_fives - num_replace_zero\n",
    "\n",
    "# get the indices of the 5 values to replace\n",
    "replace_indices_zero = np.random.choice(ess_de[ess_de['uentrjb'] == 3].index, num_replace_zero, replace=False)\n",
    "replace_indices_one = np.random.choice(ess_de[ess_de['uentrjb'] == 3].index, num_replace_one, replace=False)\n",
    "\n",
    "# replace the 5 values with 0 and 1\n",
    "ess_de.loc[replace_indices_zero, 'uentrjb'] = 0\n",
    "ess_de.loc[replace_indices_one, 'uentrjb'] = 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 343,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_pol[\"uentrjb\"] = ess_de[\"uentrjb\"]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "8 - lbenent"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "MANY WITH VERY LOW INCOMES GET LESS BENEFIT THAN LEGALLY ENTITLED TO"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 344,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2    14090\n",
      "3    10748\n",
      "4     6864\n",
      "8     4049\n",
      "1     2646\n",
      "5      937\n",
      "7       57\n",
      "9        9\n",
      "Name: lbenent, dtype: int64\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "print(ess_de[\"lbenent\"].value_counts())\n",
    "sns.countplot(x=\"lbenent\", data=ess_de, palette=\"Set2\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 345,
   "metadata": {},
   "outputs": [],
   "source": [
    "ess_de['lbenent'] = ess_de['lbenent'].replace([2], 1)\n",
    "ess_de['lbenent'] = ess_de['lbenent'].replace([4,5], 0)\n",
    "ess_de['lbenent'] = ess_de['lbenent'].replace([7,8,9], 3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 359,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1    26682\n",
      "0    12718\n",
      "Name: lbenent, dtype: int64\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "print(ess_de[\"lbenent\"].value_counts())\n",
    "sns.countplot(x=\"lbenent\", data=ess_de, palette=\"Set2\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 358,
   "metadata": {},
   "outputs": [],
   "source": [
    "num_fives = (ess_de['lbenent'] == 3).sum()\n",
    "\n",
    "# calculate the number of 5 values to replace with 0 and 1\n",
    "num_replace_zero = num_fives // 2\n",
    "num_replace_one = num_fives - num_replace_zero\n",
    "\n",
    "# get the indices of the 5 values to replace\n",
    "replace_indices_zero = np.random.choice(ess_de[ess_de['lbenent'] == 3].index, num_replace_zero, replace=False)\n",
    "replace_indices_one = np.random.choice(ess_de[ess_de['lbenent'] == 3].index, num_replace_one, replace=False)\n",
    "\n",
    "# replace the 5 values with 0 and 1\n",
    "ess_de.loc[replace_indices_zero, 'lbenent'] = 0\n",
    "ess_de.loc[replace_indices_one, 'lbenent'] = 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 360,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_pol[\"lbenent\"] = ess_de[\"lbenent\"]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "9 - bennent"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 361,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2    16797\n",
      "3     8258\n",
      "4     6053\n",
      "1     5261\n",
      "8     2215\n",
      "5      756\n",
      "7       49\n",
      "9       11\n",
      "Name: bennent, dtype: int64\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "print(ess_de[\"bennent\"].value_counts())\n",
    "sns.countplot(x=\"bennent\", data=ess_de, palette=\"Set2\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 362,
   "metadata": {},
   "outputs": [],
   "source": [
    "ess_de['bennent'] = ess_de['bennent'].replace([2], 1)\n",
    "ess_de['bennent'] = ess_de['bennent'].replace([4,5], 0)\n",
    "ess_de['bennent'] = ess_de['bennent'].replace([7,8,9], 3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 371,
   "metadata": {},
   "outputs": [],
   "source": [
    "num_fives = (ess_de['bennent'] == 3).sum()\n",
    "\n",
    "# calculate the number of 5 values to replace with 0 and 1\n",
    "num_replace_zero = num_fives // 2\n",
    "num_replace_one = num_fives - num_replace_zero\n",
    "\n",
    "# get the indices of the 5 values to replace\n",
    "replace_indices_zero = np.random.choice(ess_de[ess_de['bennent'] == 3].index, num_replace_zero, replace=False)\n",
    "replace_indices_one = np.random.choice(ess_de[ess_de['bennent'] == 3].index, num_replace_one, replace=False)\n",
    "\n",
    "# replace the 5 values with 0 and 1\n",
    "ess_de.loc[replace_indices_zero, 'bennent'] = 0\n",
    "ess_de.loc[replace_indices_one, 'bennent'] = 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 372,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1    29085\n",
      "0    10315\n",
      "Name: bennent, dtype: int64\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "print(ess_de[\"bennent\"].value_counts())\n",
    "sns.countplot(x=\"bennent\", data=ess_de, palette=\"Set2\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 373,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_pol[\"bennent\"] = ess_de[\"bennent\"]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "10 - uemplap"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "PARTNER DOING LAST 7 DAYS: UNEMPLOYED, ACTIVELY LOOKING FOR JOB"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 374,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0    38740\n",
      "1      660\n",
      "Name: uemplap, dtype: int64\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "print(ess_de[\"uemplap\"].value_counts())\n",
    "sns.countplot(x=\"uemplap\", data=ess_de, palette=\"Set2\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 375,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_pol[\"uemplap\"] = ess_de[\"uemplap\"]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "11 - uemplip"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "PARTNER DOING LAST 7 DAYS: UNEMPLOYED, NOT ACTIVELY LOOKING FOR JOB"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 376,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0    39116\n",
      "1      284\n",
      "Name: uemplip, dtype: int64\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "print(ess_de[\"uemplip\"].value_counts())\n",
    "sns.countplot(x=\"uemplip\", data=ess_de, palette=\"Set2\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "not significant/discard"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "12 - dsbldp"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "PARTNER DOING LAST 7 DAYS: PERMANENTLY SICK OR DISABLED"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 377,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0    38800\n",
      "1      600\n",
      "Name: dsbldp, dtype: int64\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "print(ess_de[\"dsbldp\"].value_counts())\n",
    "sns.countplot(x=\"dsbldp\", data=ess_de, palette=\"Set2\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 378,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_pol[\"dsbldp\"] = ess_de[\"dsbldp\"]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "13 - rtrdp"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "PARTNER DOING LAST 7 DAYS: RETIRED"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 379,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0    33653\n",
      "1     5747\n",
      "Name: rtrdp, dtype: int64\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "print(ess_de[\"rtrdp\"].value_counts())\n",
    "sns.countplot(x=\"rtrdp\", data=ess_de, palette=\"Set2\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 380,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_pol[\"rtrdp\"] = ess_de[\"rtrdp\"]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "14 - stfeco"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 381,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5     6695\n",
      "7     6256\n",
      "6     6061\n",
      "4     4581\n",
      "3     3970\n",
      "8     3898\n",
      "2     2617\n",
      "0     1752\n",
      "1     1106\n",
      "9     1088\n",
      "88     684\n",
      "10     630\n",
      "77      57\n",
      "99       5\n",
      "Name: stfeco, dtype: int64\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "print(ess_de[\"stfeco\"].value_counts())\n",
    "sns.countplot(x=\"stfeco\", data=ess_de, palette=\"Set2\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 382,
   "metadata": {},
   "outputs": [],
   "source": [
    "ess_de['stfeco'] = ess_de['stfeco'].replace([1,2,3,4], 0)\n",
    "ess_de['stfeco'] = ess_de['stfeco'].replace([6,7,8,9,10], 1)\n",
    "ess_de['stfeco'] = ess_de['stfeco'].replace([77,88,99], 5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 394,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1    22903\n",
      "0    16497\n",
      "Name: stfeco, dtype: int64\n"
     ]
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAZIAAAEGCAYAAABPdROvAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjMuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8vihELAAAACXBIWXMAAAsTAAALEwEAmpwYAAAQJUlEQVR4nO3df6zddX3H8efLVhk6YfwoDFtcyex+ANtwdJXNuYAYqS4bzIGpidIoSQ1DMxIXA/6j2dJM5g8iTnBsIC3bxA7n6BJRCRLMNgJeDBm/xuyESdeOFiHIZsQV3/vjfq6eltvroZ977unxPh/JN+d73uf7+d73N7nJK5/v93u+J1WFJEkH6gXjbkCSNNkMEklSF4NEktTFIJEkdTFIJEldlo67gYV29NFH18qVK8fdhiRNlLvvvvvxqlo222eLLkhWrlzJ1NTUuNuQpImS5D/395mntiRJXQwSSVIXg0SS1MUgkSR1MUgkSV0MEklSF4NEktTFIJEkdTFIJEldFt0326UfZ7uueu+4W9BB6JgL/2yk+3dGIknqYpBIkroYJJKkLgaJJKmLQSJJ6mKQSJK6GCSSpC4GiSSpi0EiSepikEiSuhgkkqQuBokkqYtBIknqYpBIkroYJJKkLgaJJKmLQSJJ6mKQSJK6GCSSpC4GiSSpi0EiSepikEiSuowsSJIcn+S2JA8muT/JH7b6kUluSfL19nrEwJhLk2xL8lCSswbqpya5t312RZK0+iFJPtPqdyZZOarjkSTNbpQzkj3Ae6rqF4HTgIuSnAhcAtxaVauAW9t72mfrgJOAtcCVSZa0fV0FbABWtWVtq18APFlVrwAuBy4b4fFIkmYxsiCpqp1V9bW2/jTwILAcOBvY1DbbBJzT1s8GbqiqZ6rqYWAbsCbJccBhVXVHVRWweZ8xM/u6EThzZrYiSVoYC3KNpJ1yeiVwJ3BsVe2E6bABjmmbLQceHRi2vdWWt/V963uNqao9wFPAUbP8/Q1JppJM7d69e56OSpIECxAkSX4S+CxwcVV9e65NZ6nVHPW5xuxdqLq6qlZX1eply5b9qJYlSc/DSIMkyQuZDpG/qaq/b+XH2ukq2uuuVt8OHD8wfAWwo9VXzFLfa0ySpcDhwBPzfySSpP0Z5V1bAa4BHqyqjw58tBVY39bXAzcN1Ne1O7FOYPqi+l3t9NfTSU5r+zx/nzEz+zoX+HK7jiJJWiBLR7jvVwNvA+5Nck+rvQ/4ILAlyQXAN4HzAKrq/iRbgAeYvuProqp6to27ELgOOBS4uS0wHVTXJ9nG9Exk3QiPR5I0i5EFSVX9E7NfwwA4cz9jNgIbZ6lPASfPUv8uLYgkSePhN9slSV0MEklSF4NEktTFIJEkdTFIJEldDBJJUheDRJLUxSCRJHUxSCRJXQwSSVIXg0SS1MUgkSR1MUgkSV0MEklSF4NEktTFIJEkdTFIJEldDBJJUheDRJLUxSCRJHUxSCRJXQwSSVIXg0SS1MUgkSR1MUgkSV0MEklSl6XjbmASvefmzeNuQQehj7zh/HG3II2FMxJJUheDRJLUxSCRJHUxSCRJXQwSSVIXg0SS1MUgkSR1MUgkSV0MEklSl5EFSZJrk+xKct9A7QNJ/ivJPW1548BnlybZluShJGcN1E9Ncm/77IokafVDknym1e9MsnJUxyJJ2r9RzkiuA9bOUr+8qk5py+cBkpwIrANOamOuTLKkbX8VsAFY1ZaZfV4APFlVrwAuBy4b1YFIkvZvZEFSVV8Bnhhy87OBG6rqmap6GNgGrElyHHBYVd1RVQVsBs4ZGLOprd8InDkzW5EkLZxxXCN5V5J/bae+jmi15cCjA9tsb7XlbX3f+l5jqmoP8BRw1Gx/MMmGJFNJpnbv3j1/RyJJWvAguQr4WeAUYCfwkVafbSZRc9TnGvPcYtXVVbW6qlYvW7bseTUsSZrbggZJVT1WVc9W1feBvwTWtI+2A8cPbLoC2NHqK2ap7zUmyVLgcIY/lSZJmicLGiTtmseM3wNm7ujaCqxrd2KdwPRF9buqaifwdJLT2vWP84GbBsasb+vnAl9u11EkSQtoZD9sleTTwOnA0Um2A+8HTk9yCtOnoB4B3glQVfcn2QI8AOwBLqqqZ9uuLmT6DrBDgZvbAnANcH2SbUzPRNaN6lgkSfs3siCpqrfMUr5mju03AhtnqU8BJ89S/y5wXk+PkqR+frNdktTFIJEkdTFIJEldDBJJUheDRJLUxSCRJHUxSCRJXQwSSVIXg0SS1MUgkSR1GSpIktw6TE2StPjM+aytJD8BvJjpBy8ewQ9/A+Qw4GUj7k2SNAF+1EMb3wlczHRo3M0Pg+TbwCdG15YkaVLMGSRV9THgY0neXVUfX6CeJEkTZKjHyFfVx5P8BrBycExVbR5RX5KkCTFUkCS5nunfWr8HmPnBqQIMEkla5Ib9YavVwIn+lK0kaV/Dfo/kPuCnR9mIJGkyDTsjORp4IMldwDMzxar63ZF0JUmaGMMGyQdG2YQkaXINe9fW7aNuRJI0mYa9a+tppu/SAngR8ELgf6vqsFE1JkmaDMPOSF46+D7JOcCaUTQkSZosB/T036r6B+C189uKJGkSDXtq600Db1/A9PdK/E6JJGnou7Z+Z2B9D/AIcPa8dyNJmjjDXiN5+6gbkSRNpmF/2GpFks8l2ZXksSSfTbJi1M1Jkg5+w15s/xSwlenfJVkO/GOrSZIWuWGDZFlVfaqq9rTlOmDZCPuSJE2IYYPk8SRvTbKkLW8FvjXKxiRJk2HYIHkH8Gbgv4GdwLmAF+AlSUPf/vsnwPqqehIgyZHAh5kOGEnSIjbsjOSXZ0IEoKqeAF45mpYkSZNk2CB5QZIjZt60GcmwsxlJ0o+xYcPgI8C/JLmR6UejvBnYOLKuJEkTY6gZSVVtBn4feAzYDbypqq6fa0ySa9sXGO8bqB2Z5JYkX2+vg7OcS5NsS/JQkrMG6qcmubd9dkWStPohST7T6ncmWfm8jlySNC+GfvpvVT1QVX9eVR+vqgeGGHIdsHaf2iXArVW1Cri1vSfJicA64KQ25sokS9qYq4ANwKq2zOzzAuDJqnoFcDlw2bDHIkmaPwf0GPlhVNVXgCf2KZ8NbGrrm4BzBuo3VNUzVfUwsA1Yk+Q44LCquqOqCti8z5iZfd0InDkzW5EkLZyRBcl+HFtVOwHa6zGtvhx4dGC77a22vK3vW99rTFXtAZ4CjprtjybZkGQqydTu3bvn6VAkSbDwQbI/s80kao76XGOeW6y6uqpWV9XqZct8soskzaeFDpLH2ukq2uuuVt8OHD+w3QpgR6uvmKW+15gkS4HDee6pNEnSiC10kGwF1rf19cBNA/V17U6sE5i+qH5XO/31dJLT2vWP8/cZM7Ovc4Evt+sokqQFNLIvFSb5NHA6cHSS7cD7gQ8CW5JcAHwTOA+gqu5PsgV4gOlfYLyoqp5tu7qQ6TvADgVubgvANcD1SbYxPRNZN6pjkSTt38iCpKresp+PztzP9huZ5UuOVTUFnDxL/bu0IJIkjc/BcrFdkjShDBJJUheDRJLUxSCRJHUxSCRJXQwSSVIXg0SS1MUgkSR1MUgkSV0MEklSF4NEktTFIJEkdTFIJEldDBJJUheDRJLUxSCRJHUxSCRJXQwSSVIXg0SS1MUgkSR1MUgkSV0MEklSF4NEktTFIJEkdTFIJEldDBJJUheDRJLUxSCRJHUxSCRJXQwSSVIXg0SS1MUgkSR1MUgkSV0MEklSF4NEktTFIJEkdRlLkCR5JMm9Se5JMtVqRya5JcnX2+sRA9tfmmRbkoeSnDVQP7XtZ1uSK5JkHMcjSYvZOGckZ1TVKVW1ur2/BLi1qlYBt7b3JDkRWAecBKwFrkyypI25CtgArGrL2gXsX5LEwXVq62xgU1vfBJwzUL+hqp6pqoeBbcCaJMcBh1XVHVVVwOaBMZKkBTKuICngS0nuTrKh1Y6tqp0A7fWYVl8OPDowdnurLW/r+9YlSQto6Zj+7qurakeSY4BbkvzbHNvOdt2j5qg/dwfTYbUB4OUvf/nz7VWSNIexzEiqakd73QV8DlgDPNZOV9Fed7XNtwPHDwxfAexo9RWz1Gf7e1dX1eqqWr1s2bL5PBRJWvQWPEiSvCTJS2fWgdcD9wFbgfVts/XATW19K7AuySFJTmD6ovpd7fTX00lOa3drnT8wRpK0QMZxautY4HPtTt2lwN9W1ReSfBXYkuQC4JvAeQBVdX+SLcADwB7goqp6tu3rQuA64FDg5rZIkhbQggdJVX0D+JVZ6t8CztzPmI3AxlnqU8DJ892jJGl4B9Ptv5KkCWSQSJK6GCSSpC4GiSSpi0EiSepikEiSuhgkkqQuBokkqYtBIknqYpBIkroYJJKkLgaJJKmLQSJJ6mKQSJK6GCSSpC4GiSSpi0EiSepikEiSuhgkkqQuBokkqYtBIknqYpBIkroYJJKkLgaJJKmLQSJJ6mKQSJK6GCSSpC4GiSSpi0EiSepikEiSuhgkkqQuBokkqYtBIknqYpBIkroYJJKkLgaJJKmLQSJJ6jLxQZJkbZKHkmxLcsm4+5GkxWaigyTJEuATwBuAE4G3JDlxvF1J0uIy0UECrAG2VdU3qup7wA3A2WPuSZIWlaXjbqDTcuDRgffbgVftu1GSDcCG9vZ/kjy0AL0tFkcDj4+7iYPBR1k/7ha0N/83Z/zBh+ZjLz+zvw8mPUgyS62eU6i6Grh69O0sPkmmqmr1uPuQ9uX/5sKZ9FNb24HjB96vAHaMqRdJWpQmPUi+CqxKckKSFwHrgK1j7kmSFpWJPrVVVXuSvAv4IrAEuLaq7h9zW4uNpwx1sPJ/c4Gk6jmXFCRJGtqkn9qSJI2ZQSJJ6mKQ6ID4aBodrJJcm2RXkvvG3ctiYZDoefPRNDrIXQesHXcTi4lBogPho2l00KqqrwBPjLuPxcQg0YGY7dE0y8fUi6QxM0h0IIZ6NI2kxcEg0YHw0TSSfsAg0YHw0TSSfsAg0fNWVXuAmUfTPAhs8dE0Olgk+TRwB/DzSbYnuWDcPf248xEpkqQuzkgkSV0MEklSF4NEktTFIJEkdTFIJEldDBJpASS5OMmLB96fl+TBJLeNsy9pPnj7r7QAkjwCrK6qx9v7LwCXVZVBook30b/ZLh2MkrwE2ML0o2OWAH8HvAy4LcnjwG3AbwInJNkKXAJ8EDgdOAT4RFX9RdvXe4G3Ad8Hbq6qS5KcAnwSeDHwH8A7qurJBTtAaR8GiTT/1gI7quq3AZIcDrwdOGNgRvJa4I+qairJBuCpqvq1JIcA/5zkS8AvAOcAr6qq7yQ5su1/M/Duqro9yR8D7wcuXsDjk/biNRJp/t0LvC7JZUleU1VP/YjtXw+cn+Qe4E7gKGAV8DrgU1X1HYCqeqKF0k9V1e1t7Cbgt0ZxENKwnJFI86yq/j3JqcAbgT9ts4u5hOkZxhf3KiZr8fH8mgDOSKR5luRlwHeq6q+BDwO/CjwNvHQ/Q74IXJjkhW38z7XrLF8C3jFzt1eSI9vs5skkr2lj3wbcPttOpYXijESaf78EfCjJ94H/Ay4Efh24OcnOqjpjn+3/ClgJfC1JgN3AOVX1hXZhfSrJ94DPA+8D1gOfbAHzDaavv0hj4+2/kqQuntqSJHUxSCRJXQwSSVIXg0SS1MUgkSR1MUgkSV0MEklSl/8HWHMOBMMwgc8AAAAASUVORK5CYII=\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "print(ess_de[\"stfeco\"].value_counts())\n",
    "sns.countplot(x=\"stfeco\", data=ess_de, palette=\"Set2\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 393,
   "metadata": {},
   "outputs": [],
   "source": [
    "num_fives = (ess_de['stfeco'] == 5).sum()\n",
    "\n",
    "# calculate the number of 5 values to replace with 0 and 1\n",
    "num_replace_zero = num_fives // 2\n",
    "num_replace_one = num_fives - num_replace_zero\n",
    "\n",
    "# get the indices of the 5 values to replace\n",
    "replace_indices_zero = np.random.choice(ess_de[ess_de['stfeco'] == 5].index, num_replace_zero, replace=False)\n",
    "replace_indices_one = np.random.choice(ess_de[ess_de['stfeco'] == 5].index, num_replace_one, replace=False)\n",
    "\n",
    "# replace the 5 values with 0 and 1\n",
    "ess_de.loc[replace_indices_zero, 'stfeco'] = 0\n",
    "ess_de.loc[replace_indices_one, 'stfeco'] = 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 395,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_pol[\"stfeco\"] = ess_de[\"stfeco\"]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "15 - emplrel"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 396,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1    31072\n",
      "2     4396\n",
      "6     3057\n",
      "3      709\n",
      "7       89\n",
      "8       62\n",
      "9       15\n",
      "Name: emplrel, dtype: int64\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "print(ess_de[\"emplrel\"].value_counts())\n",
    "sns.countplot(x=\"emplrel\", data=ess_de, palette=\"Set2\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 397,
   "metadata": {},
   "outputs": [],
   "source": [
    "ess_de['emplrel'] = ess_de['emplrel'].replace([7], 1)\n",
    "ess_de['emplrel'] = ess_de['emplrel'].replace([8], 6)\n",
    "ess_de['emplrel'] = ess_de['emplrel'].replace([9], 2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 398,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_pol[\"emplrel\"] = ess_de[\"emplrel\"]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "16 - hincsrca"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 399,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1     23159\n",
      "4     10369\n",
      "2      2199\n",
      "6      1169\n",
      "5       810\n",
      "8       447\n",
      "3       442\n",
      "77      278\n",
      "88      258\n",
      "7       237\n",
      "99       32\n",
      "Name: hincsrca, dtype: int64\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "print(ess_de[\"hincsrca\"].value_counts())\n",
    "sns.countplot(x=\"hincsrca\", data=ess_de, palette=\"Set2\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 400,
   "metadata": {},
   "outputs": [],
   "source": [
    "ess_de['hincsrca'] = ess_de['hincsrca'].replace([77,88,99], ess_de['hincsrca'].median())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 401,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_pol[\"hincsrca\"] = ess_de[\"hincsrca\"]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "17 - hinctnta"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 409,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "4.0     4351\n",
      "3.0     4281\n",
      "5.0     4274\n",
      "7.0     4183\n",
      "6.0     4170\n",
      "2.0     4062\n",
      "8.0     4017\n",
      "1.0     3830\n",
      "9.0     3196\n",
      "10.0    3036\n",
      "Name: hinctnta, dtype: int64\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "print(ess_de[\"hinctnta\"].value_counts())\n",
    "sns.countplot(x=\"hinctnta\", data=ess_de, palette=\"Set2\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 403,
   "metadata": {},
   "outputs": [],
   "source": [
    "ess_de['hinctnta'] = ess_de['hinctnta'].replace([88,99], 77)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 405,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Assuming you already have the dataframe called ess_de\n",
    "# Replace 77 with np.nan to work with pandas method\n",
    "ess_de['hinctnta'] = ess_de['hinctnta'].replace(77, np.nan)\n",
    "\n",
    "# Count the number of NaN values (previously 77)\n",
    "num_to_replace = ess_de['hinctnta'].isna().sum()\n",
    "\n",
    "# Calculate how many times you need to replace each value from 0 to 10\n",
    "num_per_value = num_to_replace // 11\n",
    "remainder = num_to_replace % 11\n",
    "\n",
    "# Create a list with the new values to replace the 77 values\n",
    "replacement_values = list(range(11)) * num_per_value\n",
    "replacement_values += list(range(remainder))\n",
    "\n",
    "# Shuffle the list to distribute the new values randomly\n",
    "np.random.shuffle(replacement_values)\n",
    "\n",
    "# Replace NaN values with the new values from the list\n",
    "ess_de['hinctnta'] = ess_de['hinctnta'].apply(lambda x: replacement_values.pop() if np.isnan(x) else x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 408,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Count the number of 0 values\n",
    "num_zeros = (ess_de['hinctnta'] == 0).sum()\n",
    "\n",
    "# Calculate how many times you need to replace each value from 1 to 10\n",
    "num_per_value = num_zeros // 10\n",
    "remainder = num_zeros % 10\n",
    "\n",
    "# Create a list with the new values to replace the 0 values\n",
    "replacement_values = list(range(1, 11)) * num_per_value\n",
    "replacement_values += list(range(1, remainder + 1))\n",
    "\n",
    "# Shuffle the list to distribute the new values randomly\n",
    "np.random.shuffle(replacement_values)\n",
    "\n",
    "# Replace 0 values with the new values from the list\n",
    "ess_de.loc[ess_de['hinctnta'] == 0, 'hinctnta'] = replacement_values\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 410,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_pol[\"hinctnta\"] = ess_de[\"hinctnta\"]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "17 - lknemny"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 411,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2.0    14809\n",
      "1.0    12571\n",
      "3.0     6130\n",
      "4.0     2495\n",
      "8.0     1112\n",
      "9.0      161\n",
      "7.0      112\n",
      "Name: lknemny, dtype: int64\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "print(ess_de[\"lknemny\"].value_counts())\n",
    "sns.countplot(x=\"lknemny\", data=ess_de, palette=\"Set2\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 412,
   "metadata": {},
   "outputs": [],
   "source": [
    "ess_de['lknemny'] = ess_de['lknemny'].replace([1,2], 0)\n",
    "ess_de['lknemny'] = ess_de['lknemny'].replace([3,4], 1)\n",
    "ess_de['lknemny'] = ess_de['lknemny'].replace([7,8,9], ess_de['lknemny'].median())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 413,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.0    28765\n",
      "1.0     8625\n",
      "Name: lknemny, dtype: int64\n"
     ]
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAZIAAAEJCAYAAAC+I6F6AAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjMuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8vihELAAAACXBIWXMAAAsTAAALEwEAmpwYAAAUX0lEQVR4nO3dbbBd1X3f8e/PiGKaBMzDhRIJWzSoUwNt5KKqmvgNDU2QnQfhFGK5dVBdTZVS3MYznmnB0xnTBzohjWGCbUhJwTxMYtBgu6gpOCEirictBl9SaiFhisZQo6AiORDA06JY8r8vztL4SBxdXWnpnMvlfj8ze84+/73Xumt7DvPz3mvvrVQVkiQdrbfN9QAkSfObQSJJ6mKQSJK6GCSSpC4GiSSpi0EiSeoytiBJ8vYkjyX5n0m2JvlXrX5qkoeSPNM+Txlqc02S7UmeTnLJUP3CJFvatpuSpNVPSHJvqz+aZOm4jkeSNNo4z0j2AD9ZVT8OLAdWJ1kFXA1srqplwOb2nSTnAWuB84HVwM1Jjmt93QJsAJa1ZXWrrwderqpzgRuB68d4PJKkERaNq+MaPOn43fb1+LYUsAa4qNXvBL4C/ItWv6eq9gDPJtkOrEzyHHBSVT0CkOQu4FLgwdbm2tbXfcBnkqRmeMry9NNPr6VLlx6LQ5SkBePxxx//TlVNjdo2tiABaGcUjwPnAp+tqkeTnFlVOwGqameSM9rui4GvDTXf0Wrfa+sH1/e3eb71tTfJK8BpwHcONaalS5cyPT3dfWyStJAk+d+H2jbWyfaq2ldVy4ElDM4uLphh94zqYob6TG0O7DjZkGQ6yfTu3bsPM2pJ0pGYyF1bVfVnDC5hrQZeTHIWQPvc1XbbAZw91GwJ8EKrLxlRP6BNkkXAycBLI/7+rVW1oqpWTE2NPDOTJB2lcd61NZXkHW39RODvAN8ENgHr2m7rgPvb+iZgbbsT6xwGk+qPtctgryVZ1e7WuuKgNvv7ugx4eKb5EUnSsTfOOZKzgDvbPMnbgI1V9btJHgE2JlkPfBu4HKCqtibZCGwD9gJXVdW+1teVwB3AiQwm2R9s9duAu9vE/EsM7vqSJE1QFtr/gV+xYkU52S5JRybJ41W1YtQ2n2yXJHUxSCRJXQwSSVIXg0SS1GWsT7a/VX38wbvmegh6E/rU+66Y6yFIc8IzEklSF4NEktTFIJEkdTFIJEldDBJJUheDRJLUxSCRJHUxSCRJXQwSSVIXg0SS1MUgkSR1MUgkSV0MEklSF4NEktTFIJEkdTFIJEldDBJJUheDRJLUxSCRJHUxSCRJXQwSSVIXg0SS1GVsQZLk7CR/mOSpJFuT/EqrX5vkT5I80Zb3D7W5Jsn2JE8nuWSofmGSLW3bTUnS6ickubfVH02ydFzHI0kabZxnJHuBj1fVu4FVwFVJzmvbbqyq5W15AKBtWwucD6wGbk5yXNv/FmADsKwtq1t9PfByVZ0L3AhcP8bjkSSNMLYgqaqdVfXHbf014Clg8QxN1gD3VNWeqnoW2A6sTHIWcFJVPVJVBdwFXDrU5s62fh9w8f6zFUnSZExkjqRdcnoP8GgrfTTJN5LcnuSUVlsMPD/UbEerLW7rB9cPaFNVe4FXgNPGcQySpNHGHiRJfhj4AvCxqnqVwWWqHwOWAzuBT+3fdUTzmqE+U5uDx7AhyXSS6d27dx/ZAUiSZjTWIElyPIMQ+e2q+iJAVb1YVfuq6vvAbwEr2+47gLOHmi8BXmj1JSPqB7RJsgg4GXjp4HFU1a1VtaKqVkxNTR2rw5MkMd67tgLcBjxVVTcM1c8a2u0DwJNtfROwtt2JdQ6DSfXHqmon8FqSVa3PK4D7h9qsa+uXAQ+3eRRJ0oQsGmPf7wV+CdiS5IlW+wTwoSTLGVyCeg74ZYCq2ppkI7CNwR1fV1XVvtbuSuAO4ETgwbbAIKjuTrKdwZnI2jEejyRphLEFSVX9EaPnMB6Yoc11wHUj6tPABSPqrwOXdwxTktTJJ9slSV0MEklSF4NEktTFIJEkdTFIJEldDBJJUheDRJLUxSCRJHUxSCRJXQwSSVIXg0SS1MUgkSR1MUgkSV0MEklSF4NEktTFIJEkdTFIJEldDBJJUheDRJLUxSCRJHUxSCRJXQwSSVIXg0SS1MUgkSR1MUgkSV0MEklSF4NEktRlbEGS5Owkf5jkqSRbk/xKq5+a5KEkz7TPU4baXJNke5Knk1wyVL8wyZa27aYkafUTktzb6o8mWTqu45EkjTbOM5K9wMer6t3AKuCqJOcBVwObq2oZsLl9p21bC5wPrAZuTnJc6+sWYAOwrC2rW3098HJVnQvcCFw/xuORJI0wtiCpqp1V9cdt/TXgKWAxsAa4s+12J3BpW18D3FNVe6rqWWA7sDLJWcBJVfVIVRVw10Ft9vd1H3Dx/rMVSdJkTGSOpF1yeg/wKHBmVe2EQdgAZ7TdFgPPDzXb0WqL2/rB9QPaVNVe4BXgtLEchCRppLEHSZIfBr4AfKyqXp1p1xG1mqE+U5uDx7AhyXSS6d27dx9uyJKkIzDWIElyPIMQ+e2q+mIrv9guV9E+d7X6DuDsoeZLgBdafcmI+gFtkiwCTgZeOngcVXVrVa2oqhVTU1PH4tAkSc0479oKcBvwVFXdMLRpE7Cura8D7h+qr213Yp3DYFL9sXb567Ukq1qfVxzUZn9flwEPt3kUSdKELBpj3+8FfgnYkuSJVvsE8KvAxiTrgW8DlwNU1dYkG4FtDO74uqqq9rV2VwJ3ACcCD7YFBkF1d5LtDM5E1o7xeCRJI4wtSKrqjxg9hwFw8SHaXAdcN6I+DVwwov46LYgkSXPDJ9slSV0MEklSF4NEktTFIJEkdTFIJEldDBJJUheDRJLUxSCRJHUxSCRJXQwSSVIXg0SS1MUgkSR1MUgkSV0MEklSF4NEktTFIJEkdTFIJEldDBJJUheDRJLUZVZBkmTzbGqSpIVn0Uwbk7wd+IvA6UlOAdI2nQT86JjHJkmaB2YMEuCXgY8xCI3H+UGQvAp8dnzDkiTNFzMGSVX9BvAbSf5pVX16QmOSJM0jhzsjAaCqPp3kJ4Clw22q6q4xjUuSNE/MKkiS3A38GPAEsK+VCzBIJGmBm1WQACuA86qqxjkYSdL8M9vnSJ4E/tI4ByJJmp9mGySnA9uS/F6STfuXmRokuT3JriRPDtWuTfInSZ5oy/uHtl2TZHuSp5NcMlS/MMmWtu2mJGn1E5Lc2+qPJll6REcuSTomZntp69qj6PsO4DO8cR7lxqr69eFCkvOAtcD5DG41/oMkf6Wq9gG3ABuArwEPAKuBB4H1wMtVdW6StcD1wAePYpySpA6zvWvrvx5px1X11SM4S1gD3FNVe4Bnk2wHViZ5Djipqh4BSHIXcCmDIFnDDwLuPuAzSeI8jiRN1mxfkfJaklfb8nqSfUlePcq/+dEk32iXvk5ptcXA80P77Gi1xW394PoBbapqL/AKcNpRjkmSdJRmFSRV9SNVdVJb3g78XQaXrY7ULQxuI14O7AQ+1eoZsW/NUJ+pzRsk2ZBkOsn07t27j2jAkqSZHdXbf6vqPwE/eRTtXqyqfVX1feC3gJVt0w7g7KFdlwAvtPqSEfUD2iRZBJwMvHSIv3trVa2oqhVTU1NHOmxJ0gxm+0DiLwx9fRuD50qOeC4iyVlVtbN9/QCD24oBNgG/k+QGBpPty4DHqmpfu6y2CngUuAL49FCbdcAjwGXAw86PSNLkzfaurZ8bWt8LPMdgsvuQknweuIjBm4N3AJ8ELkqynEEIPcfgpZBU1dYkG4Ftrf+r2h1bAFcyuAPsRAaT7A+2+m3A3W1i/iUGd31JkiZstndtfeRIO66qD40o3zbD/tcB142oTwMXjKi/Dlx+pOOSJB1bs71ra0mSL7UHDF9M8oUkSw7fUpL0VjfbyfbPMZiT+FEGt93+51aTJC1wsw2Sqar6XFXtbcsdgLc/SZJmHSTfSfLhJMe15cPAn45zYJKk+WG2QfIPgV8E/g+DBwkvA454Al6S9NYz29t//w2wrqpeBkhyKvDrDAJGkrSAzfaM5K/vDxGAqnoJeM94hiRJmk9mGyRvG3rB4v4zktmezUiS3sJmGwafAv57kvsYPJX+i4x4eFCStPDM9sn2u5JMM3hRY4BfqKptYx2ZJGlemPXlqRYchock6QBH9Rp5SZL2M0gkSV0MEklSF4NEktTFIJEkdTFIJEldDBJJUheDRJLUxSCRJHUxSCRJXQwSSVIXg0SS1MUgkSR1MUgkSV0MEklSF4NEktRlbEGS5PYku5I8OVQ7NclDSZ5pn8P/Dvw1SbYneTrJJUP1C5NsadtuSpJWPyHJva3+aJKl4zoWSdKhjfOM5A5g9UG1q4HNVbUM2Ny+k+Q8YC1wfmtzc5LjWptbgA3Asrbs73M98HJVnQvcCFw/tiORJB3S2IKkqr4KvHRQeQ1wZ1u/E7h0qH5PVe2pqmeB7cDKJGcBJ1XVI1VVwF0Htdnf133AxfvPViRJkzPpOZIzq2onQPs8o9UXA88P7bej1Ra39YPrB7Spqr3AK8BpYxu5JGmkN8tk+6gziZqhPlObN3aebEgynWR69+7dRzlESdIokw6SF9vlKtrnrlbfAZw9tN8S4IVWXzKifkCbJIuAk3njpTQAqurWqlpRVSumpqaO0aFIkmDyQbIJWNfW1wH3D9XXtjuxzmEwqf5Yu/z1WpJVbf7jioPa7O/rMuDhNo8iSZqgRePqOMnngYuA05PsAD4J/CqwMcl64NvA5QBVtTXJRmAbsBe4qqr2ta6uZHAH2InAg20BuA24O8l2Bmcia8d1LJKkQxtbkFTVhw6x6eJD7H8dcN2I+jRwwYj667QgkiTNnTfLZLskaZ4ySCRJXQwSSVIXg0SS1MUgkSR1GdtdW5Imb9ct/3yuh6A3oTOu/LWx9u8ZiSSpi0EiSepikEiSuhgkkqQuBokkqYtBIknqYpBIkroYJJKkLgaJJKmLQSJJ6mKQSJK6GCSSpC4GiSSpi0EiSepikEiSuhgkkqQuBokkqYtBIknqYpBIkroYJJKkLgaJJKnLnARJkueSbEnyRJLpVjs1yUNJnmmfpwztf02S7UmeTnLJUP3C1s/2JDclyVwcjyQtZHN5RvK3q2p5Va1o368GNlfVMmBz+06S84C1wPnAauDmJMe1NrcAG4BlbVk9wfFLknhzXdpaA9zZ1u8ELh2q31NVe6rqWWA7sDLJWcBJVfVIVRVw11AbSdKEzFWQFPD7SR5PsqHVzqyqnQDt84xWXww8P9R2R6stbusH1yVJE7Rojv7ue6vqhSRnAA8l+eYM+46a96gZ6m/sYBBWGwDe+c53HulYJUkzmJMzkqp6oX3uAr4ErARebJeraJ+72u47gLOHmi8BXmj1JSPqo/7erVW1oqpWTE1NHctDkaQFb+JBkuSHkvzI/nXgp4EngU3AurbbOuD+tr4JWJvkhCTnMJhUf6xd/notyap2t9YVQ20kSRMyF5e2zgS+1O7UXQT8TlV9OcnXgY1J1gPfBi4HqKqtSTYC24C9wFVVta/1dSVwB3Ai8GBbJEkTNPEgqapvAT8+ov6nwMWHaHMdcN2I+jRwwbEeoyRp9t5Mt/9KkuYhg0SS1MUgkSR1MUgkSV0MEklSF4NEktTFIJEkdTFIJEldDBJJUheDRJLUxSCRJHUxSCRJXQwSSVIXg0SS1MUgkSR1MUgkSV0MEklSF4NEktTFIJEkdTFIJEldDBJJUheDRJLUxSCRJHUxSCRJXQwSSVIXg0SS1MUgkSR1mfdBkmR1kqeTbE9y9VyPR5IWmnkdJEmOAz4LvA84D/hQkvPmdlSStLDM6yABVgLbq+pbVfXnwD3AmjkekyQtKPM9SBYDzw9939FqkqQJWTTXA+iUEbV6w07JBmBD+/rdJE+PdVQLy+nAd+Z6EG8GN7BuroegA/nb3O+f/Ptj0cu7DrVhvgfJDuDsoe9LgBcO3qmqbgVundSgFpIk01W1Yq7HIR3M3+bkzPdLW18HliU5J8lfANYCm+Z4TJK0oMzrM5Kq2pvko8DvAccBt1fV1jkeliQtKPM6SACq6gHggbkexwLmJUO9WfnbnJBUvWFuWpKkWZvvcySSpDlmkOiwDvcamgzc1LZ/I8nfmItxauFJcnuSXUmePMR2f5sTYJBoRrN8Dc37gGVt2QDcMtFBaiG7A1g9w3Z/mxNgkOhwZvMamjXAXTXwNeAdSc6a9EC18FTVV4GXZtjF3+YEGCQ6nNm8hsZX1ejNyt/mBBgkOpzZvIZmVq+qkeaAv80JMEh0OLN5Dc2sXlUjzQF/mxNgkOhwZvMamk3AFe0OmVXAK1W1c9IDlUbwtzkB8/7Jdo3XoV5Dk+Qft+2/yeDNAu8HtgP/F/jIXI1XC0uSzwMXAacn2QF8Ejge/G1Okk+2S5K6eGlLktTFIJEkdTFIJEldDBJJUheDRJLUxSCRjlKS77bPi5L87lyPR5orBokkqYtBIh1DSf5mkv+R5C8nubb9exlfSfKtJP9saL8PJ3ksyRNJ/kN7XT9Jvpvk+iSPJ/mDJCuH2v982+cfJPliki8neSbJr7X6+iQ3Dv2Nf5Tkhkn/b6CFxyCRjpEkPwH8JrCmqr7Vyn8VuITB6/g/meT4JO8GPgi8t6qWA/uAv9/2/yHgK1V1IfAa8G+BnwI+APzroT+3vPXx14APJjmbwSv+fz7J8W2fjwCfG8OhSgfwFSnSsfFu4Fbgp6tq+KWA/6Wq9gB7kuwCzgQuBi4Evp4E4ERgV9v/z4Evt/UtwJ6q+l6SLcDSoX43V9UrAEm2Ae+qqueTPAz8bJKngOOrassYjlU6gEEiHRs7gbcD7+HAt8vuGVrfx+C/uQB3VtU1I/r5Xv3gvUXf39++qr6fZPi/11H9AvxH4BPAN/FsRBPipS3p2Pgz4GeAf5fkosPsuxm4LMkZAElOTfKuYzGIqnqUwWvT/x7w+WPRp3Q4Bol0jFTVi8DPAZ9N8rdm2G8b8C+B30/yDeAh4Fj+868bgf9WVS8fwz6lQ/Ltv9JbTHum5caq2jzXY9HC4BmJ9BaR5B1J/hfw/wwRTZJnJJKkLp6RSJK6GCSSpC4GiSSpi0EiSepikEiSuhgkkqQu/x/krMaMZxLe4QAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "print(ess_de[\"lknemny\"].value_counts())\n",
    "sns.countplot(x=\"lknemny\", data=ess_de, palette=\"Set2\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 414,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_pol[\"lknemny\"] = ess_de[\"lknemny\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 416,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>basinc</th>\n",
       "      <th>nwspol</th>\n",
       "      <th>polintr</th>\n",
       "      <th>vote</th>\n",
       "      <th>sgnptit</th>\n",
       "      <th>pstplonl</th>\n",
       "      <th>trstplt</th>\n",
       "      <th>trstprt</th>\n",
       "      <th>lrscale</th>\n",
       "      <th>stfgov</th>\n",
       "      <th>...</th>\n",
       "      <th>lbenent</th>\n",
       "      <th>bennent</th>\n",
       "      <th>uemplap</th>\n",
       "      <th>dsbldp</th>\n",
       "      <th>rtrdp</th>\n",
       "      <th>stfeco</th>\n",
       "      <th>emplrel</th>\n",
       "      <th>hincsrca</th>\n",
       "      <th>hinctnta</th>\n",
       "      <th>lknemny</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>120</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>6</td>\n",
       "      <td>7.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>120</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>5.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>30</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>2.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>30</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>4.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>30</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 49 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   basinc  nwspol  polintr  vote  sgnptit  pstplonl  trstplt  trstprt  \\\n",
       "0       1     120        1     1        1         1        0        1   \n",
       "1       1     120        1     1        0         1        0        0   \n",
       "2       0      30        0     1        0         0        0        0   \n",
       "3       1      30        1     0        0         0        0        0   \n",
       "4       1      30        0     0        0         0        1        1   \n",
       "\n",
       "   lrscale  stfgov  ...  lbenent  bennent  uemplap dsbldp  rtrdp  stfeco  \\\n",
       "0        0       0  ...        1        0        0      0      0       0   \n",
       "1        0       0  ...        0        0        0      0      0       0   \n",
       "2        5       0  ...        0        1        0      0      0       1   \n",
       "3        0       1  ...        1        1        0      0      0       1   \n",
       "4        5       0  ...        1        0        0      0      0       1   \n",
       "\n",
       "   emplrel  hincsrca  hinctnta  lknemny  \n",
       "0        1         6       7.0      NaN  \n",
       "1        2         1       5.0      NaN  \n",
       "2        1         4       2.0      NaN  \n",
       "3        1         1       4.0      NaN  \n",
       "4        1         1       2.0      NaN  \n",
       "\n",
       "[5 rows x 49 columns]"
      ]
     },
     "execution_count": 416,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_pol.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "metadata": {},
   "outputs": [],
   "source": [
    "#econ_var.to_csv('ALL_econ_var.csv', index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 417,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_pol.to_csv(\"ess_preprocessed.csv\", index = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
